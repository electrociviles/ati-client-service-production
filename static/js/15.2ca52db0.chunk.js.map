{"version":3,"sources":["views/Map/MapView.js","queries/zone.query.js"],"names":["_map","Map","props","useState","polygon","map","setMap","mapContainer","useRef","dataZones","useQuery","Zones","fetchPolicy","onCompleted","console","log","getZones","mapboxgl","accessToken","container","current","style","center","zoom","on","resize","zone","wrapperPin","document","createElement","className","pinName","innerHTML","name","pin","img","src","pulse","appendChild","marker","Marker","setLngLat","zone_path","lng","lat","addTo","currentCoordinates","zp","addSource","id","addLayer","initializeMap","data","ref","el","gql","Zone"],"mappings":"6MAQIA,G,OAAO,MAqHIC,UApHH,SAAAC,GAAU,IAAD,EAGOC,mBAAS,IAHhB,gCAIKA,mBAASD,EAAME,UAJpB,gCAMGD,mBAAS,OANZ,mBAMZE,EANY,KAMPC,EANO,KAObC,EAAeC,iBAAO,MAEdC,EAAcC,YAASC,IAAO,CAC1CC,YAAa,WACbC,YAAa,WACXC,QAAQC,IAAIN,EAAUO,UAGtBC,IAASC,YAAc,iGAgFlBb,GA/EiB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,cAC/BP,EAAO,IAAIiB,IAAShB,IAAI,CACtBkB,UAAWZ,EAAaa,QACxBC,MAAO,qCACPC,OAAQ,EAAE,UAAW,UACrBC,KAAM,MAGHC,GAAG,QAAQ,WACdlB,EAAON,GACPA,EAAKyB,SAGLhB,EAAUO,SAASX,KAAI,SAAAqB,GAErB,IAAIC,EAAaC,SAASC,cAAc,OACxCF,EAAWG,UAAY,cAEvB,IAAIC,EAAUH,SAASC,cAAc,OACrCE,EAAQD,UAAY,WACpBC,EAAQC,UAAYN,EAAKO,KAEzB,IAAIC,EAAMN,SAASC,cAAc,OACjCK,EAAIJ,UAAY,MAEhB,IAAIK,EAAMP,SAASC,cAAc,OACjCM,EAAIC,IAAM,eAEV,IAAIC,EAAQT,SAASC,cAAc,OACnCQ,EAAMP,UAAY,QAGlBH,EAAWW,YAAYP,GACvBJ,EAAWW,YAAYJ,GACvBP,EAAWW,YAAYH,GACvBR,EAAWW,YAAYD,GAEvB,IAAIE,EAAS,IAAItB,IAASuB,OAAOb,GACjCY,EAAOE,UAAU,CACff,EAAKgB,UAAU,GAAGC,IAClBjB,EAAKgB,UAAU,GAAGE,MAEpBL,EAAOM,MAAM7C,GAIb,IAAI8C,EAAqBpB,EAAKgB,UAAUrC,KAAI,SAAA0C,GAC1C,MAAO,CAACA,EAAGJ,IAAKI,EAAGH,QAErB5C,EAAKgD,UAAUtB,EAAKuB,GAAI,CACtB,KAAQ,UACR,KAAQ,CACN,KAAQ,UACR,SAAY,CACV,KAAQ,UACR,YAAe,CACbH,OAKR9C,EAAKkD,SAAS,CACZ,GAAMxB,EAAKuB,GACX,KAAQ,OACR,OAAUvB,EAAKuB,GACf,OAAU,GACV,MAAS,CACP,aAAc,MACd,eAAgB,YAWhBE,CAAc,CAAE7C,SAAQC,oBAtF9B6C,KAsGR,OACE,yBAAKH,GAAG,MAAMI,IAAK,SAAAC,GAAE,OAAK/C,EAAaa,QAAUkC,O,8oBCvH9C,IAAM3C,EAAQ4C,IAAH,KAYLC,EAAOD,IAAH","file":"static/js/15.2ca52db0.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./mapStyle.css\";\nimport \"./marker.css\";\nimport { Zones } from '../../queries/zone.query'\nimport { useQuery } from \"@apollo/react-hooks\"\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nvar _map = null\nconst Map = props => {\n\n\n  const [zones, setZones] = useState([])\n  const [path, setPath] = useState(props.polygon);\n\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n\n  const { data: dataZones } = useQuery(Zones, {\n    fetchPolicy: 'no-cache',\n    onCompleted: () => {\n      console.log(dataZones.getZones)\n\n      // setZones(dataZones.getZones)\n      mapboxgl.accessToken = 'pk.eyJ1IjoibnRvcnJlczE5ODYiLCJhIjoiY2tiYnFlMjV1MDNzbDMxcnV0cGp6d2EycSJ9.TMjPubTz_kdfNPW9IpzGow';\n      const initializeMap = ({ setMap, mapContainer }) => {\n        _map = new mapboxgl.Map({\n          container: mapContainer.current,\n          style: \"mapbox://styles/mapbox/streets-v11\",\n          center: [-75.581215, 6.244203],//[currentCoordinates[0][0], currentCoordinates[0][1]],\n          zoom: 13\n        });\n\n        _map.on(\"load\", () => {\n          setMap(_map)\n          _map.resize()\n\n\n          dataZones.getZones.map(zone => {\n\n            let wrapperPin = document.createElement('div')\n            wrapperPin.className = 'wrapper-pin'\n\n            let pinName = document.createElement('div')\n            pinName.className = 'pin-name'\n            pinName.innerHTML = zone.name\n\n            let pin = document.createElement('div')\n            pin.className = 'pin'\n\n            let img = document.createElement('img')\n            img.src = './marker.png'\n\n            let pulse = document.createElement('div')\n            pulse.className = 'pulse'\n\n\n            wrapperPin.appendChild(pinName)\n            wrapperPin.appendChild(pin)\n            wrapperPin.appendChild(img)\n            wrapperPin.appendChild(pulse)\n\n            let marker = new mapboxgl.Marker(wrapperPin)\n            marker.setLngLat([\n              zone.zone_path[0].lng,\n              zone.zone_path[0].lat\n            ]);\n            marker.addTo(_map);\n\n\n\n            let currentCoordinates = zone.zone_path.map(zp => {\n              return [zp.lng, zp.lat]\n            })\n            _map.addSource(zone.id, {\n              'type': 'geojson',\n              'data': {\n                'type': 'Feature',\n                'geometry': {\n                  'type': 'Polygon',\n                  'coordinates': [\n                    currentCoordinates\n                  ]\n                }\n              }\n            });\n            _map.addLayer({\n              'id': zone.id,\n              'type': 'fill',\n              'source': zone.id,\n              'layout': {},\n              'paint': {\n                'fill-color': 'red',\n                'fill-opacity': 0.5\n              }\n            });\n          })\n\n\n\n\n        });\n      };\n\n      if (!map) initializeMap({ setMap, mapContainer });\n    }\n  })\n\n\n\n  const setCardinate = (cardinate, index) => {\n    console.log('_______________________________')\n    console.log('cardinate', cardinate)\n    console.log('index', index)\n    console.log('_______________________________')\n  }\n\n  // Clean up refs\n\n  //center={{ lat: 6.244203, lng: -75.581215 }}\n  return (\n    <div id=\"map\" ref={el => (mapContainer.current = el)} ></div>\n  )\n}\n\nexport default Map","import gql from 'graphql-tag'\n\nexport const Zones = gql`\n   query getZones {\n    getZones {\n            id\n            name \n            zone_path {\n                lat\n                lng\n            }\n        }\n    }\n`\nexport const Zone = gql`\n   query getZone($id: ID) {\n    getZone(id: $id) {\n            id\n            name \n            zone_path {\n                lat\n                lng\n            }\n        }\n    }\n` "],"sourceRoot":""}