{"version":3,"sources":["queries/reports.query.js","views/Reports/ReportMaintenances.js"],"names":["gql","useStyles","makeStyles","theme","root","flexGrow","height","minWidth","input","display","padding","paper","spacing","color","palette","text","secondary","marginTop","margin","button","formControl","icon","width","ReportMaintenances","props","moment","locale","useState","page","setPage","rowsPerPage","setRowsPerPage","totalFields","setTotalFields","classes","Date","startDate","setStartDate","endDate","setEndDate","pdf","setPdf","dataPdf","setDataPdf","informations","setInformations","total","setTotal","maintenanceStatus","setMaintenanceStatus","customers","setCustomers","customer","setCustomer","centerOfAttentions","setCenterOfAttentions","centerOfAttention","setCenterOfAttention","errorCustomer","setErrorCustomer","errorTextCustomer","setErrorTextCustomer","errorCenterOfAttention","setErrorCenterOfAttention","errorTextCenterOfAttention","setErrorTextCenterOfAttention","isPrinting","setIsPrinting","useEffect","listCustomers","then","response","validateCustomer","value","undefined","toString","trim","validateCenterOfAttention","onClosePdf","onSubmit","_","errors","user","jwtDecode","localStorage","getItem","role","validateForm","data","start","end","paginate","source","maintenancesReport","sumTotal","count","newMaintenances","maintenances","map","maintenance","console","log","maxWidth","className","encType","e","preventDefault","container","item","xs","sm","utils","DateFnsUtils","disableFuture","format","id","label","onChange","date","KeyboardButtonProps","select","style","variant","error","helperText","event","target","listCenterOfAttention","centersOfAttention","option","key","_id","name","title","type","stickyHeader","aria-label","service","hover","attentionType","description","length","size","onClick","maintenancesPdf","status","pdfData","catch","colSpan","align","displayType","thousandSeparator","prefix","rowsPerPageOptions","component","onChangePage","newPage","onChangeRowsPerPage","open","onClose","aria-labelledby","src"],"mappings":"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","file":"static/js/9.7dd542b9.chunk.js","sourcesContent":["import gql from 'graphql-tag'\r\n\r\n\r\nexport const Reports_Services = gql`\r\n  query reportsServices($start: Int, $end: Int, $startDate: Date, $endDate: Date, $status: String, $type: Int) {\r\n    reportsServices(start: $start, end: $end, startDate: $startDate, endDate: $endDate, status: $status, type: $type) {\r\n        services {\r\n            id\r\n            latitude\r\n            longitude\r\n            date\r\n            typeService\r\n            packs_service {\r\n                quantity\r\n                pack {\r\n                price\r\n                }\r\n            }\r\n            customer {\r\n                names\r\n            }\r\n            technical {\r\n                names\r\n            }\r\n            engineer {\r\n                names\r\n            }\r\n        }\r\n        totalFields\r\n      }\r\n}`\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Reports_Services } from '../../queries/reports.query'\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport moment from 'moment';\r\nimport Moment from 'react-moment';\r\nimport NumberFormat from 'react-number-format';\r\nimport config from '../../config'\r\nimport axios from 'axios'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport clsx from 'clsx';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { maintenancesPdf, listCustomers, listCenterOfAttention, onDownloadAttention, maintenancesReport } from '../../api/api';\r\nimport jwtDecode from 'jwt-decode';\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { BsClockHistory } from 'react-icons/bs';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { FaPrint } from \"react-icons/fa\";\r\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from \"react-icons/ai\";\r\nimport { RiSendPlaneLine } from \"react-icons/ri\";\r\nimport { MdOutlineScheduleSend } from \"react-icons/md\";\r\nimport { AiOutlineCloudDownload } from \"react-icons/ai\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        height: 250,\r\n        minWidth: 290\r\n    },\r\n    input: {\r\n        display: \"flex\",\r\n        padding: 0,\r\n        height: \"auto\"\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        marginTop: 10,\r\n        margin: 5\r\n    },\r\n    button:\r\n    {\r\n        margin: theme.spacing(1),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    icon: {\r\n        width: 24,\r\n        height: 24\r\n    }\r\n}))\r\n\r\nconst ReportMaintenances = props => {\r\n\r\n    moment().locale('es')\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [totalFields, setTotalFields] = useState(0)\r\n\r\n    const classes = useStyles()\r\n    const [startDate, setStartDate] = useState(new Date())\r\n    const [endDate, setEndDate] = useState(new Date())\r\n    const [pdf, setPdf] = useState(false)\r\n    const [dataPdf, setDataPdf] = useState('')\r\n\r\n    const [informations, setInformations] = useState([])\r\n    const [total, setTotal] = useState(0)\r\n    const [serviceType, setServiceType] = useState(1)\r\n    const [maintenanceStatus, setMaintenanceStatus] = useState('')\r\n    const [serviceTypes, setServiceTypes] = useState([])\r\n    const [customers, setCustomers] = useState([])\r\n    const [customer, setCustomer] = useState(\"\")\r\n    const [centerOfAttentions, setCenterOfAttentions] = useState([])\r\n    const [centerOfAttention, setCenterOfAttention] = useState(\"\")\r\n    const [openHistory, setOpenHistory] = useState(false);\r\n    const [attention, setAttention] = useState(null);\r\n    const [errorCustomer, setErrorCustomer] = useState(false);\r\n    const [errorTextCustomer, setErrorTextCustomer] = useState('');\r\n    const [errorCenterOfAttention, setErrorCenterOfAttention] = useState(false);\r\n    const [errorTextCenterOfAttention, setErrorTextCenterOfAttention] = useState('');\r\n    const [isPrinting, setIsPrinting] = useState(false);\r\n\r\n    const maintenanceStatuses = [{\r\n        id: \"\",\r\n        text: \"Todas\"\r\n    }, {\r\n        id: \"active\",\r\n        text: \"Activo\"\r\n    }, {\r\n        id: \"finished\",\r\n        text: \"Finalizado\"\r\n    },]\r\n\r\n\r\n    function prepend(value, array) {\r\n        var newArray = array.slice();\r\n        newArray.unshift(value);\r\n        return newArray;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        listCustomers({}).then(response => {\r\n            setCustomers(response.customers);\r\n        })\r\n\r\n    }, []);\r\n\r\n    const onChangeCenterOfAttention = event => {\r\n        setCenterOfAttention(event.target.value)\r\n    }\r\n    const onChangeCustomer = event => {\r\n\r\n        setCustomer(event.target.value)\r\n        listCenterOfAttention({}).then(response => {\r\n            setCenterOfAttentions(response.centersOfAttention);\r\n        })\r\n    }\r\n    const onChangeMaintenanceStatus = event => {\r\n        setMaintenanceStatus(event.target.value)\r\n    }\r\n    const onChangeStartDate = date => {\r\n        setStartDate(date)\r\n    }\r\n    const onChangeEndDate = value => {\r\n        setEndDate(value)\r\n    }\r\n    const handleChangePage = (_, newPage) => {\r\n\r\n        let data = {\r\n            start: (newPage * rowsPerPage),\r\n            end: rowsPerPage,\r\n            paginate: true,\r\n            startDate,\r\n            endDate,\r\n            customer,\r\n            centerOfAttention,\r\n            maintenanceStatus,\r\n            source: 'web'\r\n        }\r\n\r\n        setPage(newPage);\r\n        maintenancesReport(data).then(response => {\r\n            setInformations(response.maintenances);\r\n            setTotalFields(response.count)\r\n        });\r\n    }\r\n    const handleChangeRowsPerPage = event => {\r\n\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n        let data = {\r\n            start: 0,\r\n            end: event.target.value,\r\n            paginate: true,\r\n            startDate,\r\n            endDate,\r\n            customer,\r\n            centerOfAttention,\r\n            maintenanceStatus,\r\n            source: \"web\"\r\n        }\r\n        maintenancesReport(data).then(response => {\r\n            setInformations(response.maintenances);\r\n            setTotalFields(response.count)\r\n        });\r\n    }\r\n    const validateForm = () => {\r\n\r\n        let errors = 0\r\n        const user = jwtDecode(localStorage.getItem('token'))\r\n\r\n\r\n        if (user.role !== \"5a046fe9627e3526802b3847\")\r\n            errors += validateCustomer()\r\n\r\n\r\n        if (user.role == \"627d968a96a6a6b76f30c7e9\") {\r\n            errors += validateCenterOfAttention()\r\n        }\r\n\r\n        return errors\r\n    }\r\n    const validateCustomer = (value) => {\r\n        let text = value !== undefined ? value : customer\r\n\r\n        if (text == null || text.toString().trim() === '') {\r\n            setErrorCustomer(true)\r\n            setErrorTextCustomer('Este campo es requerido')\r\n            return 1\r\n        }\r\n        else {\r\n            setErrorCustomer(false)\r\n            setErrorTextCustomer('')\r\n            return 0\r\n        }\r\n    }\r\n    const validateCenterOfAttention = (value) => {\r\n        let text = value !== undefined ? value : centerOfAttention\r\n\r\n        if (text == null || text.toString().trim() === '') {\r\n            setErrorCenterOfAttention(true)\r\n            setErrorTextCenterOfAttention('Este campo es requerido')\r\n            return 1\r\n        }\r\n        else {\r\n            setErrorCenterOfAttention(false)\r\n            setErrorTextCenterOfAttention('')\r\n            return 0\r\n        }\r\n    }\r\n    const onPrint = () => {\r\n\r\n        setIsPrinting(true);\r\n        let data = {\r\n            start: 0,\r\n            end: rowsPerPage,\r\n            paginate: true,\r\n            startDate,\r\n            endDate,\r\n            customer,\r\n            centerOfAttention,\r\n            maintenancesReport,\r\n            source: \"web\"\r\n        }\r\n        maintenancesPdf(data).then(response => {\r\n            setIsPrinting(false);\r\n            if (response.status === \"success\") {\r\n                let pdfData = 'data:application/pdf;base64,' + response.data\r\n                setDataPdf(pdfData)\r\n                setPdf(true)\r\n            }\r\n        }).catch(e => {\r\n            console.log(e)\r\n            setIsPrinting(false);\r\n        })\r\n    }\r\n    const onClosePdf = () => {\r\n        setPdf(false)\r\n    }\r\n    const onSubmit = _ => {\r\n\r\n        let errores = validateForm()\r\n        if (errores === 0) {\r\n\r\n            let data = {\r\n                start: 0,\r\n                end: rowsPerPage,\r\n                paginate: true,\r\n                startDate,\r\n                endDate,\r\n                customer,\r\n                centerOfAttention,\r\n                maintenanceStatus,\r\n                source: \"web\"\r\n            }\r\n\r\n            maintenancesReport(data).then(response => {\r\n                let sumTotal = 0\r\n                setTotalFields(response.count)\r\n                const newMaintenances = response.maintenances.map((maintenance, _) => {\r\n                    console.log(\"maintenance \", maintenance.total);\r\n                    if (maintenance.total)\r\n                        sumTotal += maintenance.total\r\n\r\n                    return maintenance\r\n                })\r\n                setInformations(newMaintenances)\r\n                setTotal(sumTotal)\r\n            })\r\n        }\r\n    }\r\n\r\n    const getStatus = item => {\r\n        switch (item.statusSend) {\r\n            case \"send\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Enviado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n\r\n            case \"resend\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Reenviado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n            case \"reject\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Rechazado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n            case \"accept\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Aceptado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n    const downloadAttention = attention => () => {\r\n        const newAttentions = informations.map(currentAttention => {\r\n            if (currentAttention._id === attention._id) {\r\n                currentAttention.downloading = true;\r\n            }\r\n            return currentAttention;\r\n        });\r\n        setInformations(newAttentions)\r\n\r\n        let data = { id: attention._id }\r\n        onDownloadAttention(data).then(response => {\r\n\r\n            const newAttentions = informations.map(currentAttention => {\r\n                if (currentAttention._id === attention._id) {\r\n                    currentAttention.downloading = false;\r\n                }\r\n                return currentAttention;\r\n            });\r\n            setInformations(newAttentions)\r\n\r\n            console.log(response)\r\n            if (response.status === 'success') {\r\n\r\n                toast.info(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                setInformations(newAttentions)\r\n                window.open(`${config.urlPdf}${attention._id}.pdf`)\r\n            } else {\r\n                toast.error(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            toast.error(\"Occurrió un error al descargar la atención\", {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        });\r\n\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer />\r\n\r\n            <Container maxWidth=\"lg\">\r\n                <Paper className={classes.paper}>\r\n                    <form encType={'multipart/form-data'}\r\n                        onSubmit={e => {\r\n                            e.preventDefault()\r\n                            onSubmit()\r\n                        }} >\r\n                        <Grid container >\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <Typography><b>Reporte de mantenimientos</b></Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={3}>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        disableFuture\r\n                                        format=\"yyyy-MM-dd\"\r\n                                        margin=\"dense\"\r\n                                        id=\"date-picker-inline\"\r\n                                        label=\"Fecha inicial\"\r\n                                        value={startDate}\r\n                                        onChange={onChangeStartDate}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        format=\"yyyy-MM-dd\"\r\n                                        margin=\"dense\"\r\n                                        id=\"date-picker-inline\"\r\n                                        label=\"Fecha final\"\r\n                                        value={endDate}\r\n                                        onChange={onChangeEndDate}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Cliente\"\r\n                                    error={errorCustomer}\r\n                                    helperText={errorTextCustomer}\r\n                                    value={customer}\r\n                                    onChange={onChangeCustomer}>\r\n                                    {\r\n                                        customers.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.name}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Centro de atención\"\r\n                                    error={errorCenterOfAttention}\r\n                                    helperText={errorTextCenterOfAttention}\r\n                                    value={centerOfAttention}\r\n                                    onChange={onChangeCenterOfAttention}>\r\n                                    {\r\n                                        centerOfAttentions.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.title}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Estado del mantenimiento\"\r\n                                    value={maintenanceStatus}\r\n                                    onChange={onChangeMaintenanceStatus}>\r\n                                    {\r\n                                        maintenanceStatuses.map(option => (\r\n                                            <MenuItem key={option.id} value={option.id} >\r\n                                                {option.text}\r\n                                            </MenuItem>))\r\n\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2} sm={12}>\r\n                                <Button type=\"submit\" variant=\"contained\" color='primary' style={{ marginTop: 20 }}>Consultar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Paper>\r\n\r\n            </Container>\r\n            <Paper className={classes.paper}>\r\n                <TableContainer className={classes.container} style={{ width: \"100%\" }}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Fecha</TableCell>\r\n                                <TableCell>Número</TableCell>\r\n                                <TableCell>Cliente</TableCell>\r\n                                <TableCell>Tableros</TableCell>\r\n                                <TableCell>Detalle</TableCell>\r\n                                <TableCell>Enviar informe</TableCell>\r\n                                <TableCell width={30}>Descargar informe</TableCell>\r\n\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                informations.map(service => {\r\n                                    return (\r\n                                        <TableRow hover key={service._id}>\r\n                                            <TableCell><Moment format=\"ll\">{new Date(service.date)}</Moment></TableCell>\r\n                                            <TableCell>{service.attentionType.type}</TableCell>\r\n                                            <TableCell>{service.customer.name}</TableCell>\r\n                                            <TableCell>{service.title}</TableCell>\r\n                                            <TableCell>{service.description}</TableCell>\r\n                                            <TableCell>{service.centerOfAttention ? service.centerOfAttention.title : \"\"}</TableCell>\r\n\r\n\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                        </TableBody>\r\n                        {\r\n                            informations.length > 0\r\n                                ? <TableFooter>\r\n                                    <TableRow hover>\r\n                                        <TableCell>\r\n                                            {\r\n                                                !isPrinting ?\r\n                                                    <FaPrint className={classes.icon} onClick={onPrint} />\r\n                                                    : <CircularProgress size={16} />\r\n                                            }\r\n                                        </TableCell>\r\n                                        <TableCell colSpan={7} align=\"right\">\r\n                                            <Typography variant=\"h3\">\r\n                                                <NumberFormat value={total} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableFooter>\r\n                                : null\r\n                        }\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={totalFields}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n\r\n\r\n            <Dialog\r\n                maxWidth=\"lg\"\r\n                open={pdf}\r\n                onClose={onClosePdf}\r\n                aria-labelledby=\"draggable-dialog-title\">\r\n                <DialogTitle id=\"draggable-dialog-title\">Reporte de servicios</DialogTitle>\r\n                <DialogContent>\r\n                    <iframe src={dataPdf} title=\"Imprimir\" height=\"900px\" width=\"600px\" ></iframe>\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={onClosePdf} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default ReportMaintenances "],"sourceRoot":""}