{"version":3,"sources":["views/Reports/ReportAttentions.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","height","minWidth","input","display","padding","paper","spacing","color","palette","text","secondary","marginTop","margin","button","formControl","icon","width","ReportAttentions","props","moment","locale","useState","page","setPage","rowsPerPage","setRowsPerPage","totalFields","setTotalFields","classes","Date","startDate","setStartDate","endDate","setEndDate","pdf","setPdf","dataPdf","setDataPdf","informations","setInformations","total","setTotal","serviceType","setServiceType","serviceStatus","setServiceStatus","serviceTypes","setServiceTypes","customers","setCustomers","customer","setCustomer","centerOfAttentions","setCenterOfAttentions","centerOfAttention","setCenterOfAttention","openHistory","setOpenHistory","attention","setAttention","errorCustomer","setErrorCustomer","errorTextCustomer","setErrorTextCustomer","errorCenterOfAttention","setErrorCenterOfAttention","errorTextCenterOfAttention","setErrorTextCenterOfAttention","isPrinting","setIsPrinting","useEffect","jwtDecode","localStorage","getItem","getAttentionsTypes","then","response","type","value","array","newArray","slice","unshift","prepend","attentionsTypes","listCustomers","validateCustomer","undefined","toString","trim","validateCenterOfAttention","onClosePdf","onSubmit","_","errors","user","role","validateForm","data","start","end","paginate","source","attentionsReport","sumTotal","count","newServices","attentions","map","service","console","log","onOpenModalHistory","onCloseModalHistory","getStatus","item","statusSend","className","date","format","downloadAttention","newAttentions","currentAttention","_id","downloading","id","onDownloadAttention","status","toast","info","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","window","open","config","urlPdf","error","catch","e","maxWidth","encType","preventDefault","container","xs","sm","utils","DateFnsUtils","disableFuture","label","onChange","KeyboardButtonProps","select","style","variant","helperText","event","filters","target","encargado","listCenterOfAttention","centersOfAttention","option","key","name","title","stickyHeader","aria-label","align","hover","attentionType","description","iconWidth","descriptions","length","placement","onClick","size","displayType","thousandSeparator","prefix","printReportAttention","pdfData","colSpan","rowsPerPageOptions","component","onChangePage","newPage","onChangeRowsPerPage","onClose","aria-labelledby","src","alignItems","fontSize","getIcon","primary","autoFocus"],"mappings":"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","file":"static/js/23.874d8e2b.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport moment from 'moment';\r\nimport Moment from 'react-moment';\r\nimport NumberFormat from 'react-number-format';\r\nimport config from '../../config'\r\nimport axios from 'axios'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { getAttentionsTypes, listCustomers, listCenterOfAttention, attentionsReport, onDownloadAttention, printReportAttention } from '../../api/api';\r\nimport jwtDecode from 'jwt-decode';\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { BsClockHistory } from 'react-icons/bs';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { FaPrint } from \"react-icons/fa\";\r\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from \"react-icons/ai\";\r\nimport { RiSendPlaneLine } from \"react-icons/ri\";\r\nimport { MdOutlineScheduleSend } from \"react-icons/md\";\r\nimport { AiOutlineCloudDownload } from \"react-icons/ai\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        height: 250,\r\n        minWidth: 290\r\n    },\r\n    input: {\r\n        display: \"flex\",\r\n        padding: 0,\r\n        height: \"auto\"\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        marginTop: 10,\r\n        margin: 5\r\n    },\r\n    button:\r\n    {\r\n        margin: theme.spacing(1),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    icon: {\r\n        width: 24,\r\n        height: 24\r\n    }\r\n}))\r\n\r\nconst ReportAttentions = props => {\r\n\r\n    moment().locale('es')\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [totalFields, setTotalFields] = useState(0)\r\n\r\n    const classes = useStyles()\r\n    const [startDate, setStartDate] = useState(new Date())\r\n    const [endDate, setEndDate] = useState(new Date())\r\n    const [pdf, setPdf] = useState(false)\r\n    const [dataPdf, setDataPdf] = useState('')\r\n\r\n    const [informations, setInformations] = useState([])\r\n    const [total, setTotal] = useState(0)\r\n    const [serviceType, setServiceType] = useState(\"1\")\r\n    const [serviceStatus, setServiceStatus] = useState('1')\r\n    const [serviceTypes, setServiceTypes] = useState([])\r\n    const [customers, setCustomers] = useState([])\r\n    const [customer, setCustomer] = useState(\"\")\r\n    const [centerOfAttentions, setCenterOfAttentions] = useState([])\r\n    const [centerOfAttention, setCenterOfAttention] = useState(\"\")\r\n    const [openHistory, setOpenHistory] = useState(false);\r\n    const [attention, setAttention] = useState(null);\r\n    const [errorCustomer, setErrorCustomer] = useState(false);\r\n    const [errorTextCustomer, setErrorTextCustomer] = useState('');\r\n    const [errorCenterOfAttention, setErrorCenterOfAttention] = useState(false);\r\n    const [errorTextCenterOfAttention, setErrorTextCenterOfAttention] = useState('');\r\n    const [isPrinting, setIsPrinting] = useState(false);\r\n\r\n    const serviceStatuses = [{\r\n        id: \"1\",\r\n        text: \"Todas\"\r\n    }, {\r\n        id: \"accept\",\r\n        text: \"Aceptada\"\r\n    }, {\r\n        id: \"reject\",\r\n        text: \"Rechazada\"\r\n    }, {\r\n        id: \"resend\",\r\n        text: \"Reenviada\"\r\n    }]\r\n\r\n\r\n    function prepend(value, array) {\r\n        var newArray = array.slice();\r\n        newArray.unshift(value);\r\n        return newArray;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const user = jwtDecode(localStorage.getItem('token'))\r\n\r\n        getAttentionsTypes().then(response => {\r\n            let data = {\r\n                \"_id\": \"1\",\r\n                \"type\": \"Todas\",\r\n                \"status\": \"active\",\r\n                \"tag\": \"\"\r\n            }\r\n            let type = prepend(data, response.attentionsTypes)\r\n            setServiceTypes(type);\r\n        })\r\n\r\n        listCustomers({}).then(response => {\r\n            setCustomers(response.customers);\r\n        })\r\n\r\n    }, []);\r\n\r\n    const onChangeServiceType = event => {\r\n        setServiceType(event.target.value)\r\n    }\r\n    const onChangeCenterOfAttention = event => {\r\n        setCenterOfAttention(event.target.value)\r\n    }\r\n    const onChangeCustomer = event => {\r\n        const user = jwtDecode(localStorage.getItem('token'))\r\n\r\n        let filters = {}\r\n        if (user.role == \"5a046fe9627e3526802b3847\") {\r\n            filters.customer = \"\";\r\n        }\r\n        if (user.role == \"5a046fe9627e3526802b3848\") {\r\n            filters.customer = event.target.value;\r\n        }\r\n        if (user.role == \"627d968a96a6a6b76f30c7e9\") {\r\n            filters.encargado = true;\r\n            filters.user = user.id;\r\n        }\r\n\r\n        console.log(\"filters\", filters);\r\n\r\n        setCustomer(event.target.value)\r\n        listCenterOfAttention(filters).then(response => {\r\n            setCenterOfAttentions(response.centersOfAttention);\r\n        })\r\n    }\r\n    const onChangeServiceStatus = event => {\r\n        setServiceStatus(event.target.value)\r\n    }\r\n    const onChangeStartDate = date => {\r\n        setStartDate(date)\r\n    }\r\n    const onChangeEndDate = value => {\r\n        setEndDate(value)\r\n    }\r\n    const handleChangePage = (_, newPage) => {\r\n\r\n        let data = {\r\n            start: (newPage * rowsPerPage),\r\n            end: rowsPerPage,\r\n            paginate: true,\r\n            startDate,\r\n            endDate,\r\n            customer,\r\n            centerOfAttention,\r\n            serviceType,\r\n            serviceStatus,\r\n            source: 'web'\r\n        }\r\n\r\n        setPage(newPage);\r\n        attentionsReport(data).then(response => {\r\n            setInformations(response.attentions);\r\n            setTotalFields(response.count)\r\n        });\r\n    }\r\n    const handleChangeRowsPerPage = event => {\r\n\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n        let data = {\r\n            start: 0,\r\n            end: event.target.value,\r\n            paginate: true,\r\n            startDate,\r\n            endDate,\r\n            customer,\r\n            centerOfAttention,\r\n            serviceType,\r\n            serviceStatus,\r\n            source: 'web'\r\n        }\r\n        attentionsReport(data).then(response => {\r\n            setInformations(response.attentions);\r\n            setTotalFields(response.count)\r\n        });\r\n    }\r\n    const validateForm = () => {\r\n\r\n        let errors = 0\r\n        const user = jwtDecode(localStorage.getItem('token'))\r\n\r\n\r\n        if (user.role !== \"5a046fe9627e3526802b3847\")\r\n            errors += validateCustomer()\r\n\r\n\r\n        if (user.role == \"627d968a96a6a6b76f30c7e9\") {\r\n            errors += validateCenterOfAttention()\r\n        }\r\n\r\n        return errors\r\n    }\r\n    const validateCustomer = (value) => {\r\n        let text = value !== undefined ? value : customer\r\n\r\n        if (text == null || text.toString().trim() === '') {\r\n            setErrorCustomer(true)\r\n            setErrorTextCustomer('Este campo es requerido')\r\n            return 1\r\n        }\r\n        else {\r\n            setErrorCustomer(false)\r\n            setErrorTextCustomer('')\r\n            return 0\r\n        }\r\n    }\r\n    const validateCenterOfAttention = (value) => {\r\n        let text = value !== undefined ? value : centerOfAttention\r\n\r\n        if (text == null || text.toString().trim() === '') {\r\n            setErrorCenterOfAttention(true)\r\n            setErrorTextCenterOfAttention('Este campo es requerido')\r\n            return 1\r\n        }\r\n        else {\r\n            setErrorCenterOfAttention(false)\r\n            setErrorTextCenterOfAttention('')\r\n            return 0\r\n        }\r\n    }\r\n    const onPrint = () => {\r\n\r\n        setIsPrinting(true);\r\n        let data = {\r\n            start: 0,\r\n            end: rowsPerPage,\r\n            paginate: true,\r\n            startDate,\r\n            endDate,\r\n            customer,\r\n            centerOfAttention,\r\n            serviceType,\r\n            serviceStatus,\r\n            source: 'web'\r\n        }\r\n        printReportAttention(data).then(response => {\r\n            setIsPrinting(false);\r\n            if (response.status === \"success\") {\r\n                let pdfData = 'data:application/pdf;base64,' + response.data\r\n                setDataPdf(pdfData)\r\n                setPdf(true)\r\n            }\r\n        }).catch(e => {\r\n            console.log(e)\r\n            setIsPrinting(false);\r\n        })\r\n    }\r\n    const onClosePdf = () => {\r\n        setPdf(false)\r\n    }\r\n    const onSubmit = _ => {\r\n\r\n        let errores = validateForm()\r\n        if (errores === 0) {\r\n\r\n\r\n            let data = {\r\n                start: 0,\r\n                end: rowsPerPage,\r\n                paginate: true,\r\n                startDate,\r\n                endDate,\r\n                customer,\r\n                centerOfAttention,\r\n                serviceType,\r\n                serviceStatus,\r\n                source: 'web'\r\n            }\r\n            attentionsReport(data).then(response => {\r\n                let sumTotal = 0\r\n                setTotalFields(response.count)\r\n                const newServices = response.attentions.map((service, _) => {\r\n                    console.log(\"service \", service.total);\r\n                    if (service.total)\r\n                        sumTotal += service.total\r\n\r\n                    return service\r\n                })\r\n                setInformations(newServices)\r\n                setTotal(sumTotal)\r\n            })\r\n        }\r\n    }\r\n    const onOpenModalHistory = attention => () => {\r\n        setOpenHistory(true);\r\n        setAttention(attention);\r\n    }\r\n    const onCloseModalHistory = () => {\r\n        setOpenHistory(false);\r\n    }\r\n    const getStatus = item => {\r\n        switch (item.statusSend) {\r\n            case \"send\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Enviado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n\r\n            case \"resend\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Reenviado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n            case \"reject\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Rechazado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n            case \"accept\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Aceptado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n\r\n\r\n        }\r\n    }\r\n    const getIcon = statusSend => {\r\n        switch (statusSend) {\r\n            case \"reject\":\r\n                return <AiOutlineCloseCircle style={{ fontSize: 32, color: \"red\" }} />\r\n\r\n            case \"send\":\r\n                return <RiSendPlaneLine style={{ fontSize: 32, color: \"red\" }} />\r\n\r\n            case \"accept\":\r\n                return <AiOutlineCheckCircle style={{ fontSize: 32, color: \"green\" }} />\r\n\r\n\r\n            case \"resend\":\r\n                return <MdOutlineScheduleSend style={{ fontSize: 32, color: \"silver\" }} />\r\n\r\n        }\r\n\r\n    }\r\n    const downloadAttention = attention => () => {\r\n        const newAttentions = informations.map(currentAttention => {\r\n            if (currentAttention._id === attention._id) {\r\n                currentAttention.downloading = true;\r\n            }\r\n            return currentAttention;\r\n        });\r\n        setInformations(newAttentions)\r\n\r\n        let data = { id: attention._id }\r\n        onDownloadAttention(data).then(response => {\r\n\r\n            const newAttentions = informations.map(currentAttention => {\r\n                if (currentAttention._id === attention._id) {\r\n                    currentAttention.downloading = false;\r\n                }\r\n                return currentAttention;\r\n            });\r\n            setInformations(newAttentions)\r\n\r\n            console.log(response)\r\n            if (response.status === 'success') {\r\n\r\n                toast.info(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                setInformations(newAttentions)\r\n                window.open(`${config.urlPdf}${attention._id}.pdf`)\r\n            } else {\r\n                toast.error(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            toast.error(\"Occurrió un error al descargar la atención\", {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        });\r\n\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer />\r\n\r\n            <Container maxWidth=\"lg\">\r\n                <Paper className={classes.paper}>\r\n                    <form encType={'multipart/form-data'}\r\n                        onSubmit={e => {\r\n                            e.preventDefault()\r\n                            onSubmit()\r\n                        }} >\r\n                        <Grid container >\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <Typography><b>Reporte de atenciones</b></Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={3}>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        disableFuture\r\n                                        format=\"yyyy-MM-dd\"\r\n                                        margin=\"dense\"\r\n                                        id=\"date-picker-inline\"\r\n                                        label=\"Fecha inicial\"\r\n                                        value={startDate}\r\n                                        onChange={onChangeStartDate}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        format=\"yyyy-MM-dd\"\r\n                                        margin=\"dense\"\r\n                                        id=\"date-picker-inline\"\r\n                                        label=\"Fecha final\"\r\n                                        value={endDate}\r\n                                        onChange={onChangeEndDate}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Cliente\"\r\n                                    error={errorCustomer}\r\n                                    helperText={errorTextCustomer}\r\n                                    value={customer}\r\n                                    onChange={onChangeCustomer}>\r\n                                    {\r\n                                        customers.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.name}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Centro de atención\"\r\n                                    error={errorCenterOfAttention}\r\n                                    helperText={errorTextCenterOfAttention}\r\n                                    value={centerOfAttention}\r\n                                    onChange={onChangeCenterOfAttention}>\r\n                                    {\r\n                                        centerOfAttentions.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.title}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Tipo de atención\"\r\n                                    value={serviceType}\r\n                                    onChange={onChangeServiceType}>\r\n                                    {\r\n\r\n                                        serviceTypes.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.type}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n\r\n                            <Grid item xs={2} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Estado de la atención\"\r\n                                    value={serviceStatus}\r\n                                    onChange={onChangeServiceStatus}>\r\n                                    {\r\n                                        serviceStatuses.map(option => (\r\n                                            <MenuItem key={option.id} value={option.id} >\r\n                                                {option.text}\r\n                                            </MenuItem>))\r\n\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2} sm={12}>\r\n                                <Button type=\"submit\" variant=\"contained\" color='primary' style={{ marginTop: 20 }}>Consultar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Paper>\r\n\r\n            </Container>\r\n            <Paper className={classes.paper}>\r\n                <TableContainer className={classes.container} style={{ width: \"100%\" }}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Fecha</TableCell>\r\n                                <TableCell>Tipo</TableCell>\r\n                                <TableCell>Cliente</TableCell>\r\n                                <TableCell>Nombre</TableCell>\r\n                                <TableCell>Descripción</TableCell>\r\n                                <TableCell>Centro de atención</TableCell>\r\n                                <TableCell width={30}>Historial</TableCell>\r\n                                <TableCell width={30}>Descargar</TableCell>\r\n                                <TableCell width={30} align=\"right\">Total</TableCell>\r\n\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                informations.map(service => {\r\n                                    return (\r\n                                        <TableRow hover key={service._id}>\r\n                                            <TableCell><Moment format=\"ll\">{new Date(service.date)}</Moment></TableCell>\r\n                                            <TableCell>{service.attentionType.type}</TableCell>\r\n                                            <TableCell>{service.customer.name}</TableCell>\r\n                                            <TableCell>{service.title}</TableCell>\r\n                                            <TableCell>{service.description}</TableCell>\r\n                                            <TableCell>{service.centerOfAttention ? service.centerOfAttention.title : \"\"}</TableCell>\r\n                                            <TableCell className={classes.iconWidth}>\r\n                                                {\r\n                                                    service.descriptions.length > 0 ? <Tooltip title=\"Hisotoria\" placement=\"top\">\r\n                                                        <div>\r\n                                                            <BsClockHistory className={\"icon\"} onClick={onOpenModalHistory(service)} />\r\n                                                        </div>\r\n                                                    </Tooltip> : \"\"\r\n                                                }\r\n                                            </TableCell>\r\n                                            <TableCell className={classes.iconWidth}>\r\n                                                <Tooltip title=\"Descargar\" placement=\"top\">\r\n                                                    {\r\n                                                        service.downloading ?\r\n                                                            <div className='circularProgress'>\r\n                                                                <CircularProgress size={16} />\r\n                                                            </div> :\r\n                                                            <div>\r\n                                                                <AiOutlineCloudDownload className={\"icon\"} onClick={downloadAttention(service)} />\r\n                                                            </div>\r\n                                                    }\r\n\r\n\r\n                                                </Tooltip>\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\"><NumberFormat value={service.total} displayType={'text'} thousandSeparator={true} prefix={'$'} /></TableCell>\r\n\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                        </TableBody>\r\n                        {\r\n                            informations.length > 0\r\n                                ? <TableFooter>\r\n                                    <TableRow hover>\r\n                                        <TableCell>\r\n                                            {\r\n                                                !isPrinting ?\r\n                                                    <FaPrint className={classes.icon} onClick={onPrint} />\r\n                                                    : <CircularProgress size={16} />\r\n                                            }\r\n                                        </TableCell>\r\n                                        <TableCell colSpan={8} align=\"right\">\r\n                                            <Typography variant=\"h3\">\r\n                                                <NumberFormat value={total} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableFooter>\r\n                                : \"\"\r\n                        }\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={totalFields}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n\r\n\r\n            <Dialog\r\n                maxWidth=\"lg\"\r\n                open={pdf}\r\n                onClose={onClosePdf}\r\n                aria-labelledby=\"draggable-dialog-title\">\r\n                <DialogTitle id=\"draggable-dialog-title\">Reporte de servicios</DialogTitle>\r\n                <DialogContent>\r\n                    <iframe src={dataPdf} title=\"Imprimir\" height=\"900px\" width=\"600px\" ></iframe>\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={onClosePdf} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={openHistory}\r\n                onClose={onCloseModalHistory}>\r\n                <DialogTitle >\r\n                    Historia\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <List className={classes.root}>\r\n                            {\r\n                                attention ?\r\n                                    attention.descriptions.map(item => {\r\n                                        return (\r\n                                            <ListItem alignItems=\"flex-start\">\r\n                                                <ListItemIcon>\r\n                                                    {getIcon(item.statusSend)}\r\n                                                </ListItemIcon>\r\n                                                <ListItemText\r\n                                                    primary={getStatus(item)}\r\n                                                    secondary={item.description}\r\n                                                />\r\n                                            </ListItem>\r\n\r\n                                        );\r\n                                    })\r\n                                    : \"\"\r\n                            }\r\n                        </List>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseModalHistory} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default ReportAttentions "],"sourceRoot":""}