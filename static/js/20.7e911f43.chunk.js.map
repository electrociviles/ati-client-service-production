{"version":3,"sources":["views/Map/ZoneCreate.js","mutations/Zone/zone.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","color","palette","text","secondary","button","margin","input","display","fab","marginTop","float","extendedIcon","marginRight","formControl","ZoneCreate","props","useMutation","Create_Zone","createZone","classes","useState","zoneName","setZoneName","coordinates","setCoordinates","errorZoneName","setErrorZoneName","errorTextZoneName","setErrorTextZoneName","latitude","longitude","zoom","viewport","setViewport","onChangePolygon","features","console","log","geometry","validateZoneName","value","undefined","container","item","xs","className","onSubmit","e","preventDefault","errores","length","toast","_coordinates","map","coordinate","push","lat","lng","variables","zone","name","zone_path","then","response","data","status","Swal","fire","icon","title","showConfirmButton","timer","setTimeout","message","onCreateZone","fullWidth","error","helperText","id","clsx","textField","variant","autoComplete","label","onChange","event","target","cardinate","index","key","type","style","width","height","mapStyle","accessToken","onViewportChange","onDrawCreate","onDrawUpdate","gql","Update_Zone"],"mappings":"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","file":"static/js/20.7e911f43.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect, useRef } from 'react'\nimport { useMutation } from \"@apollo/react-hooks\"\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { Create_Zone } from '../../mutations/Zone/zone'\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Swal from 'sweetalert2'\n\n\nimport MapGL, { Marker, Source, Layer } from '@urbica/react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\nimport Draw from '@urbica/react-map-gl-draw';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    input: {\n        display: 'none',\n    },\n    fab: {\n        marginTop: -2,\n        float: \"right\"\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(1),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n    },\n\n}));\nconst ZoneCreate = props => {\n\n    const [createZone] = useMutation(Create_Zone)\n    const classes = useStyles()\n    const [zoneName, setZoneName] = useState('')\n    const [coordinates, setCoordinates] = useState([])\n\n    const [errorZoneName, setErrorZoneName] = useState(false)\n    const [errorTextZoneName, setErrorTextZoneName] = useState('')\n\n\n    const [viewport, setViewport] = useState({\n        latitude: 6.212822577337221,\n        longitude: -75.58871396996295,\n        zoom: 12\n    })\n    const onChangePolygon = features => {\n        console.log('features', features)\n        setCoordinates(features[0].geometry.coordinates[0])\n    }\n\n\n    const onChangeZoneName = event => {\n        setZoneName(event.target.value)\n        validateZoneName(event.target.value)\n    }\n    const setCardinate = coordinates => {\n        setCoordinates(coordinates)\n    }\n    const validateZoneName = (value) => {\n        let text = value !== undefined ? value : zoneName\n        if (text === '') {\n            setErrorZoneName(true)\n            setErrorTextZoneName('Este campo es obligatorio')\n            return 1\n        }\n        else {\n            setErrorZoneName(false)\n            setErrorTextZoneName('')\n            return 0\n        }\n    }\n    const onCreateZone = e => {\n        let errores = 0\n        errores += validateZoneName()\n\n        if (coordinates.length === 0) {\n            toast('Debe registrar un polígono')\n        }\n        if (errores === 0) {\n\n            let _coordinates = []\n            coordinates.map(coordinate => {\n                _coordinates.push({\n                    lat: coordinate[1],\n                    lng: coordinate[0]\n                })\n            })\n            createZone({\n                variables: { zone: { name: zoneName, zone_path: _coordinates } }\n            }).then(response => {\n                if (response.data.createZone.status) {\n                    setCoordinates([])\n                    setZoneName('')\n                    Swal.fire({\n                        icon: 'success',\n                        title: 'Mensaje',\n                        text: 'Operación realizada exitosamente',\n                        showConfirmButton: false,\n                        timer: 3000\n                    })\n\n                    setTimeout(() => {\n                        // props.history.push('/work/search')\n                    }, 4000)\n                } else {\n                    Swal.fire({\n                        icon: 'error',\n                        title: 'Error',\n                        text: response.data.createZone.message,\n                        showConfirmButton: false,\n                        timer: 3000\n                    })\n                }\n\n            })\n        }\n    }\n\n    return (\n        <Fragment>\n\n            <Grid container>\n                <Grid item xs={5}>\n                    <Paper className={classes.paper}>\n                        <form onSubmit={e => {\n                            e.preventDefault()\n                            onCreateZone()\n                        }}>\n                            <Grid container spacing={1}>\n                                <Grid item xs={12}>\n                                    <TextField fullWidth\n                                        error={errorZoneName}\n                                        helperText={errorTextZoneName}\n                                        id=\"outlined-simple-start-adornment\"\n                                        className={clsx(classes.margin, classes.textField)}\n                                        variant=\"outlined\"\n                                        autoComplete='off'\n                                        label=\"Nombre de la zona\"\n                                        value={zoneName}\n                                        onChange={onChangeZoneName} />\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <Table>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>Latitud</TableCell>\n                                                <TableCell>Longitud</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {\n                                                coordinates.map((cardinate, index) => (\n                                                    <TableRow key={index}>\n                                                        <TableCell>{cardinate[1]}</TableCell>\n                                                        <TableCell>{cardinate[0]}</TableCell>\n                                                    </TableRow>))\n                                            }\n                                        </TableBody>\n                                    </Table>\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <Button variant=\"contained\" type=\"submit\" color='primary'>Crear zona</Button>\n                                </Grid>\n                            </Grid>\n                        </form>\n\n\n                    </Paper>\n                </Grid>\n                <Grid item xs={7}>\n                    <Paper className={classes.paper}>\n                        <MapGL\n                            style={{ width: '100%', height: '85vh' }}\n                            mapStyle='mapbox://styles/mapbox/streets-v11'\n                            accessToken='pk.eyJ1IjoibnRvcnJlczE5ODYiLCJhIjoiY2tiYnFlMjV1MDNzbDMxcnV0cGp6d2EycSJ9.TMjPubTz_kdfNPW9IpzGow'\n                            latitude={viewport.latitude}\n                            longitude={viewport.longitude}\n                            zoom={viewport.zoom}\n                            onViewportChange={setViewport}>\n\n                            <Draw\n                                onDrawCreate={({ features }) => onChangePolygon(features)}\n                                onDrawUpdate={({ features }) => onChangePolygon(features)}\n                            />\n                        </MapGL>\n\n\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Fragment>\n    );\n};\n\nexport default ZoneCreate;\n","import gql from 'graphql-tag'\n\nexport const Create_Zone = gql`\n  mutation createZone($zone: ZoneInput) \n  {\n    createZone(zone: $zone)\n    {\n        status\n        message\n    }\n  }\n`\nexport const Update_Zone = gql`\n  mutation updateZone($zone: ZoneInput) \n  {\n    updateZone(zone: $zone)\n    {\n        status\n        message\n    }\n  }\n`"],"sourceRoot":""}