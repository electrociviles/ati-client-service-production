{"version":3,"sources":["views/CenterOfAttention/CenterOfAttentionForm.js","views/CenterOfAttention/CenterOfAttention.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","height","minWidth","input","display","padding","valueContainer","flexWrap","flex","alignItems","overflow","chip","margin","spacing","chipFocused","backgroundColor","emphasize","palette","type","grey","noOptionsMessage","singleValue","fontSize","placeholder","position","left","bottom","divider","paper","color","text","secondary","button","fab","marginTop","float","extendedIcon","marginRight","formControl","CenterOfAttentionForm","props","useEffect","console","log","listCustomers","then","response","setCustomers","customers","centerOfAttention","setCustomer","customer","setName","title","setDescription","description","useState","disabled","classes","name","username","password","maintenanceCost","setMaintenanceCost","errorName","setErrorName","errorTextName","setErrorTextName","errorDescription","setErrorDescription","errorTextDescription","setErrorTextDescription","errorMaintenanceCost","setErrorMaintenanceCost","setErrorTextMaintenanceCost","Date","expirationDateMaintenance","setExpirationDateMaintenance","validateDescription","value","undefined","toString","trim","validateName","validateMaintenanceCost","onSubmit","errors","validateForm","data","_id","parseFloat","id","updateCenterOfAttention","status","Swal","fire","icon","showConfirmButton","timer","onClose","passCenterOfAttentionEdit","createCenterOfAttention","onCloseModal","passCreateCenterOfAttention","toast","error","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","Container","maxWidth","Paper","className","encType","e","preventDefault","Grid","container","item","xs","sm","Autocomplete","fullWidth","size","getOptionLabel","option","toUpperCase","filterOptions","x","options","autoComplete","getOptionSelected","onChange","_","onInputChange","newInputValue","length","search","renderInput","params","TextField","label","variant","renderTags","tagValue","getTagProps","map","index","Chip","indexOf","renderOption","Typography","helperText","clsx","textField","target","utils","DateFnsUtils","style","width","format","date","KeyboardButtonProps","Button","iconWidth","Transition","React","forwardRef","ref","Slide","direction","CenterOfAttention","centersOfAttention","setCentersOfAttention","totalCentersOfAttention","setTotalCentersOfAttention","rowsPerPage","setRowsPerPage","page","setPage","open","setOpen","openRestoreRole","setOpenRestoreCenterOfAttention","openEditRole","setOpenEditRole","openCreateCenterOfAttention","setOpenCreateCenterOfAttention","setCenterOfAttention","openUsers","setOpenUsers","start","end","listCenterOfAttention","count","onOpenDeleteCenterOfAttention","onOpenRestoreCenterOfAttention","role","onCloseDisableCenterOfAttention","onCloseEditCenterOfAttention","onCloseRestoreRole","onCloseCreateCenterOfAttention","onCloseModalUsers","onOpenModalUsers","onClick","Table","TableHead","TableRow","TableCell","align","colSpan","TableBody","key","displayType","thousandSeparator","prefix","administrative","Tooltip","placement","TablePagination","rowsPerPageOptions","component","onChangePage","newPage","onChangeRowsPerPage","event","Dialog","aria-labelledby","DialogTitle","cursor","DialogContent","DialogContentText","DialogActions","autoFocus","deleteCenterOfAttention","newCentersOfAttention","currentCenterOfAttention","restoreCenterOfAttention","currentRoles","TransitionComponent","centerOfAttentions","List","users","user","ListItem","ListItemIcon","ListItemText","primary"],"mappings":"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","file":"static/js/18.4d779e3c.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport { emphasize, makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport clsx from 'clsx';\r\nimport { Button } from '@material-ui/core';\r\nimport PropTypes from \"prop-types\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { updateCenterOfAttention, listCustomers, createCenterOfAttention } from '../../api/api';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Swal from 'sweetalert2';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n    minWidth: 290\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    padding: 0,\r\n    height: \"auto\"\r\n  },\r\n  valueContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[300]\r\n        : theme.palette.grey[700],\r\n      0.08\r\n    )\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  singleValue: {\r\n    fontSize: 16\r\n  },\r\n  placeholder: {\r\n    position: \"absolute\",\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16\r\n  },\r\n\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    color: theme.palette.text.secondary,\r\n\r\n  },\r\n  button:\r\n  {\r\n    margin: theme.spacing(1),\r\n  },\r\n  fab:\r\n  {\r\n    marginTop: -2,\r\n    float: \"right\"\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\n\r\n\r\nconst CenterOfAttentionForm = props => {\r\n\r\n  useEffect(() => {\r\n    console.log('props', props)\r\n\r\n    listCustomers().then(response => {\r\n      setCustomers(response.customers);\r\n      if (props.centerOfAttention) {\r\n        setCustomer(props.centerOfAttention.customer);\r\n      }\r\n    });\r\n    if (props.centerOfAttention) {\r\n      setName(props.centerOfAttention.title);\r\n      setDescription(props.centerOfAttention.description);\r\n      setCustomer(props.centerOfAttention.customer);\r\n\r\n    }\r\n  }, [])\r\n\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n  const classes = useStyles()\r\n\r\n  const [customers, setCustomers] = useState([]);\r\n  const [customer, setCustomer] = useState();\r\n  const [description, setDescription] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [maintenanceCost, setMaintenanceCost] = useState('');\r\n\r\n  const [errorName, setErrorName] = useState(false)\r\n  const [errorTextName, setErrorTextName] = useState('')\r\n\r\n  const [errorDescription, setErrorDescription] = useState(false)\r\n  const [errorTextDescription, setErrorTextDescription] = useState('')\r\n\r\n  const [errorUsername, setErrorUsername] = useState(false)\r\n  const [errorTextUsername, setErrorTextUsername] = useState('')\r\n\r\n  const [errorPassword, setErrorPassword] = useState(false)\r\n  const [errorTextPassword, setErrorTextPassword] = useState('')\r\n\r\n  const [errorEmail, setErrorEmail] = useState(false)\r\n  const [errorTextEmail, setErrorTextEmail] = useState('')\r\n\r\n  const [errorMaintenanceCost, setErrorMaintenanceCost] = useState(false)\r\n  const [errorTextMaintenanceCost, setErrorTextMaintenanceCost] = useState('')\r\n\r\n  // '2014-08-18T21:11:54'\r\n  const [expirationDateMaintenance, setExpirationDateMaintenance] = useState(new Date());\r\n\r\n\r\n  const onChangeDescription = e => {\r\n    setDescription(e.target.value);\r\n    validateDescription(e.target.value);\r\n  }\r\n\r\n  const onChangeName = e => {\r\n    setName(e.target.value);\r\n    validateName(e.target.value);\r\n  }\r\n\r\n  const onChangeUsername = e => {\r\n    setUsername(e.target.value);\r\n    validateUsername(e.target.value);\r\n  }\r\n\r\n  const onChangePassword = e => {\r\n    setPassword(e.target.value);\r\n    validatePassword(e.target.value);\r\n  }\r\n\r\n  const onChangeEmail = e => {\r\n    setEmail(e.target.value);\r\n    validateEmail(e.target.value);\r\n  }\r\n\r\n  const onChangeMaintenanceCost = e => {\r\n    setMaintenanceCost(e.target.value);\r\n    validateMaintenanceCost(e.target.value);\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let errors = 0\r\n    errors += validateDescription()\r\n    errors += validateName()\r\n\r\n    return errors\r\n  }\r\n\r\n  const validateDescription = (value) => {\r\n    let text = value !== undefined ? value : description\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorDescription(true)\r\n      setErrorTextDescription('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorDescription(false)\r\n      setErrorTextDescription('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const validateName = (value) => {\r\n    let text = value !== undefined ? value : name\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorName(true)\r\n      setErrorTextName('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorName(false)\r\n      setErrorTextName('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const validateUsername = (value) => {\r\n    let text = value !== undefined ? value : username\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorUsername(true)\r\n      setErrorTextUsername('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorUsername(false)\r\n      setErrorTextUsername('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const validatePassword = (value) => {\r\n    let text = value !== undefined ? value : password\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorPassword(true)\r\n      setErrorTextPassword('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorPassword(false)\r\n      setErrorTextPassword('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const validateEmail = (value) => {\r\n    let text = value !== undefined ? value : email\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorEmail(true)\r\n      setErrorTextEmail('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorEmail(false)\r\n      setErrorTextEmail('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const validateMaintenanceCost = (value) => {\r\n    let text = value !== undefined ? value : maintenanceCost\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorMaintenanceCost(true)\r\n      setErrorTextMaintenanceCost('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorMaintenanceCost(false)\r\n      setErrorTextMaintenanceCost('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n\r\n  const handleDateChange = (date) => {\r\n    setExpirationDateMaintenance(date);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n\r\n    let errores = validateForm()\r\n\r\n    if (errores === 0) {\r\n\r\n      let data = {\r\n        name,\r\n        description,\r\n        username,\r\n        password,\r\n        expirationDateMaintenance,\r\n        'customer': customer._id,\r\n        maintenanceCost: parseFloat(maintenanceCost)\r\n      }\r\n\r\n      if (!props.centerOfAttention) {\r\n        createCenterOfAttention(data).then(response => {\r\n\r\n          if (response.status == 'success') {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: `El centro de atención ${name}  fue creado exitosamente`,\r\n              showConfirmButton: false,\r\n              timer: 1500\r\n            });\r\n            props.onCloseModal();\r\n            props.passCreateCenterOfAttention(response.centerOfAttention);\r\n          } else {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: `Ocurrió un error al crear el centro de atención ${name}`,\r\n              showConfirmButton: false,\r\n              timer: 1500\r\n            })\r\n          }\r\n\r\n        });\r\n\r\n      } else {\r\n\r\n        data.id = props.centerOfAttention._id;\r\n        updateCenterOfAttention(data).then(response => {\r\n          if (response.status == 'success') {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: `El centro de atención ${name}  fue actualizado exitosamente`,\r\n              showConfirmButton: false,\r\n              timer: 1500\r\n            });\r\n            props.onClose();\r\n            props.passCenterOfAttentionEdit(response.centerOfAttention);\r\n          } else {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: `Ocurrió un error al actualizar el centro de atención ${name}`,\r\n              showConfirmButton: false,\r\n              timer: 1500\r\n            })\r\n          }\r\n\r\n        });\r\n      }\r\n    } else {\r\n      toast.error('Faltan datos por llenar', {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <ToastContainer />\r\n      <Container maxWidth=\"md\">\r\n\r\n        <Paper className={classes.paper}>\r\n          <form encType={'multipart/form-data'}\r\n            onSubmit={e => {\r\n              e.preventDefault()\r\n              onSubmit()\r\n            }} >\r\n            <Grid container spacing={3}>\r\n\r\n              <Grid item xs={12} sm={12}>\r\n                <Autocomplete\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  getOptionLabel={\r\n                    (option) => {\r\n                      return `${option.name.toString().toUpperCase()} `\r\n                    }\r\n                  }\r\n                  filterOptions={(x) => x}\r\n                  options={customers}\r\n                  // value={customer}\r\n                  // defaultValue={customers.length > 0 ? customers[1] : null}\r\n\r\n                  autoComplete\r\n                  getOptionSelected={(option, value) => option === value}\r\n                  onChange={(_, value) => {\r\n                    setCustomer(value);\r\n                  }}\r\n                  onInputChange={(_, newInputValue) => {\r\n                    if (newInputValue.toString().trim().length > 0) {\r\n                      let data = {\r\n                        search: newInputValue.toString().trim()\r\n                      }\r\n                      listCustomers(data).then(response => {\r\n                        setCustomers(response.customers);\r\n                      })\r\n                    }\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"Cliente\" variant=\"outlined\" margin=\"dense\" />\r\n                  )}\r\n                  renderTags={(tagValue, getTagProps) =>\r\n                    tagValue.map((option, index) => (\r\n                      <Chip\r\n                        label={option.name}\r\n                        {...getTagProps({ index })}\r\n                        disabled={customers.indexOf(option) !== -1}\r\n                      />\r\n                    ))\r\n                  }\r\n                  renderOption={(option) => {\r\n\r\n                    return (\r\n                      <Grid container alignItems=\"center\">\r\n                        <Grid item xs>\r\n                          <Typography >{`${option.name.toString().toUpperCase()}`}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                    );\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  error={errorName}\r\n                  helperText={errorTextName}\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  label=\"Nombre del centro de atención\"\r\n                  value={name}\r\n                  onChange={onChangeName} />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  error={errorDescription}\r\n                  helperText={errorTextDescription}\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  label=\"Descripción del centro de atención\"\r\n                  value={description}\r\n                  onChange={onChangeDescription} />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    style={{ width: '100%' }}\r\n                    margin=\"normal\"\r\n                    label=\"Vencimiento mantenimiento\"\r\n                    format=\"MM/dd/yyyy\"\r\n                    value={expirationDateMaintenance}\r\n                    onChange={handleDateChange}\r\n                    KeyboardButtonProps={{\r\n                      'aria-label': 'change date',\r\n                    }}\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  error={errorMaintenanceCost}\r\n                  helperText={errorMaintenanceCost}\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  label=\"Costo del mantenimiento\"\r\n                  value={maintenanceCost}\r\n                  onChange={onChangeMaintenanceCost} />\r\n              </Grid>\r\n\r\n              <Grid item xs={2} sm={3}>\r\n                <Button disabled={disabled} type=\"submit\" variant=\"contained\" color='primary'>\r\n                  {props.centerOfAttention ? \"Actualizar\" : \"Guardar\"}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </Paper>\r\n\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default CenterOfAttentionForm","import React, { useState, Fragment, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport CenterOfAttentionForm from \"./CenterOfAttentionForm\";\r\nimport { FiUsers, FiUser } from \"react-icons/fi\";\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport { listCenterOfAttention, deleteCenterOfAttention, restoreCenterOfAttention } from '../../api/api';\r\n\r\nimport NumberFormat from 'react-number-format';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    iconWidth: {\r\n        width: 10\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        marginTop: 10,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    },\r\n    fab: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    icon: {\r\n        marginRight: theme.spacing(1),\r\n        color: 'black'\r\n    },\r\n}))\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n})\r\n\r\nconst CenterOfAttention = () => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const [centersOfAttention, setCentersOfAttention] = useState([])\r\n    const [totalCentersOfAttention, setTotalCentersOfAttention] = useState(0)\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [page, setPage] = useState(0);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [openRestoreRole, setOpenRestoreCenterOfAttention] = useState(false);\r\n    const [openEditRole, setOpenEditRole] = useState(false);\r\n    const [openCreateCenterOfAttention, setOpenCreateCenterOfAttention] = useState(false);\r\n    const [centerOfAttention, setCenterOfAttention] = useState(null)\r\n\r\n    const [openUsers, setOpenUsers] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        let data = { start: 0, end: rowsPerPage }\r\n        listCenterOfAttention(data).then(response => {\r\n            setCentersOfAttention(response.centersOfAttention);\r\n            setTotalCentersOfAttention(response.count);\r\n        });\r\n    }, []);\r\n\r\n    const onOpenDeleteCenterOfAttention = centerOfAttention => () => {\r\n        setCenterOfAttention(centerOfAttention)\r\n        setOpen(true);\r\n    }\r\n    const onOpenRestoreCenterOfAttention = role => () => {\r\n        setCenterOfAttention(role)\r\n        setOpenRestoreCenterOfAttention(true);\r\n    }\r\n    const onCloseDisableCenterOfAttention = () => {\r\n        setOpen(false);\r\n    }\r\n    const onDisableCenterOfAttention = () => {\r\n        setOpen(false);\r\n\r\n        deleteCenterOfAttention(centerOfAttention._id).then(response => {\r\n            if (response.status === 'success') {\r\n                const newCentersOfAttention = centersOfAttention.map((currentCenterOfAttention) => {\r\n                    if (centerOfAttention._id !== currentCenterOfAttention._id)\r\n                        return currentCenterOfAttention\r\n\r\n                    currentCenterOfAttention.status = 'inactive'\r\n                    return currentCenterOfAttention\r\n                });\r\n                setCentersOfAttention(newCentersOfAttention)\r\n            }\r\n        });\r\n    }\r\n    const onRestoreCenterOfAttention = () => {\r\n\r\n        setOpenRestoreCenterOfAttention(false)\r\n\r\n        restoreCenterOfAttention(centerOfAttention._id).then(response => {\r\n            if (response.status === 'success') {\r\n                const newCentersOfAttention = centersOfAttention.map((currentRoles, index) => {\r\n\r\n                    if (centerOfAttention._id !== currentRoles._id)\r\n                        return currentRoles\r\n\r\n                    currentRoles.status = 'active'\r\n                    return currentRoles\r\n                })\r\n                setCentersOfAttention(newCentersOfAttention)\r\n            }\r\n        });\r\n    }\r\n    const onEditCenterOfAttention = role => () => {\r\n        setCenterOfAttention(role)\r\n        setOpenEditRole(true)\r\n    };\r\n    const onCloseEditCenterOfAttention = () => {\r\n        setOpenEditRole(false)\r\n    };\r\n    const onCloseRestoreRole = () => {\r\n        setOpenRestoreCenterOfAttention(false)\r\n    };\r\n    const onCreateCenterOfAttention = () => {\r\n        setOpenCreateCenterOfAttention(true)\r\n    }\r\n    const onCloseCreateCenterOfAttention = () => {\r\n        setOpenCreateCenterOfAttention(false)\r\n    }\r\n    const passCreateCenterOfAttention = centerOfAttention => {\r\n        setCentersOfAttention(centerOfAttentions => [...centerOfAttentions, centerOfAttention]);\r\n        setOpenCreateCenterOfAttention(false);\r\n    }\r\n    const passCenterOfAttentionEdit = centerOfAttention => {\r\n        setOpenEditRole(false);\r\n        const newCentersOfAttention = centersOfAttention.map((currentCenterOfAttention) => {\r\n\r\n            if (centerOfAttention._id !== currentCenterOfAttention._id)\r\n                return currentCenterOfAttention\r\n\r\n            currentCenterOfAttention = centerOfAttention;\r\n            return currentCenterOfAttention\r\n        })\r\n        setCentersOfAttention(newCentersOfAttention)\r\n    }\r\n    const handleChangePage = (e, newPage) => {\r\n        setPage(newPage);\r\n        let data = { start: (newPage * rowsPerPage), end: rowsPerPage }\r\n        listCenterOfAttention(data).then(response => {\r\n            setCentersOfAttention(response.centersOfAttention);\r\n            setTotalCentersOfAttention(response.count);\r\n\r\n        });\r\n    }\r\n    const handleChangeRowsPerPage = event => {\r\n\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n        let data = { start: 0, end: event.target.value }\r\n        listCenterOfAttention(data).then(response => {\r\n            setCentersOfAttention(response.centersOfAttention);\r\n            setTotalCentersOfAttention(response.count);\r\n        });\r\n\r\n    }\r\n    const onCloseModal = () => {\r\n        setOpenCreateCenterOfAttention(false)\r\n    }\r\n    const onCloseModalUsers = () => {\r\n        setOpenUsers(false);\r\n    }\r\n    const onOpenModalUsers = centerOfAttention => () => {\r\n        setCenterOfAttention(centerOfAttention);\r\n        setOpenUsers(true);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Paper className={classes.paper}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onCreateCenterOfAttention}>Crear centro de atención</Button>\r\n\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Nombre</TableCell>\r\n                            <TableCell>Descripción</TableCell>\r\n                            <TableCell>Cliente</TableCell>\r\n                            <TableCell align='right'>Costo mantenimiento</TableCell>\r\n                            <TableCell colSpan={4}>Acciones</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            centersOfAttention.map(centerOfAttention => {\r\n                                return (\r\n                                    <TableRow key={centerOfAttention._id}>\r\n                                        <TableCell>{centerOfAttention.title} </TableCell>\r\n                                        <TableCell>{centerOfAttention.description} </TableCell>\r\n                                        <TableCell>{centerOfAttention.customer.name} </TableCell>\r\n                                        <TableCell align='right'>\r\n                                            <NumberFormat value={centerOfAttention.maintenanceCost} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n                                        </TableCell>\r\n\r\n                                        <TableCell className={classes.iconWidth}>\r\n                                            {\r\n                                                !centerOfAttention.administrative ?\r\n                                                    <Tooltip title=\"Editar\" placement=\"top\">\r\n                                                        <EditIcon className={classes.icon} onClick={onEditCenterOfAttention(centerOfAttention)} />\r\n                                                    </Tooltip>\r\n                                                    : \"\"\r\n                                            }\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.iconWidth}>\r\n                                            {\r\n                                                <Tooltip title=\"Eliminar\" placement=\"top\">\r\n                                                    {\r\n                                                        centerOfAttention.status === 'active' ?\r\n                                                            <DeleteIcon className={classes.icon} onClick={onOpenDeleteCenterOfAttention(centerOfAttention)} />\r\n                                                            :\r\n                                                            <RestoreIcon className={classes.icon} onClick={onOpenRestoreCenterOfAttention(centerOfAttention)} />\r\n                                                    }\r\n                                                </Tooltip>\r\n                                            }\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.iconWidth}>\r\n                                            <Tooltip title=\"Usuarios\" placement=\"top\">\r\n                                                <FiUsers className={\"icon\"} onClick={onOpenModalUsers(centerOfAttention)} />\r\n\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n\r\n                                    </TableRow>)\r\n                            }\r\n                            )}\r\n                    </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={totalCentersOfAttention}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={onCloseDisableCenterOfAttention}\r\n                aria-labelledby=\"draggable-dialog-title\">\r\n                <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n                    Alerta\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Esta seguro de desabilitar este centro de atención\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseDisableCenterOfAttention} color=\"primary\">\r\n                        NO\r\n                    </Button>\r\n                    <Button onClick={onDisableCenterOfAttention} color=\"primary\">\r\n                        SI\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={openRestoreRole}\r\n                onClose={onCloseRestoreRole}>\r\n                <DialogTitle style={{ cursor: 'move' }} >\r\n                    Alerta\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Esta seguro de reactivar a este centro de atención?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseRestoreRole} color=\"primary\">\r\n                        NO\r\n                    </Button>\r\n                    <Button onClick={onRestoreCenterOfAttention} color=\"primary\">\r\n                        SI\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog maxWidth=\"md\" open={openEditRole} onCloseEditCenterOfAttention={onCloseEditCenterOfAttention} TransitionComponent={Transition}>\r\n                <DialogContent>\r\n                    <CenterOfAttentionForm onClose={onCloseEditCenterOfAttention} centerOfAttention={centerOfAttention} passCenterOfAttentionEdit={passCenterOfAttentionEdit} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseEditCenterOfAttention} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog open={openCreateCenterOfAttention} onClose={onCloseCreateCenterOfAttention} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle>Crear centro de atención</DialogTitle>\r\n                <DialogContent>\r\n                    <CenterOfAttentionForm onCloseModal={onCloseModal} passCreateCenterOfAttention={passCreateCenterOfAttention} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onCloseCreateCenterOfAttention} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={openUsers}\r\n                onClose={onCloseModalUsers}>\r\n                <DialogTitle >\r\n                    Usuarios\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <List className={classes.root}>\r\n                            {\r\n                                centerOfAttention ?\r\n                                    centerOfAttention.users.map(user => {\r\n                                        return (\r\n                                            <ListItem alignItems=\"flex-start\">\r\n                                                <ListItemIcon>\r\n                                                    <FiUser style={{ fontSize: 32, color: \"grey\" }} />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText\r\n                                                    primary={user.name}\r\n                                                    secondary={user.role.name}\r\n                                                />\r\n                                            </ListItem>\r\n\r\n                                        );\r\n                                    })\r\n                                    : \"\"\r\n                            }\r\n                        </List>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseModalUsers} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CenterOfAttention"],"sourceRoot":""}