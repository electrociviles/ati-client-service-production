{"version":3,"sources":["queries/reports.query.js","views/Reports/ReportServices.js"],"names":["Reports_Services","gql","useStyles","makeStyles","theme","root","flexGrow","height","minWidth","input","display","padding","paper","spacing","color","palette","text","secondary","marginTop","margin","button","formControl","icon","width","ReportServices","props","moment","locale","useState","page","setPage","rowsPerPage","setRowsPerPage","totalFields","setTotalFields","classes","Date","startDate","setStartDate","endDate","setEndDate","pdf","setPdf","dataPdf","setDataPdf","informations","setInformations","total","setTotal","serviceType","setServiceType","serviceStatus","setServiceStatus","useLazyQuery","fetchPolicy","onCompleted","sumTotal","data","reportsServices","newServices","services","map","service","_","totalServices","packs_service","pack_service","quantity","pack","price","subTotal","onClosePdf","Container","maxWidth","Paper","className","encType","onSubmit","e","preventDefault","console","log","variables","start","end","status","type","onSubmitPerson","Grid","container","item","xs","sm","Typography","utils","DateFnsUtils","disableFuture","format","id","label","value","onChange","date","KeyboardButtonProps","TextField","select","style","variant","event","target","title","option","MenuItem","key","Button","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","hover","role","tabIndex","customer","names","typeService","technical","engineer","displayType","thousandSeparator","prefix","length","TableFooter","onClick","locales","currency","fractionDigits","number","Intl","NumberFormat","minimumFractionDigits","config","hostReport1","axios","post","shortid","then","response","pdfData","catch","error","colSpan","TablePagination","rowsPerPageOptions","component","count","onChangePage","newPage","onChangeRowsPerPage","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","src","DialogActions"],"mappings":"i9BAGO,IAAMA,E,MAAmBC,GAAH,K,kRCmCvBC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,EACVC,OAAQ,IACRC,SAAU,KAEdC,MAAO,CACHC,QAAS,OACTC,QAAS,EACTJ,OAAQ,QAEZK,MAAO,CACHD,QAASP,EAAMS,QAAQ,GACvBC,MAAOV,EAAMW,QAAQC,KAAKC,UAC1BC,UAAW,GACXC,OAAQ,GAEZC,OACA,CACID,OAAQf,EAAMS,QAAQ,IAE1BQ,YAAa,CACTF,OAAQf,EAAMS,QAAQ,IAE1BS,KAAM,CACFC,MAAO,GACPhB,OAAQ,QA6TDiB,UAzTQ,SAAAC,GAEnBC,MAASC,OAAO,MAEhB,IAJ4B,EAqBJC,mBAAS,GArBL,mBAqBrBC,EArBqB,KAqBfC,EArBe,OAsBUF,mBAAS,IAtBnB,mBAsBrBG,EAtBqB,KAsBRC,EAtBQ,OAuBUJ,mBAAS,GAvBnB,mBAuBrBK,EAvBqB,KAuBRC,EAvBQ,KAyBtBC,EAAUjC,IAzBY,EA0BM0B,mBAAS,IAAIQ,MA1BnB,mBA0BrBC,EA1BqB,KA0BVC,EA1BU,OA2BEV,mBAAS,IAAIQ,MA3Bf,mBA2BrBG,GA3BqB,KA2BZC,GA3BY,QA4BNZ,oBAAS,GA5BH,qBA4BrBa,GA5BqB,MA4BhBC,GA5BgB,SA6BEd,mBAAS,IA7BX,qBA6BrBe,GA7BqB,MA6BZC,GA7BY,SA+BYhB,mBAAS,IA/BrB,qBA+BrBiB,GA/BqB,MA+BPC,GA/BO,SAgCFlB,mBAAS,GAhCP,qBAgCrBmB,GAhCqB,MAgCdC,GAhCc,SAiCUpB,mBAAS,GAjCnB,qBAiCrBqB,GAjCqB,MAiCRC,GAjCQ,SAkCctB,mBAAS,IAlCvB,qBAkCrBuB,GAlCqB,MAkCNC,GAlCM,SAoCQC,YAAarD,EAAkB,CAC/DsD,YAAa,WACbC,YAAa,WACT,IAAIC,EAAW,EACftB,EAAeuB,GAAKC,gBAAgBzB,aACpC,IAAM0B,EAAcF,GAAKC,gBAAgBE,SAASC,KAAI,SAACC,EAASC,GAC5D,IAAIC,EAAgB,EAQpB,OANAF,EAAQG,cAAcJ,KAAI,SAACK,EAAcH,GACrCC,GAAiBE,EAAaC,SAAWD,EAAaE,KAAKC,SAE/Db,GAAYQ,EACZF,EAAQQ,SAAWN,EAEZF,KAEXhB,GAAgBa,GAChBX,GAASQ,MArDW,qBAoCrBE,GApCqB,MAoCFD,GApCE,MAoCFA,KA2FpBc,GAAa,WACf7B,IAAO,IAeX,OACI,kBAAC,WAAD,KACI,kBAAC8B,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAACC,EAAA,EAAD,CAAOC,UAAWxC,EAAQvB,OACtB,0BAAMgE,QAAS,sBACXC,SAAU,SAAAC,GACNA,EAAEC,iBAnBH,SAAAD,GAEnBE,QAAQC,IAAI,YAAa5C,GACzB2C,QAAQC,IAAI,UAAW1C,IAKnBmB,GAAgB,CAAEwB,UAAW,CAAEC,MAAOtD,EAAMuD,IAAKrD,EAAaM,UAAWA,EAAWE,QAASA,GAAS8C,OAAQlC,GAAemC,KAAMrC,MAYnHsC,KAEJ,kBAACC,EAAA,EAAD,CAAMC,WAAS,GAEX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACC,EAAA,EAAD,2BAEJ,kBAACL,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAAC,IAAD,CAAyBE,MAAOC,KAC5B,kBAAC,IAAD,CACIC,eAAa,EACbC,OAAO,aACP9E,OAAO,QACP+E,GAAG,qBACHC,MAAM,gBACNC,MAAO/D,EACPgE,SAvGV,SAAAC,GACtBhE,EAAagE,IAuGmBC,oBAAqB,CACjB,aAAc,mBAM9B,kBAACf,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAAC,IAAD,CAAyBE,MAAOC,KAC5B,kBAAC,IAAD,CACIE,OAAO,aACP9E,OAAO,QACP+E,GAAG,qBACHC,MAAM,cACNC,MAAO7D,GACP8D,SApHZ,SAAAD,GACpB5D,GAAW4D,IAoHqBG,oBAAqB,CACjB,aAAc,mBAM9B,kBAACf,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACY,EAAA,EAAD,CACIC,QAAM,EACNC,MAAO,CAAEnF,MAAO,KAChBoF,QAAQ,WACRxF,OAAO,QACPgF,MAAM,mBACNC,MAAOnD,GACPoD,SA7IJ,SAAAO,GACxB1D,GAAe0D,EAAMC,OAAOT,SAtDX,CAAC,CAClBF,GAAI,EACJY,MAAO,eAEX,CACIZ,GAAI,EACJY,MAAO,gBA8LsCjD,KAAI,SAAAkD,GAAM,OACnB,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAOb,GAAIE,MAAOW,EAAOb,IACnCa,EAAOD,YAO5B,kBAACtB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClB,kBAACY,EAAA,EAAD,CACIC,QAAM,EACNC,MAAO,CAAEnF,MAAO,KAChBoF,QAAQ,WACRxF,OAAO,QACPgF,MAAM,sBACNC,MAAOjD,GACPkD,SA7JF,SAAAO,GAC1BxD,GAAiBwD,EAAMC,OAAOT,SAjDT,CAAC,CACtBF,GAAI,WACJY,MAAO,eAEX,CACIZ,GAAI,UACJY,MAAO,eAyM0CjD,KAAI,SAAAkD,GAAM,OACvB,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAOb,GAAIE,MAAOW,EAAOb,IACnCa,EAAOD,YAO5B,kBAACtB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IAClB,kBAACsB,EAAA,EAAD,CAAQ5B,KAAK,SAASqB,QAAQ,YAAY7F,MAAM,UAAU4F,MAAO,CAAExF,UAAW,KAA9E,kBAOpB,kBAACwD,EAAA,EAAD,CAAOC,UAAWxC,EAAQvB,OACtB,kBAACuG,EAAA,EAAD,CAAgBxC,UAAWxC,EAAQsD,UAAWiB,MAAO,CAAEnF,MAAO,SAC1D,kBAAC6F,EAAA,EAAD,CAAOC,cAAY,EAACC,aAAW,gBAC3B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,yBACA,kBAACA,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,WAIR,kBAACC,EAAA,EAAD,KAEQ9E,GAAagB,KAAI,SAAAC,GACb,OACI,kBAAC0D,EAAA,EAAD,CAAUI,OAAK,EAACC,KAAK,WAAWC,UAAW,EAAGb,IAAKnD,EAAQoC,IACvD,kBAACuB,EAAA,EAAD,KAAW,kBAAC,IAAD,CAAQxB,OAAO,MAAM,IAAI7D,KAAK0B,EAAQwC,QACjD,kBAACmB,EAAA,EAAD,KAAY3D,EAAQiE,SAASC,OAC7B,kBAACP,EAAA,EAAD,KAAoC,IAAxB3D,EAAQmE,YAAoB,cAAgB,cACxD,kBAACR,EAAA,EAAD,KAAY3D,EAAQoE,UAAYpE,EAAQoE,UAAUF,MAAQ,IAC1D,kBAACP,EAAA,EAAD,KAAY3D,EAAQqE,SAAWrE,EAAQqE,SAASH,MAAQ,IACxD,kBAACP,EAAA,EAAD,CAAWC,MAAM,SAAQ,kBAAC,IAAD,CAActB,MAAOtC,EAAQQ,SAAU8D,YAAa,OAAQC,mBAAmB,EAAMC,OAAQ,YAOtIzF,GAAa0F,OAAS,EAChB,kBAACC,EAAA,EAAD,KACE,kBAAChB,EAAA,EAAD,CAAUI,OAAK,GACX,kBAACH,EAAA,EAAD,KACI,kBAAC,IAAD,CAAS9C,UAAWxC,EAAQb,KAAMmH,QAtL1D,WAEZ,IAkBwBC,EAASC,EAAUC,EAAgBC,EAlBvDpF,EAAO,CACPA,KAAMZ,GACNE,MAAO,EACPV,YACAE,YASJkB,EAAKV,OAKmB2F,EALI,QAKKC,EALI,MAKMC,EALC,EAKeC,EALZ9F,GAM3B,IAAI+F,KAAKC,aAAaL,EAAS,CAAEhC,MAAO,WAAYiC,SAAUA,EAAUK,sBAAuBJ,IAAkB3C,OAAO4C,IAG5I7D,QAAQC,IAAI,MAAZ,UAAsBgE,IAAOC,cAE7BC,IAAMC,KAAN,UAAcH,IAAOC,aAAe,CAChCG,QAAS,UACT5F,SACD6F,MAAK,SAAUC,GACdvE,QAAQC,IAAIsE,GACZ,IAAIC,EAAU,+BAAiCD,EAAS9F,KACxDb,GAAW4G,GACX9G,IAAO,MACR+G,OAAM,SAAUC,GACf1E,QAAQC,IAAI,QAASyE,UAqJO,kBAACjC,EAAA,EAAD,CAAWkC,QAAS,EAAGjC,MAAM,SACzB,kBAAC7B,EAAA,EAAD,CAAYc,QAAQ,MAChB,kBAAC,IAAD,CAAcP,MAAOrD,GAAOqF,YAAa,OAAQC,mBAAmB,EAAMC,OAAQ,UAKhG,OAIlB,kBAACsB,EAAA,EAAD,CACIC,mBAAoB,CAAC,GAAI,GAAI,KAC7BC,UAAU,MACVC,MAAO9H,EACPF,YAAaA,EACbF,KAAMA,EACNmI,aA5NK,SAACjG,EAAGkG,GACrBnI,EAAQmI,GAGRvG,GAAgB,CAAEwB,UAAW,CAAEC,MAAO8E,EAAS7E,IAAKrD,EAAaM,UAAWA,EAAWE,QAASA,GAAS8C,OAAQlC,GAAemC,KAAMrC,OAyN1HiH,oBAtNY,SAAAtD,GAExB5E,GAAgB4E,EAAMC,OAAOT,OAC7BtE,EAAQ,OAsNJ,kBAACqI,EAAA,EAAD,CACI1F,SAAS,KACT2F,KAAM3H,GACN4H,QAAS9F,GACT+F,kBAAgB,0BAChB,kBAACC,EAAA,EAAD,CAAarE,GAAG,0BAAhB,wBACA,kBAACsE,EAAA,EAAD,KACI,4BAAQC,IAAK9H,GAASmE,MAAM,WAAWvG,OAAO,QAAQgB,MAAM,WAEhE,kBAACmJ,EAAA,EAAD,KAEI,kBAACxD,EAAA,EAAD,CAAQuB,QAASlE,GAAYzD,MAAM,WAAnC","file":"static/js/21.2425da45.chunk.js","sourcesContent":["import gql from 'graphql-tag'\n\n\nexport const Reports_Services = gql`\n  query reportsServices($start: Int, $end: Int, $startDate: Date, $endDate: Date, $status: String, $type: Int) {\n    reportsServices(start: $start, end: $end, startDate: $startDate, endDate: $endDate, status: $status, type: $type) {\n        services {\n            id\n            latitude\n            longitude\n            date\n            typeService\n            packs_service {\n                quantity\n                pack {\n                price\n                }\n            }\n            customer {\n                names\n            }\n            technical {\n                names\n            }\n            engineer {\n                names\n            }\n        }\n        totalFields\n      }\n}`\n","import React, { Fragment, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport { Reports_Services } from '../../queries/reports.query'\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { Button, Typography } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport moment from 'moment';\nimport Moment from 'react-moment';\nimport NumberFormat from 'react-number-format';\nimport config from '../../config'\nimport axios from 'axios'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport clsx from 'clsx';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { FaPrint } from \"react-icons/fa\";\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        height: 250,\n        minWidth: 290\n    },\n    input: {\n        display: \"flex\",\n        padding: 0,\n        height: \"auto\"\n    },\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n        marginTop: 10,\n        margin: 5\n    },\n    button:\n    {\n        margin: theme.spacing(1),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n    },\n    icon: {\n        width: 24,\n        height: 24\n    }\n}))\n\nconst ReportServices = props => {\n\n    moment().locale('es')\n\n    const serviceTypes = [{\n        id: 1,\n        title: \"Residencial\"\n    },\n    {\n        id: 2,\n        title: \"Corporativa\"\n    }]\n    const servicesStatuses = [{\n        id: 'finished',\n        title: \"Finalizadas\"\n    },\n    {\n        id: 'created',\n        title: \"En proceso\"\n    }]\n\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [totalFields, setTotalFields] = useState(0)\n\n    const classes = useStyles()\n    const [startDate, setStartDate] = useState(new Date())\n    const [endDate, setEndDate] = useState(new Date())\n    const [pdf, setPdf] = useState(false)\n    const [dataPdf, setDataPdf] = useState('')\n\n    const [informations, setInformations] = useState([])\n    const [total, setTotal] = useState(0)\n    const [serviceType, setServiceType] = useState(1)\n    const [serviceStatus, setServiceStatus] = useState('')\n\n    const [reportsServices, { data }] = useLazyQuery(Reports_Services, {\n        fetchPolicy: 'no-cache',\n        onCompleted: () => {\n            let sumTotal = 0\n            setTotalFields(data.reportsServices.totalFields)\n            const newServices = data.reportsServices.services.map((service, _) => {\n                let totalServices = 0\n                // console.log('service', service)\n                service.packs_service.map((pack_service, _) => {\n                    totalServices += pack_service.quantity * pack_service.pack.price\n                })\n                sumTotal += totalServices\n                service.subTotal = totalServices\n\n                return service\n            })\n            setInformations(newServices)\n            setTotal(sumTotal)\n        }\n    })\n\n    const onChangeServiceType = event => {\n        setServiceType(event.target.value)\n    }\n    const onChangeServiceStatus = event => {\n        setServiceStatus(event.target.value)\n    }\n    const onChangeStartDate = date => {\n        setStartDate(date)\n    }\n    const onChangeEndDate = value => {\n        setEndDate(value)\n    }\n\n    const onChangePage = (_, newPage) => {\n        setPage(newPage)\n\n\n        reportsServices({ variables: { start: newPage, end: rowsPerPage, startDate: startDate, endDate: endDate, status: serviceStatus, type: serviceType } })\n    }\n\n    const onChangeRowsPerPage = event => {\n\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    }\n\n    const validateForm = () => {\n\n        let errors = 0\n\n        return errors\n    }\n    const onPrint = () => {\n\n        let data = {\n            data: informations,\n            total: 0,\n            startDate,\n            endDate\n        }\n        // informations.forEach(element => {\n        //     //   data.data.push({\n        //     //     \"date\": moment(new Date(element.date)).format(\"YYYY-MM-DD\") ,\n        //     //     \"description\": element.description,\n        //     //     \"value\": formatCurrency(\"es-CO\", \"COP\", 0, element.value) \n        //     //   })\n        // })\n        data.total = formatCurrency(\"es-CO\", \"COP\", 0, total)\n\n        // console.log(data)\n\n\n        function formatCurrency(locales, currency, fractionDigits, number) {\n            var formatted = new Intl.NumberFormat(locales, { style: 'currency', currency: currency, minimumFractionDigits: fractionDigits }).format(number);\n            return formatted;\n        }\n        console.log('url', `${config.hostReport1}`)\n\n        axios.post(`${config.hostReport1}`, {\n            shortid: 'WaIAVAU',\n            data\n        }).then(function (response) {\n            console.log(response);\n            let pdfData = 'data:application/pdf;base64,' + response.data\n            setDataPdf(pdfData)\n            setPdf(true)\n        }).catch(function (error) {\n            console.log(\"error\", error);\n        })\n    }\n    const onClosePdf = () => {\n        setPdf(false)\n    }\n    const onSubmitPerson = e => {\n\n        console.log('startDate', startDate)\n        console.log('endDate', endDate)\n        let errores = validateForm()\n        if (errores === 0) {\n            // console.log('start', startDate)\n            // console.log('end', endDate)\n            reportsServices({ variables: { start: page, end: rowsPerPage, startDate: startDate, endDate: endDate, status: serviceStatus, type: serviceType } })\n\n        }\n    }\n\n    return (\n        <Fragment>\n            <Container maxWidth=\"lg\">\n                <Paper className={classes.paper}>\n                    <form encType={'multipart/form-data'}\n                        onSubmit={e => {\n                            e.preventDefault()\n                            onSubmitPerson()\n                        }} >\n                        <Grid container >\n\n                            <Grid item xs={12} sm={12}>\n                                <Typography>Reporte de gastos</Typography>\n                            </Grid>\n                            <Grid item xs={12} sm={3}>\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                    <KeyboardDatePicker\n                                        disableFuture\n                                        format=\"yyyy-MM-dd\"\n                                        margin=\"dense\"\n                                        id=\"date-picker-inline\"\n                                        label=\"Fecha inicial\"\n                                        value={startDate}\n                                        onChange={onChangeStartDate}\n                                        KeyboardButtonProps={{\n                                            'aria-label': 'change date',\n                                        }}\n                                    />\n                                </MuiPickersUtilsProvider>\n                            </Grid>\n\n                            <Grid item xs={12} sm={3}>\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                    <KeyboardDatePicker\n                                        format=\"yyyy-MM-dd\"\n                                        margin=\"dense\"\n                                        id=\"date-picker-inline\"\n                                        label=\"Fecha final\"\n                                        value={endDate}\n                                        onChange={onChangeEndDate}\n                                        KeyboardButtonProps={{\n                                            'aria-label': 'change date',\n                                        }}\n                                    />\n                                </MuiPickersUtilsProvider>\n                            </Grid>\n\n                            <Grid item xs={12} sm={3}>\n                                <TextField\n                                    select\n                                    style={{ width: 200 }}\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Tipo de servicio\"\n                                    value={serviceType}\n                                    onChange={onChangeServiceType}>\n                                    {\n                                        serviceTypes.map(option => (\n                                            <MenuItem key={option.id} value={option.id} >\n                                                {option.title}\n                                            </MenuItem>))\n                                    }\n                                </TextField>\n                            </Grid>\n\n\n                            <Grid item xs={2} sm={3}>\n                                <TextField\n                                    select\n                                    style={{ width: 200 }}\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Estado del servicio\"\n                                    value={serviceStatus}\n                                    onChange={onChangeServiceStatus}>\n                                    {\n                                        servicesStatuses.map(option => (\n                                            <MenuItem key={option.id} value={option.id} >\n                                                {option.title}\n                                            </MenuItem>))\n\n                                    }\n                                </TextField>\n                            </Grid>\n\n                            <Grid item xs={2} sm={12}>\n                                <Button type=\"submit\" variant=\"contained\" color='primary' style={{ marginTop: 20 }}>Consultar</Button>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Paper>\n\n            </Container>\n            <Paper className={classes.paper}>\n                <TableContainer className={classes.container} style={{ width: \"100%\" }}>\n                    <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Fecha</TableCell>\n                                <TableCell>Cliente</TableCell>\n                                <TableCell>Tipo de servicio</TableCell>\n                                <TableCell>Técnico</TableCell>\n                                <TableCell>Ingeniero</TableCell>\n                                <TableCell align=\"right\">Total</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                informations.map(service => {\n                                    return (\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={service.id}>\n                                            <TableCell><Moment format=\"ll\">{new Date(service.date)}</Moment></TableCell>\n                                            <TableCell>{service.customer.names}</TableCell>\n                                            <TableCell>{service.typeService === 1 ? \"Residencial\" : \"Crédito\"}</TableCell>\n                                            <TableCell>{service.technical ? service.technical.names : \"\"}</TableCell>\n                                            <TableCell>{service.engineer ? service.engineer.names : \"\"}</TableCell>\n                                            <TableCell align=\"right\"><NumberFormat value={service.subTotal} displayType={'text'} thousandSeparator={true} prefix={'$'} /></TableCell>\n\n                                        </TableRow>\n                                    );\n                                })}\n                        </TableBody>\n                        {\n                            informations.length > 0\n                                ? <TableFooter>\n                                    <TableRow hover>\n                                        <TableCell>\n                                            <FaPrint className={classes.icon} onClick={onPrint} />\n                                        </TableCell>\n                                        <TableCell colSpan={7} align=\"right\">\n                                            <Typography variant=\"h3\">\n                                                <NumberFormat value={total} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                            </Typography>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableFooter>\n                                : null\n                        }\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={totalFields}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={onChangePage}\n                    onChangeRowsPerPage={onChangeRowsPerPage}\n                />\n            </Paper>\n            <Dialog\n                maxWidth=\"lg\"\n                open={pdf}\n                onClose={onClosePdf}\n                aria-labelledby=\"draggable-dialog-title\">\n                <DialogTitle id=\"draggable-dialog-title\">Reporte de servicios</DialogTitle>\n                <DialogContent>\n                    <iframe src={dataPdf} title=\"Imprimir\" height=\"900px\" width=\"600px\" ></iframe>\n                </DialogContent>\n                <DialogActions>\n\n                    <Button onClick={onClosePdf} color=\"primary\">\n                        Cerrar\n                </Button>\n                </DialogActions>\n            </Dialog>\n        </Fragment>\n    )\n}\nexport default ReportServices "],"sourceRoot":""}