{"version":3,"sources":["views/Map/MapEdit.js","mutations/Zone/zone.js","queries/zone.query.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","color","palette","text","secondary","button","margin","input","display","fab","marginTop","float","extendedIcon","marginRight","formControl","MapEdit","props","console","log","dataZone","useQuery","Zone","variables","id","match","params","fetchPolicy","onCompleted","setZone","getZone","setPath","zone_path","setCoordinates","setZoneName","name","data","useMutation","Update_Zone","updateZone","classes","useState","zoneName","coordinates","errorZoneName","setErrorZoneName","errorTextZoneName","setErrorTextZoneName","validateZoneName","value","undefined","zone","polygonRef","useRef","listenersRef","onEdit","useCallback","current","nextPath","getPath","getArray","map","latLng","lat","lng","polygon","path","push","addListener","forEach","lis","remove","container","item","xs","className","onSubmit","e","preventDefault","errores","length","toast","then","response","status","Swal","fire","icon","title","showConfirmButton","timer","setTimeout","message","onUpdateZone","fullWidth","error","helperText","clsx","textField","variant","autoComplete","label","onChange","event","target","cardinate","index","key","type","Create_Zone","gql","Zones"],"mappings":"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","file":"static/js/19.bc5f409a.chunk.js","sourcesContent":["import React, { Fragment, useState, useRef, useCallback } from \"react\";\n// import { LoadScript, GoogleMap, Polygon } from \"@react-google-maps/api\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\"\nimport { Zone } from '../../queries/zone.query'\nimport \"./mapStyle.css\";\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { Update_Zone } from '../../mutations/Zone/zone'\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Swal from 'sweetalert2'\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    input: {\n        display: 'none',\n    },\n    fab: {\n        marginTop: -2,\n        float: \"right\"\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(1),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n    },\n\n}));\nconst MapEdit = props => {\n\n    console.log('props', props)\n    const { data: dataZone } = useQuery(Zone, {\n        variables: { id: props.match.params.id },\n        fetchPolicy: 'no-cache',\n        onCompleted: () => {\n            setZone(dataZone.getZone)\n            setPath(dataZone.getZone.zone_path)\n            setCoordinates(dataZone.getZone.zone_path)\n            setZoneName(dataZone.getZone.name)\n        }\n    })\n\n    const [updateZone] = useMutation(Update_Zone)\n    const classes = useStyles()\n    const [zoneName, setZoneName] = useState('')\n    const [coordinates, setCoordinates] = useState([])\n\n    const [errorZoneName, setErrorZoneName] = useState(false)\n    const [errorTextZoneName, setErrorTextZoneName] = useState('')\n\n    const onChangeZoneName = event => {\n        setZoneName(event.target.value)\n        validateZoneName(event.target.value)\n    }\n    const validateZoneName = (value) => {\n        let text = value !== undefined ? value : zoneName\n        if (text === '') {\n            setErrorZoneName(true)\n            setErrorTextZoneName('Este campo es obligatorio')\n            return 1\n        }\n        else {\n            setErrorZoneName(false)\n            setErrorTextZoneName('')\n            return 0\n        }\n    }\n    const onUpdateZone = e => {\n        let errores = 0\n        errores += validateZoneName()\n\n        if (coordinates.length === 0) {\n            toast('Debe registrar un polígono')\n        }\n        if (errores === 0) {\n\n\n            updateZone({\n                variables: { 'zone': { 'id': zone.id, 'name': zoneName, 'zone_path': coordinates } }\n            }).then(response => {\n                if (response.data.updateZone.status) {\n                    setCoordinates([])\n                    setZoneName('')\n                    Swal.fire({\n                        icon: 'success',\n                        title: 'Mensaje',\n                        text: 'Operación realizada exitosamente',\n                        showConfirmButton: false,\n                        timer: 3000\n                    })\n\n                    setTimeout(() => {\n                        // props.history.push('/work/search')\n                    }, 4000)\n                } else {\n                    Swal.fire({\n                        icon: 'error',\n                        title: 'Error',\n                        text: response.data.updateZone.message,\n                        showConfirmButton: false,\n                        timer: 3000\n                    })\n                }\n\n            })\n        }\n    }\n\n\n\n\n    const [path, setPath] = useState([]);\n    const [zone, setZone] = useState(null);\n\n    const polygonRef = useRef(null);\n    const listenersRef = useRef([]);\n\n    // Call setPath with new edited path\n    const onEdit = useCallback(() => {\n        if (polygonRef.current) {\n            const nextPath = polygonRef.current\n                .getPath()\n                .getArray()\n                .map(latLng => {\n                    return { lat: latLng.lat(), lng: latLng.lng() };\n                });\n            setPath(nextPath);\n            setCoordinates(nextPath)\n        }\n    }, []);\n\n    const onLoad = useCallback(\n        polygon => {\n            polygonRef.current = polygon;\n            const path = polygon.getPath();\n            listenersRef.current.push(\n                path.addListener(\"set_at\", onEdit),\n                path.addListener(\"insert_at\", onEdit),\n                path.addListener(\"remove_at\", onEdit)\n            );\n        },\n        [onEdit]\n    );\n\n    const onUnmount = useCallback(() => {\n        listenersRef.current.forEach(lis => lis.remove());\n        polygonRef.current = null;\n    }, []);\n\n\n    return (\n        <Fragment>\n\n            <Grid container>\n                <Grid item xs={5}>\n                    <Paper className={classes.paper}>\n                        <form onSubmit={e => {\n                            e.preventDefault()\n                            onUpdateZone()\n                        }}>\n                            <Grid container spacing={1}>\n                                <Grid item xs={12}>\n                                    <TextField fullWidth\n                                        error={errorZoneName}\n                                        helperText={errorTextZoneName}\n                                        id=\"outlined-simple-start-adornment\"\n                                        className={clsx(classes.margin, classes.textField)}\n                                        variant=\"outlined\"\n                                        autoComplete='off'\n                                        label=\"Nombre de la zona\"\n                                        value={zoneName}\n                                        onChange={onChangeZoneName} />\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <Table>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>Latitud</TableCell>\n                                                <TableCell>Longitud</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {\n                                                coordinates.map((cardinate, index) => (\n                                                    <TableRow key={index}>\n                                                        <TableCell>{cardinate.lat}</TableCell>\n                                                        <TableCell>{cardinate.lng}</TableCell>\n                                                    </TableRow>))\n                                            }\n                                        </TableBody>\n                                    </Table>\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <Button variant=\"contained\" type=\"submit\" color='primary'>Actualizar zona</Button>\n                                </Grid>\n                            </Grid>\n                        </form>\n\n\n                    </Paper>\n                </Grid>\n                <Grid item xs={7}>\n                    <div className=\"App\">\n                        {/* <GoogleMap\n                                mapContainerClassName=\"App-map\"\n                                center={{ lat: zone.zone_path[0].lat, lng: zone.zone_path[0].lng }}\n                                zoom={14}\n                                version=\"weekly\"\n                                on\n                            >\n                                <Polygon\n                                    editable\n                                    draggable\n                                    path={path}\n                                    // Event used when manipulating and adding points\n                                    onMouseUp={onEdit}\n                                    // Event used when dragging the whole Polygon\n                                    onDragEnd={onEdit}\n                                    onLoad={onLoad}\n                                    onUnmount={onUnmount}\n                                    options={{\n                                        fillColor: \"red\",\n                                        fillOpacity: 0.4,\n                                        strokeColor: \"red\",\n                                        strokeOpacity: 1,\n                                        strokeWeight: 1\n                                    }}\n                                />\n                            </GoogleMap> */}\n                    </div>\n                </Grid>\n            </Grid>\n        </Fragment >\n    )\n\n\n}\n\nexport default MapEdit","import gql from 'graphql-tag'\n\nexport const Create_Zone = gql`\n  mutation createZone($zone: ZoneInput) \n  {\n    createZone(zone: $zone)\n    {\n        status\n        message\n    }\n  }\n`\nexport const Update_Zone = gql`\n  mutation updateZone($zone: ZoneInput) \n  {\n    updateZone(zone: $zone)\n    {\n        status\n        message\n    }\n  }\n`","import gql from 'graphql-tag'\n\nexport const Zones = gql`\n   query getZones {\n    getZones {\n            id\n            name \n            zone_path {\n                lat\n                lng\n            }\n        }\n    }\n`\nexport const Zone = gql`\n   query getZone($id: ID) {\n    getZone(id: $id) {\n            id\n            name \n            zone_path {\n                lat\n                lng\n            }\n        }\n    }\n` "],"sourceRoot":""}