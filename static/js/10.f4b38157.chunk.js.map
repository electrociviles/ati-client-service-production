{"version":3,"sources":["views/Projects/pages/ProjectInfo.js","views/Projects/ImageDetail.js","views/Projects/pages/BoardsInfo.js","views/Projects/pages/AroundInfo.js","views/Projects/pages/OutletSamplingInfo.js","views/Projects/ProjectDetail.js","views/Projects/ProjectForm.js","views/Projects/Projects.js"],"names":["ProjectInfo","props","useState","project","setProject","observations","setObservations","loading","setLoading","useEffect","observation","className","name","type","TextField","autoComplete","multiline","margin","label","value","onChange","e","target","fullWidth","CircularProgress","Button","onClick","data","id","_id","onUpdateObservationProject","then","response","status","toast","success","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","error","color","ImageDetail","url","setUrl","src","zoomSrc","Transition","React","forwardRef","ref","Slide","direction","openDetailImage","setOpenDetailImage","setBoards","board","setBoard","cellsBefore","setCellsBefore","cellsVoltaje","setCellsVoltaje","cellsCorriente","setCellsCorriente","cellsAfter","setCellsAfter","cellsFinding","setCellsFinding","boards","onSelectBoard","_","console","log","newItemsBoard","itemsBoards","map","item","photos","length","newCellBefore","filter","itemBoard","mode","cell","newPhotos","photo","data-value","config","urlImages","showImages","newCellVoltaje","newCellCorriente","newCellsAfter","newCellsFinding","onOpenItemBoard","currentCell","openItemBoard","tmpCellsBefore","tmpCellsAfter","tmpCellsVoltaje","tmpCellsCorriente","closeDatailImage","Card","CardHeader","title","Divider","CardContent","Table","TableBody","TableRow","TableCell","i","key","Chip","size","variant","onUpdateObservationBoard","itemFinding","letterOne","style","backgroundColor","colorOne","autoPlay","infinite","mouseTracking","items","disableButtonsControls","controlsStrategy","animationDuration","autoPlayInterval","Math","random","itemBefore","itemVoltaje","textColorOne","colorTwo","textColorTwo","letterTwo","Dialog","maxWidth","open","onClose","TransitionComponent","DialogContent","DialogActions","autoFocus","AroundInfo","cellsOutletSampling","setCellOutletSampling","newCellsOutletSampling","aroundItems","outletSampling","OutletSampling","TabPanel","children","index","other","role","hidden","aria-labelledby","Box","p","a11yProps","useStyles","makeStyles","theme","root","flexGrow","height","minWidth","input","display","padding","valueContainer","flexWrap","flex","alignItems","overflow","chip","spacing","chipFocused","emphasize","palette","grey","noOptionsMessage","singleValue","fontSize","placeholder","left","bottom","divider","paper","text","secondary","button","fab","marginTop","float","extendedIcon","marginRight","formControl","ProjectDetail","classes","setValue","AppBar","Tabs","newValue","scrollButtons","indicatorColor","textColor","aria-label","Tab","icon","BoardsInfo","OutletSamplingInfo","ProjectForm","listCustomers","setCustomers","customers","person","setType","disabled","customer","setCustomer","description","setDescription","errorDescription","setErrorDescription","errorTextDescription","setErrorTextDescription","validateDescription","toString","trim","onSubmitPerson","errors","validateForm","updateUser","info","createProject","onRefreshProjects","Container","Paper","encType","onSubmit","preventDefault","Grid","container","xs","sm","select","clsx","textField","MenuItem","Autocomplete","getOptionLabel","option","toUpperCase","filterOptions","x","options","getOptionSelected","onInputChange","newInputValue","search","renderInput","params","renderTags","tagValue","getTagProps","indexOf","renderOption","Typography","helperText","iconWidth","width","DialogTitle","withStyles","closeButton","right","top","disableTypography","IconButton","Projects","listProjects","setProjects","projects","setTotalProjects","count","totalProjects","page","setPage","rowsPerPage","setRowsPerPage","setOpen","openDetailProject","setOpenDetailProject","openProjectForm","setOpenProjectForm","openObservations","setOpenObservations","onCloseDeleteProject","onDetailProject","onOpenObservation","closeDatailProject","onCloseProjectForm","onCloseObservations","Fab","TableContainer","component","TableHead","newProjects","currentProject","onSendReportProject","Swal","fire","showConfirmButton","timer","catch","TablePagination","rowsPerPageOptions","onChangePage","newPage","onChangeRowsPerPage","event","DialogContentText","deleteProject","fullScreen","onSaveObservations"],"mappings":"6TAiGeA,EAvFK,SAAAC,GAAU,IAAD,EAEKC,mBAAS,MAFd,mBAElBC,EAFkB,KAETC,EAFS,OAGeF,mBAAS,IAHxB,mBAGlBG,EAHkB,KAGJC,EAHI,OAIKJ,oBAAS,GAJd,mBAIlBK,EAJkB,KAITC,EAJS,KAMzBC,qBAAU,WACFR,EAAME,UACNC,EAAWH,EAAME,SACjBG,EAAgBL,EAAME,QAAQO,gBAEnC,CAACP,EAASF,EAAME,UAqCnB,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,MACA,yBAAKQ,UAAU,iBAEPR,EACI,kBAAC,WAAD,KACI,yBAAKQ,UAAU,gBAAgBR,EAAQS,MACvC,yBAAKD,UAAU,gBAAiC,QAAjBR,EAAQU,KAAiB,eAAc,iBACtE,yBAAKF,UAAU,qBACX,kBAAC,WAAD,KACI,kBAACG,EAAA,EAAD,CACIC,aAAa,MACbC,WAAS,EACTC,OAAO,QACPC,MAAM,gBACNC,MAAOd,EACPe,SArBR,SAAAC,GACxBf,EAAgBe,EAAEC,OAAOH,QAqBOI,WAAS,IAGThB,EACI,kBAAC,WAAD,KACI,kBAACiB,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAQC,QA5DtB,WACtBlB,GAAW,GACX,IAAImB,EAAO,CACPC,GAAIzB,EAAQ0B,IACZxB,gBAEJyB,YAA2BH,GAAMI,MAAK,SAAAC,GAClCxB,GAAW,GACY,WAAnBwB,EAASC,OACTC,IAAMC,QAAQH,EAASI,QAAS,CAC5BC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAGdV,IAAMW,MAAMb,EAASI,QAAS,CAC1BC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,QAkCkDE,MAAM,WAA1C,+BAOlB,M,8CC/DXC,G,OApBK,SAAA9C,GAAU,IAAD,EAEHC,mBAAS,IAFN,mBAElB8C,EAFkB,KAEbC,EAFa,KASzB,OALAxC,qBAAU,WAENwC,EAAOhD,EAAM+C,OACd,CAAC/C,EAAM+C,MAGN,6BAEQA,EACI,kBAAC,IAAD,CAAgBE,IAAKF,EAAKG,QAASH,IACjC,M,mFCOhBI,G,OAAaC,IAAMC,YAAW,SAAoBrD,EAAOsD,GAC3D,OAAO,kBAACC,EAAA,EAAD,eAAOC,UAAU,KAAKF,IAAKA,GAAStD,QA0nBhCD,EAtnBK,SAAAC,GAAU,IAAD,EAEKC,mBAAS,MAFd,mBAElBC,EAFkB,KAETC,EAFS,OAGqBF,oBAAS,GAH9B,mBAGlBwD,EAHkB,KAGDC,EAHC,OAIHzD,mBAAS,IAJN,mBAIlB8C,EAJkB,KAIbC,EAJa,OAKe/C,mBAAS,IALxB,mBAKlBG,EALkB,KAKJC,EALI,OAMKJ,oBAAS,GANd,mBAMlBK,EANkB,KAMTC,EANS,OAOGN,mBAAS,IAPZ,mBAOV0D,GAPU,aAQD1D,mBAAS,IARR,mBAQlBW,EARkB,aASCX,mBAAS,OATV,mBASlB2D,GATkB,KASXC,GATW,QAUa5D,mBAAS,IAVtB,qBAUlB6D,GAVkB,MAULC,GAVK,SAWe9D,mBAAS,IAXxB,qBAWlB+D,GAXkB,MAWJC,GAXI,SAYmBhE,mBAAS,IAZ5B,qBAYlBiE,GAZkB,MAYFC,GAZE,SAaWlE,mBAAS,IAbpB,qBAalBmE,GAbkB,MAaNC,GAbM,SAcepE,mBAAS,IAdxB,qBAclBqE,GAdkB,MAcJC,GAdI,MAgBzB/D,qBAAU,WACNL,EAAWH,EAAME,SACbF,EAAME,SACNyD,EAAU3D,EAAME,QAAQsE,UAG7B,CAAC5D,EAAMV,EAASF,EAAME,UAEzB,IAiCMuE,GAAgB,SAAAb,GAAK,OAAI,SAAAc,GAC3BC,QAAQC,IAAIhB,GACZvD,EAAgBuD,EAAMxD,cACtB,IAAIyE,EAAgBjB,EAAMkB,YAAYC,KAAI,SAAAC,GAQtC,OAP2B,IAAvBA,EAAKC,OAAOC,SACZF,EAAKC,OAAS,CAAC,CACXlC,IAAK,cACLnC,KAAM,YAIPoE,KAEXpB,EAAMkB,YAAcD,EACpBhB,GAASD,GACTvD,EAAgBuD,EAAMnD,aACtBkE,QAAQC,IAAIhB,EAAMnD,aAElB,IACM0E,EADevB,EAAMkB,YAAYM,QAAO,SAAAC,GAAS,MAA2B,UAAvBA,EAAUL,KAAKM,QACrCP,KAAI,SAAAQ,GACrC,IAAMC,EAAYD,EAAKN,OAAOF,KAAI,SAAAU,GAE9B,OADAd,QAAQC,IAAIa,GACPA,EAAMzF,MAQAyF,EAPA,yBAAK/E,UAAU,OAAOgF,aAAW,KACpC,yBACIzC,IAAG,UAAK0C,IAAOC,WAAZ,OAAwBH,EAAM1C,KACjCtB,QAASoE,GAAW,GAAD,OAAIF,IAAOC,WAAX,OAAuBH,EAAM1C,YAShE,OAFAwC,EAAKN,OAASO,EAEPD,KAEXxB,GAAeoB,GAGf,IACMW,EADgBlC,EAAMkB,YAAYM,QAAO,SAAAC,GAAS,MAA2B,WAAvBA,EAAUL,KAAKpE,QACpCmE,KAAI,SAAAQ,GACvC,IAAMC,EAAYD,EAAKN,OAAOF,KAAI,SAAAU,GAE9B,OADAd,QAAQC,IAAIa,GACPA,EAAMzF,MAQAyF,EAPA,yBAAK/E,UAAU,OAAOgF,aAAW,KACpC,yBACIzC,IAAG,UAAK0C,IAAOC,WAAZ,OAAwBH,EAAM1C,KACjCtB,QAASoE,GAAW,GAAD,OAAIF,IAAOC,WAAX,OAAuBH,EAAM1C,YAShE,OAFAwC,EAAKN,OAASO,EAEPD,KAEXtB,GAAgB6B,GAEhB,IACMC,EADkBnC,EAAMkB,YAAYM,QAAO,SAAAC,GAAS,MAA2B,aAAvBA,EAAUL,KAAKpE,QAClCmE,KAAI,SAAAQ,GAC3C,IAAMC,EAAYD,EAAKN,OAAOF,KAAI,SAAAU,GAE9B,OADAd,QAAQC,IAAIa,GACPA,EAAMzF,MAQAyF,EAPA,yBAAK/E,UAAU,OAAOgF,aAAW,KACpC,yBACIzC,IAAG,UAAK0C,IAAOC,WAAZ,OAAwBH,EAAM1C,KACjCtB,QAASoE,GAAW,GAAD,OAAIF,IAAOC,WAAX,OAAuBH,EAAM1C,YAShE,OAFAwC,EAAKN,OAASO,EAEPD,KAEXpB,GAAkB4B,GAElB,IACMC,EADcpC,EAAMkB,YAAYM,QAAO,SAAAC,GAAS,MAA2B,SAAvBA,EAAUL,KAAKM,QACrCP,KAAI,SAAAQ,GACpC,IAAMC,EAAYD,EAAKN,OAAOF,KAAI,SAAAU,GAE9B,OADAd,QAAQC,IAAIa,GACPA,EAAMzF,MAQAyF,EAPA,yBAAK/E,UAAU,OAAOgF,aAAW,KACpC,yBACIzC,IAAG,UAAK0C,IAAOC,WAAZ,OAAwBH,EAAM1C,KACjCtB,QAASoE,GAAW,GAAD,OAAIF,IAAOC,WAAX,OAAuBH,EAAM1C,YAShE,OAFAwC,EAAKN,OAASO,EAEPD,KAGXlB,GAAc2B,GAEd,IACMC,EADgBrC,EAAMkB,YAAYM,QAAO,SAAAC,GAAS,MAA2B,WAAvBA,EAAUL,KAAKM,QACnCP,KAAI,SAAAQ,GACxC,IAAMC,EAAYD,EAAKN,OAAOF,KAAI,SAAAU,GAC9B,OAAKA,EAAMzF,MAQAyF,EAPA,yBAAK/E,UAAU,OAAOgF,aAAW,KACpC,yBACIzC,IAAG,UAAK0C,IAAOC,WAAZ,OAAwBH,EAAM1C,KACjCtB,QAASoE,GAAW,GAAD,OAAIF,IAAOC,WAAX,OAAuBH,EAAM1C,YAShE,OAFAwC,EAAKN,OAASO,EAEPD,KAEXhB,GAAgB0B,KAGdJ,GAAa,SAAA9C,GAAG,OAAI,SAAA2B,GACtB1B,EAAOD,GACPW,GAAmB,KAGjBwC,GAAkB,SAAAC,GAAW,OAAI,SAAAzB,GACnC0B,YAAcD,EAAYvE,KAAKE,MAAK,SAAAC,GAEhC,GAAwB,YAApBA,EAASC,OAAsB,CAC/B,OAAQmE,EAAYnB,KAAKM,MACrB,IAAK,SACD,IAAIe,EAAiBvC,GAAYiB,KAAI,SAAAQ,GAKjC,OAJAZ,QAAQC,IAAI,QAASW,GACjBA,EAAK3D,MAAQuE,EAAYvE,MACzB2D,EAAKvD,OAAS,UAEXuD,KAEXxB,GAAesC,GACf,MACJ,IAAK,QACD,IAAIC,EAAgBlC,GAAWW,KAAI,SAAAQ,GAI/B,OAHIA,EAAK3D,MAAQuE,EAAYvE,MACzB2D,EAAKvD,OAAS,UAEXuD,KAEXlB,GAAciC,GAGtB,OAAQH,EAAYnB,KAAKpE,MACrB,IAAK,UACD,IAAI2F,EAAkBzC,GAAYiB,KAAI,SAAAQ,GAIlC,OAHIA,EAAK3D,MAAQuE,EAAYvE,MACzB2D,EAAKvD,OAAS,UAEXuD,KAEXtB,GAAgBsC,GAChB,MACJ,IAAK,YACD,IAAIC,EAAoBtC,GAAea,KAAI,SAAAQ,GAIvC,OAHIA,EAAK3D,MAAQuE,EAAYvE,MACzB2D,EAAKvD,OAAS,UAEXuD,KAEXpB,GAAkBqC,UAOhCC,GAAmB,WACrB/C,GAAmB,IASvB,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,MACA,kBAACgD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,aAClB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAKxG,UAAU,wBAEPR,EACIA,EAAQsE,OAAOO,KAAI,SAACnB,EAAOuD,GACvB,OAAQ,yBAAKC,IAAKD,EAAGzG,UAAU,cAC3B,kBAAC2G,EAAA,EAAD,CACIC,KAAK,QACLzE,MAAM,UACN5B,MAAO2C,EAAMjD,KACb4G,QAAQ,WACR9F,QAASgD,GAAcb,SAGjC,IAId,yBAAKlD,UAAU,sBACX,kBAAC,WAAD,KACI,kBAACG,EAAA,EAAD,CACIC,aAAa,MACbC,WAAS,EACTC,OAAO,QACPC,MAAM,gBACNC,MAAOd,EACPe,SA1ChB,SAAAC,GACxBf,EAAgBe,EAAEC,OAAOH,QA0CeI,WAAS,IAGThB,EACI,kBAAC,WAAD,KACI,kBAACiB,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAQC,QA1Q9B,WACtBkD,QAAQC,IAAIxE,GACZG,GAAW,GACX,IAAImB,EAAO,CACPC,GAAIiC,GAAMhC,IACVxB,gBAEJoH,YAAyB9F,GAAMI,MAAK,SAAAC,GAChCxB,GAAW,GACY,WAAnBwB,EAASC,OACTC,IAAMC,QAAQH,EAASI,QAAS,CAC5BC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAGdV,IAAMW,MAAMb,EAASI,QAAS,CAC1BC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,QA+O0DE,MAAM,WAA1C,gCAUxB,kBAACoE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAKxG,UAAU,oBAEX,yBAAKA,UAAU,2BACX,kBAAC,WAAD,KAEQ4D,GAAaY,OAAS,EAClB,kBAAC,WAAD,KACI,yBAAKxE,UAAU,gBAAf,aACA,yBAAKA,UAAU,aAAY,0BAAMA,UAAU,QAAhB,YAA3B,IAAmE4D,GAAa,GAAGsC,OACnF,yBAAKlG,UAAU,oBAAmB,0BAAMA,UAAU,QAAhB,kBAAlC,IAAgF4D,GAAa,GAAGlE,cAChG,yBAAKM,UAAU,wBAEP4D,GAAaS,KAAI,SAAC0C,EAAaN,GAC3B,OACI,yBAAKzG,UAAU,OAAO0G,IAAKD,GACvB,yBAAKzG,UAAU,cAAc+G,EAAYzC,KAAK4B,OAEX,KAA/Ba,EAAYzC,KAAK0C,UACb,yBAAKhH,UAAU,eACX,yBAAKA,UAAU,kBAAkBiH,MAAO,CAAEC,gBAAgB,YAAeH,EAAYzC,KAAK6C,UAC1F,yBAAKnH,UAAU,sBAEjB,GAEV,yBAAKA,UAAU,eAEgB,aAAvB+G,EAAYzF,OAER,yBAAKtB,UAAU,iBACX,kBAAC,IAAD,CAAWA,UAAU,OAAOe,QAASyE,GAAgBuB,KACrD,yBAAK/G,UAAU,aAAf,yEAEF,IAGd,yBAAKA,UAAU,aACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CACIoH,UAAQ,EACRC,UAAU,EACVC,eAAa,EACbC,MAAOR,EAAYxC,OACnBiD,wBAAwB,EACxBC,iBAAiB,YACjBC,kBAAmB,IACnBC,iBAAkB,KAAAC,KAAKC,SAA0B,cAWvE,GAGlBzE,GAAYoB,OAAS,EACjB,kBAAC,WAAD,KACI,yBAAKxE,UAAU,gBAAf,0BACA,yBAAKA,UAAU,wBAEPoD,GAAYiB,KAAI,SAACyD,EAAYrB,GACzB,OACI,yBAAKzG,UAAU,OAAO0G,IAAKD,GACvB,yBAAKzG,UAAU,cAAc8H,EAAWxD,KAAK4B,OAEX,KAA9B4B,EAAWxD,KAAK0C,UACZ,yBAAKhH,UAAU,eACX,yBAAKA,UAAU,kBAAkBiH,MAAO,CAAEC,gBAAgB,YAAeY,EAAWxD,KAAK6C,UACzF,yBAAKnH,UAAU,sBAEjB,GAEV,yBAAKA,UAAU,eAEe,aAAtB8H,EAAWxG,OAEP,yBAAKtB,UAAU,iBACX,kBAAC,IAAD,CAAWA,UAAU,OAAOe,QAASyE,GAAgBsC,KACrD,yBAAK9H,UAAU,aAAf,yEAEF,IAGd,yBAAKA,UAAU,aACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CACIoH,UAAQ,EACRC,UAAU,EACVC,eAAa,EACbC,MAAOO,EAAWvD,OAClBiD,wBAAwB,EACxBC,iBAAiB,YACjBC,kBAAmB,IACnBC,iBAAkB,KAAAC,KAAKC,SAA0B,cAWvE,GAGlBvE,GAAakB,OAAS,EAClB,kBAAC,WAAD,KACI,yBAAKxE,UAAU,gBAAf,YACA,yBAAKA,UAAU,wBAGPsD,GAAae,KAAI,SAAC0D,EAAatB,GAC3B,OACI,yBAAKzG,UAAU,OAAO0G,IAAKD,GACvB,yBAAKzG,UAAU,cAAc+H,EAAYzD,KAAK4B,OAEX,KAA/B6B,EAAYzD,KAAK0C,UACb,yBAAKhH,UAAU,eACX,yBACIA,UAAU,kBACViH,MAAO,CACHC,gBAAgB,IAAD,OAAMa,EAAYzD,KAAK6C,UACtChF,MAAM,IAAD,OAAM4F,EAAYzD,KAAK0D,gBAG/BD,EAAYzD,KAAK0C,WAEtB,yBACIhH,UAAU,mBACViH,MAAO,CACHC,gBAAgB,IAAD,OAAMa,EAAYzD,KAAK2D,UACtC9F,MAAM,IAAD,OAAM4F,EAAYzD,KAAK4D,gBAG/BH,EAAYzD,KAAK6D,YAGxB,GAEV,yBAAKnI,UAAU,eAEgB,aAAvB+H,EAAYzG,OAER,yBAAKtB,UAAU,iBACX,kBAAC,IAAD,CAAWA,UAAU,OAAOe,QAASyE,GAAgBuC,KACrD,yBAAK/H,UAAU,aAAf,yEAEF,IAGd,yBAAKA,UAAU,aACX,kBAAC,IAAD,CACIoH,UAAQ,EACRC,UAAU,EACVC,eAAa,EACbC,MAAOQ,EAAYxD,OACnBiD,wBAAwB,EACxBC,iBAAiB,YACjBC,kBAAmB,IACnBC,iBAAkB,KAAAC,KAAKC,SAA0B,OAKrD,yBAAK7H,UAAU,eACX,0BAAMA,UAAU,cAAhB,UACC+H,EAAYzD,KAAK9D,aASpC,GAGlBgD,GAAegB,OAAS,EACpB,kBAAC,WAAD,KACI,yBAAKxE,UAAU,gBAAf,cACA,yBAAKA,UAAU,wBAGPwD,GAAea,KAAI,SAACC,EAAMmC,GACtB,OACI,yBAAKzG,UAAU,OAAO0G,IAAKD,GACvB,yBAAKzG,UAAU,cAAcsE,EAAKA,KAAK4B,OAEnC,yBAAKlG,UAAU,eACX,yBACIA,UAAU,aACViH,MAAO,CACHC,gBAAgB,IAAD,OAAM5C,EAAKA,KAAK6C,UAC/BhF,MAAM,IAAD,OAAMmC,EAAKA,KAAK0D,gBAGxB1D,EAAKA,KAAK0C,YAKvB,yBAAKhH,UAAU,eAES,aAAhBsE,EAAKhD,OAED,yBAAKtB,UAAU,iBACX,kBAAC,IAAD,CAAWA,UAAU,OAAOe,QAASyE,GAAgBlB,KACrD,yBAAKtE,UAAU,aAAf,yEAEF,IAGd,yBAAKA,UAAU,aACX,kBAAC,IAAD,CACIoH,UAAQ,EACRC,UAAU,EACVC,eAAa,EACbC,MAAOjD,EAAKC,OACZiD,wBAAwB,EACxBC,iBAAiB,YACjBC,kBAAmB,IACnBC,iBAAkB,KAAAC,KAAKC,SAA0B,OAKrD,yBAAK7H,UAAU,eACX,0BAAMA,UAAU,cAAhB,UACCsE,EAAKA,KAAK9D,aAS7B,GAGlBkD,GAAWc,OAAS,EAChB,kBAAC,WAAD,KACI,yBAAKxE,UAAU,gBAAf,4BACA,yBAAKA,UAAU,wBAEP0D,GAAWW,KAAI,SAACC,EAAMmC,GAClB,OACI,yBAAKzG,UAAU,OAAO0G,IAAKD,GACvB,yBAAKzG,UAAU,cAAcsE,EAAKA,KAAK4B,OAEX,KAAxB5B,EAAKA,KAAK0C,UACN,yBAAKhH,UAAU,eACX,yBAAKA,UAAU,kBAAkBiH,MAAO,CAAEC,gBAAgB,YAAe5C,EAAKA,KAAK6C,UACnF,yBAAKnH,UAAU,sBAEjB,GAEV,yBAAKA,UAAU,eAES,aAAhBsE,EAAKhD,OAED,yBAAKtB,UAAU,iBACX,kBAAC,IAAD,CAAWA,UAAU,OAAOe,QAASyE,GAAgBlB,KACrD,yBAAKtE,UAAU,aAAf,yEAEF,IAGd,yBAAKA,UAAU,aACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CACIoH,UAAQ,EACRC,UAAU,EACVC,eAAa,EACbC,MAAOjD,EAAKC,OACZiD,wBAAwB,EACxBC,iBAAiB,YACjBC,kBAAmB,IACnBC,iBAAkB,KAAAC,KAAKC,SAA0B,cAWvE,WAYtD,kBAACO,EAAA,EAAD,CACIxH,WAAS,EAACyH,SAAS,KACnBC,KAAMvF,EACNwF,QAASxC,GACTyC,oBAAqB/F,GACrB,kBAACgG,EAAA,EAAD,KACI,kBAAC,EAAD,CAAapG,IAAKA,KAEtB,kBAACqG,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CAAQ6H,WAAS,EAAC5H,QAASgF,GAAkB5D,MAAM,WAAnD,eCxnBlBM,EAAaC,IAAMC,YAAW,SAAoBrD,EAAOsD,GAC3D,OAAO,kBAACC,EAAA,EAAD,eAAOC,UAAU,KAAKF,IAAKA,GAAStD,OAqHhCsJ,EAnHI,SAAAtJ,GAEf2E,QAAQC,IAAI5E,EAAME,SAFM,MAG6BD,mBAAS,IAHtC,mBAGjBsJ,EAHiB,KAGIC,EAHJ,OAIFvJ,mBAAS,IAJP,mBAIjB8C,EAJiB,KAIZC,EAJY,OAKQ/C,oBAAS,GALjB,gCAMsBA,oBAAS,IAN/B,mBAMjBwD,EANiB,KAMAC,EANA,KASxBlD,qBAAU,WAEN,IAAMiJ,EAAyBzJ,EAAME,QAAQwJ,YAAY3E,KAAI,SAAA4E,GACzD,IAAMnE,EAAYmE,EAAe1E,OAAOF,KAAI,SAAAU,GAExC,OADAd,QAAQC,IAAIa,GACPA,EAAMzF,MAQAyF,EAPA,yBAAK/E,UAAU,OAAOgF,aAAW,KACpC,yBACIzC,IAAG,UAAK0C,IAAOC,WAAZ,OAAwBH,EAAM1C,KACjCtB,QAASoE,EAAW,GAAD,OAAIF,IAAOC,WAAX,OAAuBH,EAAM1C,YAShE,OAFA4G,EAAe1E,OAASO,EAEjBmE,KAEXH,EAAsBC,KAEvB,IAEH,IAAM5D,EAAa,SAAA9C,GAAG,OAAI,SAAA2B,GACtB1B,EAAOD,GACP4B,QAAQC,IAAI,MAAO7B,GACnBW,GAAmB,KAEjB+C,EAAmB,WACrB/C,GAAmB,IAGvB,OACI,kBAAC,WAAD,KACI,kBAACqD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAKxG,UAAU,gBAAf,0BAGR,kBAACuG,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,KACI,yBAAKxG,UAAU,wBAGP6I,EAAoBxE,KAAI,SAACC,EAAMmC,GAC3B,OACI,yBAAKzG,UAAU,OAAO0G,IAAKD,GACvB,yBAAKzG,UAAU,cAAcsE,EAAKA,KAAK4B,OAEX,KAAxB5B,EAAKA,KAAK0C,UACN,yBAAKhH,UAAU,eACX,yBAAKA,UAAU,kBAAkBiH,MAAO,CAAEC,gBAAgB,YAAe5C,EAAKA,KAAK6C,UACnF,yBAAKnH,UAAU,sBAEjB,GAGV,yBAAKA,UAAU,aACX,yBAAKA,UAAU,mBAEX,kBAAC,IAAD,CACIoH,UAAQ,EACRC,UAAU,EACVC,eAAa,EACbC,MAAOjD,EAAKC,OACZiD,wBAAwB,EACxBC,iBAAiB,YACjBC,kBAAmB,IACnBC,iBAAkB,KAAAC,KAAKC,SAA0B,iBAejG,kBAACO,EAAA,EAAD,CACIxH,WAAS,EAACyH,SAAS,KACnBC,KAAMvF,EACNwF,QAASxC,EACTyC,oBAAqB/F,GACrB,kBAACgG,EAAA,EAAD,KACI,kBAAC,EAAD,CAAapG,IAAKA,KAEtB,kBAACqG,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CAAQ6H,WAAS,EAAC5H,QAASgF,EAAkB5D,MAAM,WAAnD,cC5GdM,EAAaC,IAAMC,YAAW,SAAoBrD,EAAOsD,GAC3D,OAAO,kBAACC,EAAA,EAAD,eAAOC,UAAU,KAAKF,IAAKA,GAAStD,OA6HhC4J,EA1HQ,SAAA5J,GAEnB2E,QAAQC,IAAI5E,EAAME,SAFU,MAGyBD,mBAAS,IAHlC,mBAGrBsJ,EAHqB,KAGAC,EAHA,OAINvJ,mBAAS,IAJH,mBAIrB8C,EAJqB,KAIhBC,EAJgB,OAKI/C,oBAAS,GALb,gCAMkBA,oBAAS,IAN3B,mBAMrBwD,EANqB,KAMJC,EANI,KAS5BlD,qBAAU,WAEN,IAAMiJ,EAAyBzJ,EAAME,QAAQyJ,eAAe5E,KAAI,SAAA4E,GAC5D,IAAMnE,EAAYmE,EAAe1E,OAAOF,KAAI,SAAAU,GAExC,OADAd,QAAQC,IAAIa,GACPA,EAAMzF,MAQAyF,EAPA,yBAAK/E,UAAU,OAAOgF,aAAW,KACpC,yBACIzC,IAAG,UAAK0C,IAAOC,WAAZ,OAAwBH,EAAM1C,KACjCtB,QAASoE,EAAW,GAAD,OAAIF,IAAOC,WAAX,OAAuBH,EAAM1C,YAShE,OAFA4G,EAAe1E,OAASO,EAEjBmE,KAEXH,EAAsBC,KAEvB,IAEH,IAAM5D,EAAa,SAAA9C,GAAG,OAAI,SAAA2B,GACtB1B,EAAOD,GACP4B,QAAQC,IAAI,MAAO7B,GACnBW,GAAmB,KAEjB+C,EAAmB,WACrB/C,GAAmB,IAGvB,OACI,kBAAC,WAAD,KACI,yBAAKhD,UAAU,iBACX,yBAAKA,UAAU,oBAEX,yBAAKA,UAAU,2BACX,kBAACqG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAKxG,UAAU,gBAAf,uBAGR,kBAACuG,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,KACI,yBAAKxG,UAAU,wBAGP6I,EAAoBxE,KAAI,SAACC,EAAMmC,GAC3B,OACI,yBAAKzG,UAAU,OAAO0G,IAAKD,GACvB,yBAAKzG,UAAU,cAAcsE,EAAKA,KAAK4B,OAEX,KAAxB5B,EAAKA,KAAK0C,UACN,yBAAKhH,UAAU,eACX,yBAAKA,UAAU,kBAAkBiH,MAAO,CAAEC,gBAAgB,YAAe5C,EAAKA,KAAK6C,UACnF,yBAAKnH,UAAU,sBAEjB,GAGV,yBAAKA,UAAU,aACX,yBAAKA,UAAU,mBAEX,kBAAC,IAAD,CACIoH,UAAQ,EACRC,UAAU,EACVC,eAAa,EACbC,MAAOjD,EAAKC,OACZiD,wBAAwB,EACxBC,iBAAiB,YACjBC,kBAAmB,IACnBC,iBAAkB,KAAAC,KAAKC,SAA0B,oBAkB7G,kBAACO,EAAA,EAAD,CACIxH,WAAS,EAACyH,SAAS,KACnBC,KAAMvF,EACNwF,QAASxC,EACTyC,oBAAqB/F,GACrB,kBAACgG,EAAA,EAAD,KACI,kBAAC,EAAD,CAAapG,IAAKA,KAEtB,kBAACqG,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CAAQ6H,WAAS,EAAC5H,QAASgF,EAAkB5D,MAAM,WAAnD,c,0BCvGpB,SAASgH,EAAS7J,GAAQ,IAChB8J,EAAqC9J,EAArC8J,SAAU5I,EAA2BlB,EAA3BkB,MAAO6I,EAAoB/J,EAApB+J,MAAUC,EADZ,YACsBhK,EADtB,8BAGvB,OACE,uCACEiK,KAAK,WACLC,OAAQhJ,IAAU6I,EAClBpI,GAAE,oCAA+BoI,GACjCI,kBAAA,+BAAyCJ,IACrCC,GAEH9I,IAAU6I,GACT,kBAACK,EAAA,EAAD,CAAKC,EAAG,GACN,6BAAMP,KAahB,SAASQ,EAAUP,GACjB,MAAO,CACLpI,GAAG,wBAAD,OAA0BoI,GAC5B,gBAAgB,6BAAhB,OAA8CA,IAIlD,IAAMQ,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,OAAQ,IACRC,SAAU,KAEZC,MAAO,CACLC,QAAS,OACTC,QAAS,EACTJ,OAAQ,QAEVK,eAAgB,CACdF,QAAS,OACTG,SAAU,OACVC,KAAM,EACNC,WAAY,SACZC,SAAU,UAEZC,KAAM,CACJtK,OAAQyJ,EAAMc,QAAQ,GAAK,MAE7BC,YAAa,CACX5D,gBAAiB6D,YACQ,UAAvBhB,EAAMiB,QAAQ9K,KACV6J,EAAMiB,QAAQC,KAAK,KACnBlB,EAAMiB,QAAQC,KAAK,KACvB,MAGJC,iBAAkB,CAChBZ,QAASP,EAAMc,QAAQ,EAAG,IAE5BM,YAAa,CACXC,SAAU,IAEZC,YAAa,CACX3J,SAAU,WACV4J,KAAM,EACNC,OAAQ,EACRH,SAAU,IAGZI,QAAS,CACPtB,OAAQH,EAAMc,QAAQ,IAExBY,MAAO,CACLnB,QAASP,EAAMc,QAAQ,GACvB1I,MAAO4H,EAAMiB,QAAQU,KAAKC,WAG5BC,OACA,CACEtL,OAAQyJ,EAAMc,QAAQ,IAExBgB,IACA,CACEC,WAAY,EACZC,MAAO,SAETC,aAAc,CACZC,YAAalC,EAAMc,QAAQ,IAE7BqB,YAAa,CACX5L,OAAQyJ,EAAMc,QAAQ,QA8DXsB,EAxDO,SAAA7M,GAAU,IAAD,EAECC,mBAAS,MAFV,mBAEtBC,EAFsB,KAEbC,EAFa,KAMvB2M,EAAUvC,IANa,EAOHnH,IAAMnD,SAAS,GAPZ,mBAOtBiB,EAPsB,KAOf6L,EAPe,KAoB7B,OAPAvM,qBAAU,WACRL,EAAWH,EAAME,WAChB,CAACA,EAASF,EAAME,UAMjB,yBAAKQ,UAAWoM,EAAQpC,MACtB,kBAACsC,EAAA,EAAD,CAAQ5K,SAAS,SAASS,MAAM,WAC9B,kBAACoK,EAAA,EAAD,CACE/L,MAAOA,EACPC,SAhBa,SAACuD,EAAGwI,GACvBH,EAASG,IAgBH3F,QAAQ,aACR4F,cAAc,KACdC,eAAe,UACfC,UAAU,UACVC,aAAW,iCAEX,kBAACC,EAAA,EAAD,eAAKtM,MAAM,8BAA2BuM,KAAM,kBAAC,IAAD,CAAc9M,UAAU,UAAe4J,EAAU,KAC7F,kBAACiD,EAAA,EAAD,eAAKtM,MAAM,WAAWuM,KAAM,kBAAC,IAAD,CAAa9M,UAAU,UAAe4J,EAAU,KAC5E,kBAACiD,EAAA,EAAD,eAAKtM,MAAM,oBAAoBuM,KAAM,kBAAC,IAAD,CAAkB9M,UAAU,UAAe4J,EAAU,KAC1F,kBAACiD,EAAA,EAAD,eAAKtM,MAAM,oBAAoBuM,KAAM,kBAAC,IAAD,CAAS9M,UAAU,UAAe4J,EAAU,OAIrF,kBAACT,EAAD,CAAU3I,MAAOA,EAAO6I,MAAO,GAC7B,kBAAC,EAAD,CAAa7J,QAASA,KAExB,kBAAC2J,EAAD,CAAU3I,MAAOA,EAAO6I,MAAO,GAC7B,kBAAC0D,EAAD,CAAYvN,QAASA,KAEvB,kBAAC2J,EAAD,CAAU3I,MAAOA,EAAO6I,MAAO,GAC7B,kBAAC,EAAD,CAAY7J,QAASA,KAEvB,kBAAC2J,EAAD,CAAU3I,MAAOA,EAAO6I,MAAO,GAC7B,kBAAC2D,EAAD,CAAoBxN,QAASA,O,yDCvK/BqK,I,OAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,OAAQ,IACRC,SAAU,KAEZC,MAAO,CACLC,QAAS,OACTC,QAAS,EACTJ,OAAQ,QAEVK,eAAgB,CACdF,QAAS,OACTG,SAAU,OACVC,KAAM,EACNC,WAAY,SACZC,SAAU,UAEZC,KAAM,CACJtK,OAAQyJ,EAAMc,QAAQ,GAAK,MAE7BC,YAAa,CACX5D,gBAAiB6D,YACQ,UAAvBhB,EAAMiB,QAAQ9K,KACV6J,EAAMiB,QAAQC,KAAK,KACnBlB,EAAMiB,QAAQC,KAAK,KACvB,MAGJC,iBAAkB,CAChBZ,QAASP,EAAMc,QAAQ,EAAG,IAE5BM,YAAa,CACXC,SAAU,IAEZC,YAAa,CACX3J,SAAU,WACV4J,KAAM,EACNC,OAAQ,EACRH,SAAU,IAGZI,QAAS,CACPtB,OAAQH,EAAMc,QAAQ,IAExBY,MAAO,CACLnB,QAASP,EAAMc,QAAQ,GACvB1I,MAAO4H,EAAMiB,QAAQU,KAAKC,WAG5BC,OACA,CACEtL,OAAQyJ,EAAMc,QAAQ,IAExBgB,IACA,CACEC,WAAY,EACZC,MAAO,SAETC,aAAc,CACZC,YAAalC,EAAMc,QAAQ,IAE7BqB,YAAa,CACX5L,OAAQyJ,EAAMc,QAAQ,SAgB1B,IA4ReoC,GA5RK,SAAA3N,GAElBQ,qBAAU,WACRmE,QAAQC,IAAI5E,GAEZ4N,cAAgB9L,MAAK,SAAAC,GACnB8L,EAAa9L,EAAS+L,cAEpB9N,EAAM+N,SAOT,IAfwB,MAiBH9N,mBAAS,IAjBN,mBAiBpBW,EAjBoB,KAiBdoN,EAjBc,OAkBK/N,oBAAS,GAlBd,mBAkBpBgO,EAlBoB,aAoBHhO,mBAAS,KApBN,mBAqBrB6M,GArBqB,UAqBXvC,MArBW,EAuBOtK,mBAAS,IAvBhB,mBAuBpB6N,EAvBoB,KAuBTD,EAvBS,OAwBK5N,qBAxBL,mBAwBpBiO,EAxBoB,KAwBVC,EAxBU,OAyBWlO,mBAAS,IAzBpB,mBAyBpBmO,EAzBoB,KAyBPC,EAzBO,OA0BiBpO,mBAAS,IA1B1B,gCA2BKA,mBAAS,KA3Bd,gCA4BiBA,mBAAS,KA5B1B,gCA6BHA,mBAAS,OA7BN,gCA+BqBA,oBAAS,IA/B9B,mBA+BpBqO,EA/BoB,KA+BFC,EA/BE,OAgC6BtO,mBAAS,IAhCtC,mBAgCpBuO,EAhCoB,KAgCEC,EAhCF,OAkCexO,oBAAS,GAlCxB,gCAmCuBA,mBAAS,KAnChC,mBAkDrByO,GAlDqB,UAkDC,SAACxN,GAC3B,IAAIkL,OAAiBzJ,IAAVzB,EAAsBA,EAAQkN,EAEzC,OAAY,MAARhC,GAA2C,KAA3BA,EAAKuC,WAAWC,QAClCL,GAAoB,GACpBE,EAAwB,2BACjB,IAGPF,GAAoB,GACpBE,EAAwB,IACjB,KAuBLI,GAAiB,SAAAnK,GAMrB,GAAgB,IAhDG,WACnB,IAAIoK,EAAS,EAIb,OAHAA,GAAUJ,IA0CIK,GAIK,CAEjB,IAAIrN,EAAO,CACT,KAAQ0M,EACR,KAAQxN,EACR,SAAYsN,EAAStM,IACrB,YAAe,IAIZ5B,EAAM+N,OA+BTiB,YAAWtN,GAAMI,MAAK,SAAAC,GACpB4C,QAAQC,IAAI,WAAY7C,GACD,WAAnBA,EAASC,OACXC,IAAMgN,KAAK,mCAAoC,CAC7C7M,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAGZV,IAAMW,MAAM,+CAA6C,CACvDR,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,OAlDhBuM,YAAcxN,GAAMI,MAAK,SAAAC,GACvB4C,QAAQC,IAAI,WAAY7C,GACD,WAAnBA,EAASC,QACXC,IAAMgN,KAAK,mCAAoC,CAC7C7M,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAEZ3C,EAAMiJ,UACNjJ,EAAMmP,qBAENlN,IAAMW,MAAM,+CAA6C,CACvDR,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,YAmClBV,IAAMW,MAAM,4BAAmB,CAC7BR,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,KAMhB,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,MACA,kBAACyM,GAAA,EAAD,CAAWrG,SAAS,MAElB,kBAACsG,EAAA,EAAD,CAAO3O,UAAWoM,EAAQX,OACxB,0BAAMmD,QAAS,sBACbC,SAAU,SAAAnO,GACRA,EAAEoO,iBACFX,OAEF,kBAACY,EAAA,EAAD,CAAMC,WAAS,EAACnE,QAAS,GAEvB,kBAACkE,EAAA,EAAD,CAAMzK,MAAI,EAAC2K,GAAI,GAAIC,GAAI,GACrB,kBAAC/O,EAAA,EAAD,CACES,WAAS,EACTuO,QAAM,EACNnP,UAAWoP,aAAKhD,EAAQ9L,OAAQ8L,EAAQiD,WACxCxI,QAAQ,WACRtG,MAAM,OACND,OAAO,QACPE,MAAON,EACPO,SAjHK,SAAAC,GACnB4M,EAAQ5M,EAAEC,OAAOH,SAkHH,kBAAC8O,GAAA,EAAD,CAAU5I,IAAK,MAAOlG,MAAO,OAA7B,gBACA,kBAAC8O,GAAA,EAAD,CAAU5I,IAAK,OAAQlG,MAAO,QAA9B,mBAIJ,kBAACuO,EAAA,EAAD,CAAMzK,MAAI,EAAC2K,GAAI,GAAIC,GAAI,GACrB,kBAACK,GAAA,EAAD,CACE3O,WAAS,EACTgG,KAAK,QACL4I,eACE,SAACC,GACC,MAAM,GAAN,OAAUA,EAAOxP,KAAKgO,WAAWyB,cAAjC,MAGJC,cAAe,SAACC,GAAD,OAAOA,GACtBC,QAASzC,EACThN,cAAY,EACZ0P,kBAAmB,SAACL,EAAQjP,GAAT,OAAmBiP,IAAWjP,GACjDC,SAAU,SAACuD,EAAGxD,GACZiN,EAAYjN,IAEduP,cAAe,SAAC/L,EAAGgM,GAEjB,GADA/L,QAAQC,IAAI,gBAAiB8L,GACzBA,EAAc/B,WAAWC,OAAO1J,OAAS,EAAG,CAC9C,IAAIxD,EAAO,CACTiP,OAAQD,EAAc/B,WAAWC,QAEnChB,YAAclM,GAAMI,MAAK,SAAAC,GACvB8L,EAAa9L,EAAS+L,gBAI5B8C,YAAa,SAACC,GAAD,OACX,kBAAChQ,EAAA,EAAD,iBAAegQ,EAAf,CAAuB5P,MAAM,UAAUsG,QAAQ,WAAWvG,OAAO,YAEnE8P,WAAY,SAACC,EAAUC,GAAX,OACVD,EAAShM,KAAI,SAACoL,EAAQpG,GAAT,OACX,kBAAC1C,EAAA,EAAD,eACEpG,MAAOkP,EAAOxP,MACVqQ,EAAY,CAAEjH,UAFpB,CAGEkE,UAAyC,IAA/BH,EAAUmD,QAAQd,UAIlCe,aAAc,SAACf,GAEb,OACE,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACtE,WAAW,UACzB,kBAACqE,EAAA,EAAD,CAAMzK,MAAI,EAAC2K,IAAE,GACX,kBAACwB,GAAA,EAAD,eAAiBhB,EAAOxP,KAAKgO,WAAWyB,sBAQpD,kBAACX,EAAA,EAAD,CAAMzK,MAAI,EAAC2K,GAAI,GAAIC,GAAI,IACrB,kBAAC/O,EAAA,EAAD,CACES,WAAS,EACTsB,MAAO0L,EACP8C,WAAY5C,EACZxN,OAAO,QACPF,aAAa,MACba,GAAG,kCACHjB,UAAWoP,aAAKhD,EAAQ9L,OAAQ8L,EAAQiD,WACxCxI,QAAQ,WACRtG,MAAM,iBACNC,MAAOkN,EACPjN,SAnOY,SAAAC,GAC1BiN,EAAejN,EAAEC,OAAOH,OACxBwN,EAAoBtN,EAAEC,OAAOH,WAuOnB,kBAACuO,EAAA,EAAD,CAAMzK,MAAI,EAAC2K,GAAI,EAAGC,GAAI,GACpB,kBAACpO,EAAA,EAAD,CAAQyM,SAAUA,EAAUrN,KAAK,SAAS2G,QAAQ,YAAY1E,MAAM,WACjE7C,EAAM+N,OAAS,aAAe,kB,uICjU3CxD,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEd0G,UAAW,CACPC,MAAO,IAEXnF,MAAO,CACHnB,QAASP,EAAMc,QAAQ,GACvBiB,UAAW,IAEfF,OAAQ,CACJtL,OAAQyJ,EAAMc,QAAQ,IAE1BT,MAAO,CACHC,QAAS,QAEbwB,IAAK,CACDvL,OAAQyJ,EAAMc,QAAQ,IAE1BmB,aAAc,CACVC,YAAalC,EAAMc,QAAQ,IAE/BiC,KAAM,CACFb,YAAalC,EAAMc,QAAQ,GAC3B1I,MAAO,aAiBT0O,GAAcC,cAbL,SAAC/G,GAAD,MAAY,CACvBC,KAAM,CACF1J,OAAQ,EACRgK,QAASP,EAAMc,QAAQ,IAE3BkG,YAAa,CACTrP,SAAU,WACVsP,MAAOjH,EAAMc,QAAQ,GACrBoG,IAAKlH,EAAMc,QAAQ,GACnB1I,MAAO4H,EAAMiB,QAAQC,KAAK,SAId6F,EAAmB,SAACxR,GAAW,IACvC8J,EAAyC9J,EAAzC8J,SAAUgD,EAA+B9M,EAA/B8M,QAAS7D,EAAsBjJ,EAAtBiJ,QAAYe,EADO,YACGhK,EADH,kCAE9C,OACI,kBAAC,KAAD,eAAgB4R,mBAAiB,EAAClR,UAAWoM,EAAQpC,MAAUV,GAC3D,kBAACmH,GAAA,EAAD,CAAY5J,QAAQ,MAAMuC,GACzBb,EACG,kBAAC4I,GAAA,EAAD,CAAYvE,aAAW,QAAQ5M,UAAWoM,EAAQ2E,YAAahQ,QAASwH,GACpE,kBAAC,KAAD,OAEJ,SAKV9F,GAAaC,IAAMC,YAAW,SAAoBrD,EAAOsD,GAC3D,OAAO,kBAACC,EAAA,EAAD,eAAOC,UAAU,KAAKF,IAAKA,GAAStD,OA8XhC8R,UA3XE,SAAApN,GAEblE,qBAAU,WACNuR,cAAejQ,MAAK,SAAAC,GAChB4C,QAAQC,IAAI,iCACZD,QAAQC,IAAI7C,GACZiQ,EAAYjQ,EAASkQ,UACrBC,EAAiBnQ,EAASoQ,YAE/B,IAEH,IAAMrF,EAAUvC,KAXE,EAactK,mBAAS,IAbvB,mBAaXgS,EAbW,KAaDD,EAbC,OAcY/R,mBAAS,MAdrB,mBAcXC,EAdW,KAcFC,EAdE,OAewBF,mBAAS,GAfjC,mBAeXmS,EAfW,KAeIF,EAfJ,OAgBMjS,mBAAS,GAhBf,mBAgBXoS,EAhBW,KAgBLC,EAhBK,OAiBoBrS,mBAAS,GAjB7B,mBAiBXsS,EAjBW,KAiBEC,EAjBF,OAoBMvS,oBAAS,GApBf,mBAoBX+I,EApBW,KAoBLyJ,EApBK,OAqBgCxS,oBAAS,GArBzC,mBAqBXyS,EArBW,KAqBQC,EArBR,OAsB4B1S,oBAAS,GAtBrC,mBAsBX2S,EAtBW,KAsBMC,GAtBN,QAwB8B5S,oBAAS,GAxBvC,qBAwBX6S,GAxBW,MAwBOC,GAxBP,SAyBsB9S,mBAAS,IAzB/B,qBAyBXG,GAzBW,MAyBGC,GAzBH,SA0BYJ,oBAAS,GA1BrB,qBA0BXK,GA1BW,MA0BFC,GA1BE,SA2BwBN,oBAAS,GA3BjC,qBAyCZ+S,IAzCY,YAyCW,WACzBP,GAAQ,KA2DNQ,GAAkB,SAAA/S,GAAO,OAAI,WAC/BC,EAAWD,GACXyS,GAAqB,KAGnBO,GAAoB,SAAAhT,GAAO,OAAI,WACjC6S,IAAoB,GACpB5S,EAAWD,KAGTiT,GAAqB,WACvBR,GAAqB,IAOnBS,GAAqB,WACvBP,IAAmB,IAGjBQ,GAAsB,WACxBN,IAAoB,IAgGxB,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,MACA,kBAAC1D,EAAA,EAAD,CAAO3O,UAAWoM,EAAQX,OACtB,kBAACmH,GAAA,EAAD,CAAK7R,QA7GS,WACtBoR,IAAmB,IA4GsBtL,QAAQ,WAAW1E,MAAM,UAAUyE,KAAK,QAAQ5G,UAAWoM,EAAQ9L,QAChG,kBAAC,KAAD,CAASN,UAAWoM,EAAQJ,eADhC,kBAIA,kBAAC6G,GAAA,EAAD,CAAgBC,UAAWnE,KACvB,kBAACtI,EAAA,EAAD,KACI,kBAAC0M,EAAA,EAAD,KACI,kBAACxM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,uBACA,kBAACA,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,uBACA,kBAACA,EAAA,EAAD,wBAGR,kBAACF,EAAA,EAAD,KAEQiL,EAASlN,KAAI,SAAA7E,GACT,OACI,kBAAC+G,EAAA,EAAD,CAAUG,IAAKlH,EAAQ0B,KACnB,kBAACsF,EAAA,EAAD,KAAYhH,EAAQS,KAApB,KACA,kBAACuG,EAAA,EAAD,KAAYhH,EAAQgO,SAASvN,MAC7B,kBAACuG,EAAA,EAAD,CAAWxG,UAAWoM,EAAQuE,WAC1B,kBAAChK,EAAA,EAAD,CAAMC,KAAK,QAAQrG,MAAOf,EAAQsE,OAAOU,OAAQqC,QAAQ,cAE7D,kBAACL,EAAA,EAAD,CAAWxG,UAAWoM,EAAQuE,WAC1B,kBAAC,IAAD,CAAU3Q,UAAW,OAAQe,QAASwR,GAAgB/S,MAE1D,kBAACgH,EAAA,EAAD,CAAWxG,UAAWoM,EAAQuE,WAEtBnR,EAAQI,QACJ,yBAAKI,UAAU,oBACX,kBAACa,EAAA,EAAD,CAAkB+F,KAAM,MAE5B,kBAAC,IAAD,CAAQ5G,UAAW,OAAQe,SA9FrDE,EA8FgFzB,EAAQ0B,IA9FlF,WAC5B+C,QAAQC,IAAIjD,GAEZ,IAAM+R,EAAczB,EAASlN,KAAI,SAAA4O,GAO7B,OANIA,EAAe/R,MAAQD,EACvBgS,EAAerT,SAAU,EAEzBqT,EAAerT,SAAU,EAGtBqT,KAGX3B,EAAY0B,GAEZE,YAAoBjS,GAAIG,MAAK,SAAAC,GACzB,IAAM2R,EAAczB,EAASlN,KAAI,SAAA4O,GAE7B,OADAA,EAAerT,SAAU,EAClBqT,KAEX3B,EAAY0B,GAEY,YAApB3R,EAASC,OACT6R,KAAKC,KAAK,CACNtG,KAAM,UACN5G,MAAO,UACPwF,KAAMrK,EAASI,QACf4R,mBAAmB,EACnBC,MAAO,MAGXH,KAAKC,KAAK,CACNtG,KAAM,QACN5G,MAAO,QACPwF,KAAMrK,EAASI,QACf4R,mBAAmB,EACnBC,MAAO,SAIhBC,OAAM,SAAA7S,GACLuD,QAAQC,IAAIxD,GACZb,IAAW,WAuDqB,kBAAC2G,EAAA,EAAD,CAAWxG,UAAWoM,EAAQuE,WAC1B,kBAAC,IAAD,CAAkB3Q,UAAW,OAAQe,QAASyR,GAAkBhT,OAlGlF,IAAAyB,QA4Gd,kBAACuS,GAAA,EAAD,CACIC,mBAAoB,CAAC,EAAG,GAAI,KAC5BX,UAAU,MACVrB,MAAOC,EACPG,YAAaA,EACbF,KAAMA,EACN+B,aA1PS,SAAC1P,EAAG2P,GACzB/B,EAAQ+B,IA0PIC,oBAtPgB,SAAAC,GAE5B/B,GAAgB+B,EAAMlT,OAAOH,OAC7BoR,EAAQ,OAuPJ,kBAACxJ,EAAA,EAAD,CACIE,KAAMA,EACNC,QAAS+J,IACT,kBAAC,GAAD,eAGA,kBAAC7J,EAAA,EAAD,KACI,kBAACqL,GAAA,EAAD,mDAIJ,kBAACpL,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CAAQ6H,WAAS,EAAC5H,QAASuR,GAAsBnQ,MAAM,WAAvD,MAGA,kBAACrB,EAAA,EAAD,CAAQC,QAtPA,SAAAE,GACpB8Q,GAAQ,GAERgC,YAAc9S,GAAIG,MAAK,SAAAC,GACnB,GAAwB,YAApBA,EAASC,OAAsB,CAC/BC,IAAMC,QAAQH,EAASI,QAAS,CAC5BC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAEd,IAAM+Q,EAAczB,EAASlN,KAAI,SAAC4O,GAC9B,OAAIhS,IAAOgS,EAAe/R,MAG1B+R,EAAe3R,OAAS,WAFb2R,KAKf3B,EAAY0B,QAEZzR,IAAMW,MAAMb,EAASI,QAAS,CAC1BC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,OAGnBsR,OAAM,SAAA7S,GAELa,IAAMW,MAAM,8CAA4C,CACpDR,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,QA4M4BE,MAAM,WAAxC,QAMR,kBAACiG,EAAA,EAAD,CAAQC,SAAS,KAAKC,KAAM4J,EAAiB3J,QAASmK,GAAoBlK,oBAAqB/F,IAC3F,kBAACgG,EAAA,EAAD,KACI,kBAAC,GAAD,CAAagG,kBAtQH,WACtB4C,cAAejQ,MAAK,SAAAC,GAChBiQ,EAAYjQ,EAASkQ,UACrBC,EAAiBnQ,EAASoQ,OAC1BK,EAAe,OAkQ4CvJ,QAASmK,GAAoBlT,QAASA,KAE7F,kBAACkJ,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CAAQ6H,WAAS,EAAC5H,QAAS2R,GAAoBvQ,MAAM,WAArD,YAMR,kBAACiG,EAAA,EAAD,CACIxH,WAAS,EACToT,YAAY,EACZ1L,KAAM0J,EACNzJ,QAASkK,GACTjK,oBAAqB/F,IACrB,kBAACgG,EAAA,EAAD,KACI,kBAAC,EAAD,CAAejJ,QAASA,KAE5B,kBAACkJ,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CAAQ6H,WAAS,EAAC5H,QAAS0R,GAAoBtQ,MAAM,WAArD,YAQR,kBAACiG,EAAA,EAAD,CACIxH,WAAW,EACXyH,SAAU,KACVC,KAAM8J,GACN7J,QAASoK,IACT,kBAAC,GAAD,sBAGA,kBAAClK,EAAA,EAAD,KACI,kBAACqL,GAAA,EAAD,KACI,kBAAC3T,EAAA,EAAD,CACIC,aAAa,MACbC,WAAS,EACTsI,WAAS,EACTrI,OAAO,QACPW,GAAG,OACHV,MAAM,gBACNE,SA1II,SAAAC,GACxBf,GAAgBe,EAAEC,OAAOH,QA0ILI,WAAS,MAIrB,kBAAC8H,EAAA,EAAD,KAGQ9I,GACI,yBAAKI,UAAU,oBACX,kBAACa,EAAA,EAAD,OAGJ,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,CAAQ6H,WAAS,EAAC5H,QAAS4R,GAAqBxQ,MAAM,WAAtD,YAGA,kBAACrB,EAAA,EAAD,CAAQC,QAjPX,WACrBkD,QAAQC,IAAIxE,IACZuE,QAAQC,IAAI1E,GACZK,IAAW,GACX,IAAImB,EAAO,CACPtB,gBACAuB,GAAIzB,EAAQ0B,KAEhB+S,YAAmBjT,GAAMI,MAAK,SAAAC,GAC1BxB,IAAW,GACXwS,IAAoB,GAEI,YAApBhR,EAASC,OACT6R,KAAKC,KAAK,CACNtG,KAAM,UACN5G,MAAO,UACPwF,KAAMrK,EAASI,QACf4R,mBAAmB,EACnBC,MAAO,MAGXH,KAAKC,KAAK,CACNtG,KAAM,QACN5G,MAAO,QACPwF,KAAMrK,EAASI,QACf4R,mBAAmB,EACnBC,MAAO,SAIhBC,OAAM,SAAA7S,GACLuD,QAAQC,IAAIxD,GACZb,IAAW,OAiN4CsC,MAAM,WAAzC,iB","file":"static/js/10.f4b38157.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react'\nimport config from './../../../config';\n\n\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { onUpdateObservationProject } from '../../../api/api';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Button } from '@material-ui/core';\n\nconst ProjectInfo = props => {\n\n    const [project, setProject] = useState(null);\n    const [observations, setObservations] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (props.project) {\n            setProject(props.project);\n            setObservations(props.project.observation)\n        }\n    }, [project, props.project]);\n\n    const updateObservation = () => {\n        setLoading(true);\n        let data = {\n            id: project._id,\n            observations\n        }\n        onUpdateObservationProject(data).then(response => {\n            setLoading(false);\n            if (response.status == 'success') {\n                toast.success(response.message, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            } else {\n                toast.error(response.message, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            }\n        })\n    }\n    const onChangeDescription = e => {\n        setObservations(e.target.value);\n    }\n\n    return (\n        <Fragment>\n            <ToastContainer />\n            <div className='project__info'>\n                {\n                    project ?\n                        <Fragment>\n                            <div className='project_name'>{project.name}</div>\n                            <div className='project_type'>{project.type === 'tri' ? 'Trifásico' : 'Monofásico'}</div>\n                            <div className='board_observation'>\n                                <Fragment>\n                                    <TextField\n                                        autoComplete='off'\n                                        multiline\n                                        margin=\"dense\"\n                                        label=\"Observaciones\"\n                                        value={observations}\n                                        onChange={onChangeDescription}\n                                        fullWidth\n                                    />\n                                    {\n                                        loading ?\n                                            <Fragment>\n                                                <CircularProgress />\n                                            </Fragment> :\n                                            <Button onClick={updateObservation} color=\"primary\">\n                                                Actualizar Observaciones\n                                            </Button>\n                                    }\n                                </Fragment>\n                            </div>\n                        </Fragment>\n                        : ''\n                }\n            </div>\n        </Fragment>\n    )\n}\n\nexport default ProjectInfo","import React, { useState, useEffect, Fragment } from 'react'\n\nimport InnerImageZoom from 'react-inner-image-zoom';\nimport 'react-inner-image-zoom/lib/InnerImageZoom/styles.min.css';\n\n\n\nconst ImageDetail = props => {\n\n    const [url, setUrl] = useState('');\n\n    useEffect(() => {\n\n        setUrl(props.url);\n    }, [props.url]);\n\n    return (\n        <div >\n            {\n                url ?\n                    <InnerImageZoom src={url} zoomSrc={url} />\n                    : ''\n            }\n        </div>\n    )\n}\n\nexport default ImageDetail","import React, { useState, useEffect, Fragment } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport config from './../../../config';\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Divider,\n    Table,\n    TableBody,\n    TableRow,\n    TableCell,\n    Button,\n} from '@material-ui/core';\nimport ImageDetail from './../ImageDetail';\nimport { BiShowAlt } from 'react-icons/bi';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Zoom } from \"react-slideshow-image\";\nimport Chip from '@material-ui/core/Chip';\nimport Slide from '@material-ui/core/Slide';\nimport { openItemBoard, onUpdateObservationBoard } from '../../../api/api';\nimport AliceCarousel from 'react-alice-carousel';\nimport 'react-alice-carousel/lib/alice-carousel.css';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n})\n\n\nconst ProjectInfo = props => {\n\n    const [project, setProject] = useState(null);\n    const [openDetailImage, setOpenDetailImage] = useState(false);\n    const [url, setUrl] = useState('');\n    const [observations, setObservations] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [boards, setBoards] = useState([]);\n    const [type, setType] = useState(\"\");\n    const [board, setBoard] = useState(null);\n    const [cellsBefore, setCellsBefore] = useState([]);\n    const [cellsVoltaje, setCellsVoltaje] = useState([]);\n    const [cellsCorriente, setCellsCorriente] = useState([]);\n    const [cellsAfter, setCellsAfter] = useState([]);\n    const [cellsFinding, setCellsFinding] = useState([]);\n\n    useEffect(() => {\n        setProject(props.project);\n        if (props.project) {\n            setBoards(props.project.boards);\n\n        }\n    }, [type, project, props.project]);\n\n    const updateObservation = () => {\n        console.log(observations);\n        setLoading(true);\n        let data = {\n            id: board._id,\n            observations\n        }\n        onUpdateObservationBoard(data).then(response => {\n            setLoading(false);\n            if (response.status == 'success') {\n                toast.success(response.message, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            } else {\n                toast.error(response.message, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            }\n        })\n    }\n\n    const onSelectBoard = board => _ => {\n        console.log(board);\n        setObservations(board.observations);\n        let newItemsBoard = board.itemsBoards.map(item => {\n            if (item.photos.length === 0) {\n                item.photos = [{\n                    url: 'default.png',\n                    type: 'remote'\n                }];\n            }\n\n            return item\n        });\n        board.itemsBoards = newItemsBoard;\n        setBoard(board);\n        setObservations(board.observation)\n        console.log(board.observation);\n\n        let tmpCellsBefore = board.itemsBoards.filter(itemBoard => itemBoard.item.mode == 'before')\n        const newCellBefore = tmpCellsBefore.map(cell => {\n            const newPhotos = cell.photos.map(photo => {\n                console.log(photo)\n                if (!photo.props) {\n                    return <div className=\"item\" data-value=\"1\">\n                        <img\n                            src={`${config.urlImages}${photo.url}`}\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\n                        />\n                    </div>\n                } else {\n                    return photo;\n                }\n            });\n            cell.photos = newPhotos;\n\n            return cell;\n        });\n        setCellsBefore(newCellBefore);\n\n\n        let tmpCellsVoltaje = board.itemsBoards.filter(itemBoard => itemBoard.item.type == 'voltaje')\n        const newCellVoltaje = tmpCellsVoltaje.map(cell => {\n            const newPhotos = cell.photos.map(photo => {\n                console.log(photo)\n                if (!photo.props) {\n                    return <div className=\"item\" data-value=\"1\">\n                        <img\n                            src={`${config.urlImages}${photo.url}`}\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\n                        />\n                    </div>\n                } else {\n                    return photo;\n                }\n            });\n            cell.photos = newPhotos;\n\n            return cell;\n        });\n        setCellsVoltaje(newCellVoltaje)\n\n        let tmpCellsCorriente = board.itemsBoards.filter(itemBoard => itemBoard.item.type == 'corriente')\n        const newCellCorriente = tmpCellsCorriente.map(cell => {\n            const newPhotos = cell.photos.map(photo => {\n                console.log(photo)\n                if (!photo.props) {\n                    return <div className=\"item\" data-value=\"1\">\n                        <img\n                            src={`${config.urlImages}${photo.url}`}\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\n                        />\n                    </div>\n                } else {\n                    return photo;\n                }\n            });\n            cell.photos = newPhotos;\n\n            return cell;\n        });\n        setCellsCorriente(newCellCorriente)\n\n        let tmpCellsAfter = board.itemsBoards.filter(itemBoard => itemBoard.item.mode == 'after')\n        const newCellsAfter = tmpCellsAfter.map(cell => {\n            const newPhotos = cell.photos.map(photo => {\n                console.log(photo)\n                if (!photo.props) {\n                    return <div className=\"item\" data-value=\"1\">\n                        <img\n                            src={`${config.urlImages}${photo.url}`}\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\n                        />\n                    </div>\n                } else {\n                    return photo;\n                }\n            });\n            cell.photos = newPhotos;\n\n            return cell;\n        });\n\n        setCellsAfter(newCellsAfter)\n\n        let tmpCellsFinding = board.itemsBoards.filter(itemBoard => itemBoard.item.mode == 'finding')\n        const newCellsFinding = tmpCellsFinding.map(cell => {\n            const newPhotos = cell.photos.map(photo => {\n                if (!photo.props) {\n                    return <div className=\"item\" data-value=\"1\">\n                        <img\n                            src={`${config.urlImages}${photo.url}`}\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\n                        />\n                    </div>\n                } else {\n                    return photo;\n                }\n            });\n            cell.photos = newPhotos;\n\n            return cell;\n        });\n        setCellsFinding(newCellsFinding)\n    }\n\n    const showImages = url => _ => {\n        setUrl(url);\n        setOpenDetailImage(true);\n    }\n\n    const onOpenItemBoard = currentCell => _ => {\n        openItemBoard(currentCell._id).then(response => {\n\n            if (response.status === 'success') {\n                switch (currentCell.item.mode) {\n                    case 'before':\n                        let tmpCellsBefore = cellsBefore.map(cell => {\n                            console.log('cell ', cell)\n                            if (cell._id === currentCell._id) {\n                                cell.status = 'activo';\n                            }\n                            return cell;\n                        })\n                        setCellsBefore(tmpCellsBefore);\n                        break;\n                    case 'after':\n                        let tmpCellsAfter = cellsAfter.map(cell => {\n                            if (cell._id === currentCell._id) {\n                                cell.status = 'activo';\n                            }\n                            return cell;\n                        })\n                        setCellsAfter(tmpCellsAfter)\n                        break;\n                }\n                switch (currentCell.item.type) {\n                    case 'voltaje':\n                        let tmpCellsVoltaje = cellsBefore.map(cell => {\n                            if (cell._id === currentCell._id) {\n                                cell.status = 'activo';\n                            }\n                            return cell;\n                        })\n                        setCellsVoltaje(tmpCellsVoltaje);\n                        break;\n                    case 'corriente':\n                        let tmpCellsCorriente = cellsCorriente.map(cell => {\n                            if (cell._id === currentCell._id) {\n                                cell.status = 'activo';\n                            }\n                            return cell;\n                        })\n                        setCellsCorriente(tmpCellsCorriente);\n                        break;\n                }\n            }\n        });\n    }\n\n    const closeDatailImage = () => {\n        setOpenDetailImage(false)\n    }\n\n    const onChangeDescription = e => {\n        setObservations(e.target.value);\n    }\n\n\n\n    return (\n        <Fragment>\n            <ToastContainer />\n            <Card>\n                <CardHeader title=\"TABLEROS\" />\n                <Divider />\n                <CardContent >\n                    <Table>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell>\n                                    <div className='board__item__wrapper'>\n                                        {\n                                            project ?\n                                                project.boards.map((board, i) => {\n                                                    return (<div key={i} className='board_item'>\n                                                        <Chip\n                                                            size='small'\n                                                            color='primary'\n                                                            label={board.name}\n                                                            variant=\"outlined\"\n                                                            onClick={onSelectBoard(board)} />\n                                                    </div>)\n                                                })\n                                                : ''\n                                        }\n                                    </div>\n\n                                    <div className='board_observations'>\n                                        <Fragment>\n                                            <TextField\n                                                autoComplete='off'\n                                                multiline\n                                                margin=\"dense\"\n                                                label=\"Observaciones\"\n                                                value={observations}\n                                                onChange={onChangeDescription}\n                                                fullWidth\n                                            />\n                                            {\n                                                loading ?\n                                                    <Fragment>\n                                                        <CircularProgress />\n                                                    </Fragment> :\n                                                    <Button onClick={updateObservation} color=\"primary\">\n                                                        Actualizar Observaciones\n                                                    </Button>\n                                            }\n                                        </Fragment>\n                                    </div>\n\n                                </TableCell>\n                            </TableRow>\n\n                            <TableRow>\n                                <TableCell>\n                                    <div className='project__wrapper'>\n\n                                        <div className='project__board__wrapper'>\n                                            <Fragment>\n                                                {\n                                                    cellsFinding.length > 0 ?\n                                                        <Fragment>\n                                                            <div className='title_action'>HALLAZGOS</div>\n                                                            <div className='aux_title'><span className='bold'> Titulo:</span> {cellsFinding[0].title}</div>\n                                                            <div className='aux_observations'><span className='bold'>Observaciones:</span> {cellsFinding[0].observations}</div>\n                                                            <div className='board__item__wrapper'>\n                                                                {\n                                                                    cellsFinding.map((itemFinding, i) => {\n                                                                        return (\n                                                                            <div className=\"card\" key={i}>\n                                                                                <div className='card_title'>{itemFinding.item.title}</div>\n                                                                                {\n                                                                                    itemFinding.item.letterOne !== '' ?\n                                                                                        <div className='card_colors'>\n                                                                                            <div className='card_color_left' style={{ backgroundColor: `#FCF338` }}>{itemFinding.item.colorOne}</div>\n                                                                                            <div className='card_color_right'></div>\n                                                                                        </div>\n                                                                                        : ''\n                                                                                }\n                                                                                <div className='card_header'>\n                                                                                    {\n                                                                                        itemFinding.status === 'inactivo'\n                                                                                            ?\n                                                                                            <div className='show__wrapper'>\n                                                                                                <BiShowAlt className='icon' onClick={onOpenItemBoard(itemFinding)} />\n                                                                                                <div className='show_text'>Esta marcación se encuentra oculta pulse en el icono para mostrar</div>\n                                                                                            </div>\n                                                                                            : ''\n                                                                                    }\n                                                                                </div>\n                                                                                <div className='card_body'>\n                                                                                    <div className=\"slide-container\">\n                                                                                        <AliceCarousel\n                                                                                            autoPlay\n                                                                                            infinite={true}\n                                                                                            mouseTracking\n                                                                                            items={itemFinding.photos}\n                                                                                            disableButtonsControls={true}\n                                                                                            controlsStrategy=\"alternate\"\n                                                                                            animationDuration={1000}\n                                                                                            autoPlayInterval={Math.random() * (3000 - 500) + 500}\n                                                                                        />\n\n                                                                                    </div>\n                                                                                </div>\n                                                                            </div>\n                                                                        )\n                                                                    })\n                                                                }\n\n                                                            </div>\n                                                        </Fragment> : ''\n                                                }\n                                                {\n                                                    cellsBefore.length > 0 ?\n                                                        <Fragment>\n                                                            <div className='title_action'>ANTES DE MANTENIMIENTO</div>\n                                                            <div className='board__item__wrapper'>\n                                                                {\n                                                                    cellsBefore.map((itemBefore, i) => {\n                                                                        return (\n                                                                            <div className=\"card\" key={i}>\n                                                                                <div className='card_title'>{itemBefore.item.title}</div>\n                                                                                {\n                                                                                    itemBefore.item.letterOne !== '' ?\n                                                                                        <div className='card_colors'>\n                                                                                            <div className='card_color_left' style={{ backgroundColor: `#FCF338` }}>{itemBefore.item.colorOne}</div>\n                                                                                            <div className='card_color_right'></div>\n                                                                                        </div>\n                                                                                        : ''\n                                                                                }\n                                                                                <div className='card_header'>\n                                                                                    {\n                                                                                        itemBefore.status === 'inactivo'\n                                                                                            ?\n                                                                                            <div className='show__wrapper'>\n                                                                                                <BiShowAlt className='icon' onClick={onOpenItemBoard(itemBefore)} />\n                                                                                                <div className='show_text'>Esta marcación se encuentra oculta pulse en el icono para mostrar</div>\n                                                                                            </div>\n                                                                                            : ''\n                                                                                    }\n                                                                                </div>\n                                                                                <div className='card_body'>\n                                                                                    <div className=\"slide-container\">\n                                                                                        <AliceCarousel\n                                                                                            autoPlay\n                                                                                            infinite={true}\n                                                                                            mouseTracking\n                                                                                            items={itemBefore.photos}\n                                                                                            disableButtonsControls={true}\n                                                                                            controlsStrategy=\"alternate\"\n                                                                                            animationDuration={1000}\n                                                                                            autoPlayInterval={Math.random() * (3000 - 500) + 500}\n                                                                                        />\n\n                                                                                    </div>\n                                                                                </div>\n                                                                            </div>\n                                                                        )\n                                                                    })\n                                                                }\n\n                                                            </div>\n                                                        </Fragment> : ''\n                                                }\n                                                {\n                                                    cellsVoltaje.length > 0 ?\n                                                        <Fragment>\n                                                            <div className='title_action'>VOLTAJES</div>\n                                                            <div className='board__item__wrapper'>\n\n                                                                {\n                                                                    cellsVoltaje.map((itemVoltaje, i) => {\n                                                                        return (\n                                                                            <div className=\"card\" key={i}>\n                                                                                <div className='card_title'>{itemVoltaje.item.title}</div>\n                                                                                {\n                                                                                    itemVoltaje.item.letterOne !== '' ?\n                                                                                        <div className='card_colors'>\n                                                                                            <div\n                                                                                                className='card_color_left'\n                                                                                                style={{\n                                                                                                    backgroundColor: `#${itemVoltaje.item.colorOne}`,\n                                                                                                    color: `#${itemVoltaje.item.textColorOne}`\n                                                                                                }}\n                                                                                            >\n                                                                                                {itemVoltaje.item.letterOne}\n                                                                                            </div>\n                                                                                            <div\n                                                                                                className='card_color_right'\n                                                                                                style={{\n                                                                                                    backgroundColor: `#${itemVoltaje.item.colorTwo}`,\n                                                                                                    color: `#${itemVoltaje.item.textColorTwo}`\n                                                                                                }}\n                                                                                            >\n                                                                                                {itemVoltaje.item.letterTwo}\n                                                                                            </div>\n                                                                                        </div>\n                                                                                        : ''\n                                                                                }\n                                                                                <div className='card_header'>\n                                                                                    {\n                                                                                        itemVoltaje.status === 'inactivo'\n                                                                                            ?\n                                                                                            <div className='show__wrapper'>\n                                                                                                <BiShowAlt className='icon' onClick={onOpenItemBoard(itemVoltaje)} />\n                                                                                                <div className='show_text'>Esta marcación se encuentra oculta pulse en el icono para mostrar</div>\n                                                                                            </div>\n                                                                                            : ''\n                                                                                    }\n                                                                                </div>\n                                                                                <div className='card_body'>\n                                                                                    <AliceCarousel\n                                                                                        autoPlay\n                                                                                        infinite={true}\n                                                                                        mouseTracking\n                                                                                        items={itemVoltaje.photos}\n                                                                                        disableButtonsControls={true}\n                                                                                        controlsStrategy=\"alternate\"\n                                                                                        animationDuration={1000}\n                                                                                        autoPlayInterval={Math.random() * (3000 - 500) + 500}\n                                                                                    />\n\n                                                                                </div>\n                                                                                {\n                                                                                    <div className='card_footer'>\n                                                                                        <span className='text_value'>Valor:</span>\n                                                                                        {itemVoltaje.item.value}\n                                                                                    </div>\n                                                                                }\n                                                                            </div>\n                                                                        )\n                                                                    })\n                                                                }\n\n                                                            </div>\n                                                        </Fragment> : ''\n                                                }\n                                                {\n                                                    cellsCorriente.length > 0 ?\n                                                        <Fragment>\n                                                            <div className='title_action'>CORRIENTES</div>\n                                                            <div className='board__item__wrapper'>\n\n                                                                {\n                                                                    cellsCorriente.map((item, i) => {\n                                                                        return (\n                                                                            <div className=\"card\" key={i}>\n                                                                                <div className='card_title'>{item.item.title}</div>\n                                                                                {\n                                                                                    <div className='card_colors'>\n                                                                                        <div\n                                                                                            className='card_color'\n                                                                                            style={{\n                                                                                                backgroundColor: `#${item.item.colorOne}`,\n                                                                                                color: `#${item.item.textColorOne}`\n                                                                                            }}\n                                                                                        >\n                                                                                            {item.item.letterOne}\n                                                                                        </div>\n\n                                                                                    </div>\n                                                                                }\n                                                                                <div className='card_header'>\n                                                                                    {\n                                                                                        item.status === 'inactivo'\n                                                                                            ?\n                                                                                            <div className='show__wrapper'>\n                                                                                                <BiShowAlt className='icon' onClick={onOpenItemBoard(item)} />\n                                                                                                <div className='show_text'>Esta marcación se encuentra oculta pulse en el icono para mostrar</div>\n                                                                                            </div>\n                                                                                            : ''\n                                                                                    }\n                                                                                </div>\n                                                                                <div className='card_body'>\n                                                                                    <AliceCarousel\n                                                                                        autoPlay\n                                                                                        infinite={true}\n                                                                                        mouseTracking\n                                                                                        items={item.photos}\n                                                                                        disableButtonsControls={true}\n                                                                                        controlsStrategy=\"alternate\"\n                                                                                        animationDuration={1000}\n                                                                                        autoPlayInterval={Math.random() * (3000 - 500) + 500}\n                                                                                    />\n\n                                                                                </div>\n                                                                                {\n                                                                                    <div className='card_footer'>\n                                                                                        <span className='text_value'>Valor:</span>\n                                                                                        {item.item.value}\n                                                                                    </div>\n                                                                                }\n                                                                            </div>\n                                                                        )\n                                                                    })\n                                                                }\n\n                                                            </div>\n                                                        </Fragment> : ''\n                                                }\n                                                {\n                                                    cellsAfter.length > 0 ?\n                                                        <Fragment>\n                                                            <div className='title_action'>DESPUES DE MANTENIMIENTO</div>\n                                                            <div className='board__item__wrapper'>\n                                                                {\n                                                                    cellsAfter.map((item, i) => {\n                                                                        return (\n                                                                            <div className=\"card\" key={i}>\n                                                                                <div className='card_title'>{item.item.title}</div>\n                                                                                {\n                                                                                    item.item.letterOne !== '' ?\n                                                                                        <div className='card_colors'>\n                                                                                            <div className='card_color_left' style={{ backgroundColor: `#FCF338` }}>{item.item.colorOne}</div>\n                                                                                            <div className='card_color_right'></div>\n                                                                                        </div>\n                                                                                        : ''\n                                                                                }\n                                                                                <div className='card_header'>\n                                                                                    {\n                                                                                        item.status === 'inactivo'\n                                                                                            ?\n                                                                                            <div className='show__wrapper'>\n                                                                                                <BiShowAlt className='icon' onClick={onOpenItemBoard(item)} />\n                                                                                                <div className='show_text'>Esta marcación se encuentra oculta pulse en el icono para mostrar</div>\n                                                                                            </div>\n                                                                                            : ''\n                                                                                    }\n                                                                                </div>\n                                                                                <div className='card_body'>\n                                                                                    <div className=\"slide-container\">\n                                                                                        <AliceCarousel\n                                                                                            autoPlay\n                                                                                            infinite={true}\n                                                                                            mouseTracking\n                                                                                            items={item.photos}\n                                                                                            disableButtonsControls={true}\n                                                                                            controlsStrategy=\"alternate\"\n                                                                                            animationDuration={1000}\n                                                                                            autoPlayInterval={Math.random() * (3000 - 500) + 500}\n                                                                                        />\n\n                                                                                    </div>\n                                                                                </div>\n                                                                            </div>\n                                                                        )\n                                                                    })\n                                                                }\n\n                                                            </div>\n                                                        </Fragment> : ''\n                                                }\n                                            </Fragment>\n                                        </div>\n\n                                    </div>\n\n                                </TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table >\n                </CardContent >\n                <Dialog\n                    fullWidth maxWidth=\"sm\"\n                    open={openDetailImage}\n                    onClose={closeDatailImage}\n                    TransitionComponent={Transition}>\n                    <DialogContent>\n                        <ImageDetail url={url} />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button autoFocus onClick={closeDatailImage} color=\"primary\">\n                            Cerrar\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n            </Card >\n        </Fragment>\n    )\n}\n\nexport default ProjectInfo","import React, { useState, useEffect, Fragment } from 'react'\nimport config from './../../../config';\n\nimport {\n    Table,\n    TableBody,\n    TableRow,\n    TableCell,\n    Button\n} from '@material-ui/core';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AliceCarousel from 'react-alice-carousel';\nimport 'react-alice-carousel/lib/alice-carousel.css';\nimport Slide from '@material-ui/core/Slide';\nimport ImageDetail from './../ImageDetail';\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n})\nconst AroundInfo = props => {\n\n    console.log(props.project);\n    const [cellsOutletSampling, setCellOutletSampling] = useState([]);\n    const [url, setUrl] = useState('');\n    const [didMount, setDidMount] = useState(false);\n    const [openDetailImage, setOpenDetailImage] = useState(false);\n\n\n    useEffect(() => {\n\n        const newCellsOutletSampling = props.project.aroundItems.map(outletSampling => {\n            const newPhotos = outletSampling.photos.map(photo => {\n                console.log(photo)\n                if (!photo.props) {\n                    return <div className=\"item\" data-value=\"1\">\n                        <img\n                            src={`${config.urlImages}${photo.url}`}\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\n                        />\n                    </div>\n                } else {\n                    return photo;\n                }\n            });\n            outletSampling.photos = newPhotos;\n\n            return outletSampling;\n        });\n        setCellOutletSampling(newCellsOutletSampling);\n\n    }, []);\n\n    const showImages = url => _ => {\n        setUrl(url);\n        console.log('Url', url)\n        setOpenDetailImage(true);\n    }\n    const closeDatailImage = () => {\n        setOpenDetailImage(false)\n    }\n\n    return (\n        <Fragment>\n            <Table>\n                <TableBody>\n                    <TableRow>\n                        <TableCell>\n                            <div className='title_action'>IMAGENES DEL ENTORNO</div>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n\n                        <TableCell>\n                            <div className='board__item__wrapper'>\n\n                                {\n                                    cellsOutletSampling.map((item, i) => {\n                                        return (\n                                            <div className=\"card\" key={i}>\n                                                <div className='card_title'>{item.item.title}</div>\n                                                {\n                                                    item.item.letterOne !== '' ?\n                                                        <div className='card_colors'>\n                                                            <div className='card_color_left' style={{ backgroundColor: `#FCF338` }}>{item.item.colorOne}</div>\n                                                            <div className='card_color_right'></div>\n                                                        </div>\n                                                        : ''\n                                                }\n\n                                                <div className='card_body'>\n                                                    <div className=\"slide-container\">\n\n                                                        <AliceCarousel\n                                                            autoPlay\n                                                            infinite={true}\n                                                            mouseTracking\n                                                            items={item.photos}\n                                                            disableButtonsControls={true}\n                                                            controlsStrategy=\"alternate\"\n                                                            animationDuration={1000}\n                                                            autoPlayInterval={Math.random() * (3000 - 500) + 500}\n                                                        />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        )\n                                    })\n                                }\n\n                            </div>\n\n                        </TableCell>\n                    </TableRow>\n                </TableBody>\n            </Table >\n            <Dialog\n                fullWidth maxWidth=\"sm\"\n                open={openDetailImage}\n                onClose={closeDatailImage}\n                TransitionComponent={Transition}>\n                <DialogContent>\n                    <ImageDetail url={url} />\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={closeDatailImage} color=\"primary\">\n                        Cerrar\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n        </Fragment >\n    )\n}\n\nexport default AroundInfo","import React, { useState, useEffect, Fragment } from 'react'\nimport config from './../../../config';\n\nimport {\n    Table,\n    TableBody,\n    TableRow,\n    TableCell,\n    Button\n} from '@material-ui/core';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AliceCarousel from 'react-alice-carousel';\nimport 'react-alice-carousel/lib/alice-carousel.css';\nimport Slide from '@material-ui/core/Slide';\nimport ImageDetail from './../ImageDetail';\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n})\nvar init = false;\nconst OutletSampling = props => {\n\n    console.log(props.project);\n    const [cellsOutletSampling, setCellOutletSampling] = useState([]);\n    const [url, setUrl] = useState('');\n    const [didMount, setDidMount] = useState(false);\n    const [openDetailImage, setOpenDetailImage] = useState(false);\n\n\n    useEffect(() => {\n\n        const newCellsOutletSampling = props.project.outletSampling.map(outletSampling => {\n            const newPhotos = outletSampling.photos.map(photo => {\n                console.log(photo)\n                if (!photo.props) {\n                    return <div className=\"item\" data-value=\"1\">\n                        <img\n                            src={`${config.urlImages}${photo.url}`}\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\n                        />\n                    </div>\n                } else {\n                    return photo;\n                }\n            });\n            outletSampling.photos = newPhotos;\n\n            return outletSampling;\n        });\n        setCellOutletSampling(newCellsOutletSampling);\n\n    }, []);\n\n    const showImages = url => _ => {\n        setUrl(url);\n        console.log('Url', url)\n        setOpenDetailImage(true);\n    }\n    const closeDatailImage = () => {\n        setOpenDetailImage(false)\n    }\n\n    return (\n        <Fragment>\n            <div className='project__info'>\n                <div className='project__wrapper'>\n\n                    <div className='project__board__wrapper'>\n                        <Table>\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell>\n                                        <div className='title_action'>MUESTREO DE TOMAS</div>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n\n                                    <TableCell>\n                                        <div className='board__item__wrapper'>\n\n                                            {\n                                                cellsOutletSampling.map((item, i) => {\n                                                    return (\n                                                        <div className=\"card\" key={i}>\n                                                            <div className='card_title'>{item.item.title}</div>\n                                                            {\n                                                                item.item.letterOne !== '' ?\n                                                                    <div className='card_colors'>\n                                                                        <div className='card_color_left' style={{ backgroundColor: `#FCF338` }}>{item.item.colorOne}</div>\n                                                                        <div className='card_color_right'></div>\n                                                                    </div>\n                                                                    : ''\n                                                            }\n\n                                                            <div className='card_body'>\n                                                                <div className=\"slide-container\">\n\n                                                                    <AliceCarousel\n                                                                        autoPlay\n                                                                        infinite={true}\n                                                                        mouseTracking\n                                                                        items={item.photos}\n                                                                        disableButtonsControls={true}\n                                                                        controlsStrategy=\"alternate\"\n                                                                        animationDuration={1000}\n                                                                        autoPlayInterval={Math.random() * (3000 - 500) + 500}\n                                                                    />\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                })\n                                            }\n\n                                        </div>\n\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table >\n                    </div>\n                </div>\n            </div>\n            <Dialog\n                fullWidth maxWidth=\"sm\"\n                open={openDetailImage}\n                onClose={closeDatailImage}\n                TransitionComponent={Transition}>\n                <DialogContent>\n                    <ImageDetail url={url} />\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={closeDatailImage} color=\"primary\">\n                        Cerrar\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n        </Fragment >\n    )\n}\n\nexport default OutletSampling","import React, { useState, useEffect, Fragment } from 'react'\nimport { emphasize, makeStyles } from '@material-ui/core/styles';\n\nimport './projects.css';\nimport 'react-slideshow-image/dist/styles.css';\n\n\n\n\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport PersonPinIcon from '@material-ui/icons/PersonPin';\nimport HelpIcon from '@material-ui/icons/Help';\nimport ShoppingBasket from '@material-ui/icons/ShoppingBasket';\nimport ThumbDown from '@material-ui/icons/ThumbDown';\nimport ThumbUp from '@material-ui/icons/ThumbUp';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nimport ProjectInfo from './pages/ProjectInfo'\nimport BoardsInfo from './pages/BoardsInfo'\nimport AroundInfo from './pages/AroundInfo'\nimport OutletSamplingInfo from './pages/OutletSamplingInfo'\nimport { BsClipboard } from 'react-icons/bs'\nimport { AiOutlinePicture } from 'react-icons/ai'\nimport { FiImage } from 'react-icons/fi'\nimport { BsInfoCircle } from 'react-icons/bs'\n\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-force-tabpanel-${index}`}\n      aria-labelledby={`scrollable-force-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <div>{children}</div>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-force-tab-${index}`,\n    'aria-controls': `scrollable-force-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    height: 250,\n    minWidth: 290\n  },\n  input: {\n    display: \"flex\",\n    padding: 0,\n    height: \"auto\"\n  },\n  valueContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    flex: 1,\n    alignItems: \"center\",\n    overflow: \"hidden\"\n  },\n  chip: {\n    margin: theme.spacing(0.5, 0.25)\n  },\n  chipFocused: {\n    backgroundColor: emphasize(\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[300]\n        : theme.palette.grey[700],\n      0.08\n    )\n  },\n  noOptionsMessage: {\n    padding: theme.spacing(1, 2)\n  },\n  singleValue: {\n    fontSize: 16\n  },\n  placeholder: {\n    position: \"absolute\",\n    left: 2,\n    bottom: 6,\n    fontSize: 16\n  },\n\n  divider: {\n    height: theme.spacing(2)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    color: theme.palette.text.secondary,\n\n  },\n  button:\n  {\n    margin: theme.spacing(1),\n  },\n  fab:\n  {\n    marginTop: -2,\n    float: \"right\"\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n  },\n}))\n\n\n\nconst ProjectDetail = props => {\n\n  const [project, setProject] = useState(null);\n\n\n\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (_, newValue) => {\n    setValue(newValue);\n  };\n\n  useEffect(() => {\n    setProject(props.project);\n  }, [project, props.project]);\n\n\n\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          variant=\"scrollable\"\n          scrollButtons=\"on\"\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          aria-label=\"scrollable force tabs example\"\n        >\n          <Tab label=\"Información del proyecto\" icon={<BsInfoCircle className='icon' />} {...a11yProps(0)} />\n          <Tab label=\"Tableros\" icon={<BsClipboard className='icon' />} {...a11yProps(1)} />\n          <Tab label=\"Fotos del entorno\" icon={<AiOutlinePicture className='icon' />} {...a11yProps(2)} />\n          <Tab label=\"Muestreo de tomas\" icon={<FiImage className='icon' />} {...a11yProps(3)} />\n\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <ProjectInfo project={project} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <BoardsInfo project={project} />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <AroundInfo project={project} />\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        <OutletSamplingInfo project={project} />\n      </TabPanel>\n\n    </div>\n  );\n}\n\nexport default ProjectDetail","import React, { Fragment, useState, useEffect } from 'react';\nimport { emphasize, makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport clsx from 'clsx';\nimport { Button } from '@material-ui/core';\nimport PropTypes from \"prop-types\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { updateUser, listCustomers, createProject } from '../../api/api';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    height: 250,\n    minWidth: 290\n  },\n  input: {\n    display: \"flex\",\n    padding: 0,\n    height: \"auto\"\n  },\n  valueContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    flex: 1,\n    alignItems: \"center\",\n    overflow: \"hidden\"\n  },\n  chip: {\n    margin: theme.spacing(0.5, 0.25)\n  },\n  chipFocused: {\n    backgroundColor: emphasize(\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[300]\n        : theme.palette.grey[700],\n      0.08\n    )\n  },\n  noOptionsMessage: {\n    padding: theme.spacing(1, 2)\n  },\n  singleValue: {\n    fontSize: 16\n  },\n  placeholder: {\n    position: \"absolute\",\n    left: 2,\n    bottom: 6,\n    fontSize: 16\n  },\n\n  divider: {\n    height: theme.spacing(2)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    color: theme.palette.text.secondary,\n\n  },\n  button:\n  {\n    margin: theme.spacing(1),\n  },\n  fab:\n  {\n    marginTop: -2,\n    float: \"right\"\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n  },\n}))\n\nfunction inputComponent({ inputRef, ...props }) {\n  return <div ref={inputRef} {...props} />\n}\n\ninputComponent.propTypes = {\n  inputRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({\n      current: PropTypes.any.isRequired\n    })\n  ])\n}\nconst ProjectForm = props => {\n\n  useEffect(() => {\n    console.log(props)\n\n    listCustomers().then(response => {\n      setCustomers(response.customers);\n    });\n    if (props.person) {\n\n      // setName(props.person.name);\n      // setDocumentNumber(props.person.document_number);\n      // setUsername(props.person.username);\n      // setRole(props.person.role);\n    }\n  }, [])\n\n  const [type, setType] = useState('')\n  const [disabled, setDisabled] = useState(false)\n\n  const [file, setFile] = useState({})\n  const classes = useStyles()\n\n  const [customers, setCustomers] = useState([]);\n  const [customer, setCustomer] = useState();\n  const [description, setDescription] = useState('');\n  const [documentNumber, setDocumentNumber] = useState('');\n  const [username, setUsername] = useState('');\n  const [repeatPassword, setRepeatPassword] = useState('');\n  const [role, setRole] = useState(null);\n\n  const [errorDescription, setErrorDescription] = useState(false)\n  const [errorTextDescription, setErrorTextDescription] = useState('')\n\n  const [errorDocument, setErrorDocument] = useState(false)\n  const [errorTextDocument, setErrorTextDocument] = useState('')\n\n  const onChangeDescription = e => {\n    setDescription(e.target.value);\n    validateDescription(e.target.value);\n  }\n\n  const validateForm = () => {\n    let errors = 0\n    errors += validateDescription()\n    // errors += validatePrice()\n    // errors += validateQuantity()\n    return errors\n  }\n\n  const validateDescription = (value) => {\n    let text = value !== undefined ? value : description\n\n    if (text == null || text.toString().trim() === '') {\n      setErrorDescription(true)\n      setErrorTextDescription('Este campo es requerido')\n      return 1\n    }\n    else {\n      setErrorDescription(false)\n      setErrorTextDescription('')\n      return 0\n    }\n  }\n\n  const validateDocument = (value) => {\n    let text = value !== undefined ? value : documentNumber\n\n    if (text == null || text.toString().trim() === '') {\n      setErrorDocument(true)\n      setErrorTextDocument('Este campo es requerido')\n      return 1\n    }\n    else {\n      setErrorDocument(false)\n      setErrorTextDocument('')\n      return 0\n    }\n  }\n\n  const onChangeType = e => {\n    setType(e.target.value)\n  }\n\n  const onSubmitPerson = _ => {\n\n    let errores = validateForm()\n    // errores += validateType();\n\n\n    if (errores === 0) {\n\n      let data = {\n        'name': description,\n        'type': type,\n        'customer': customer._id,\n        'observation': ''\n      }\n\n\n      if (!props.person) {\n        createProject(data).then(response => {\n          console.log('response', response);\n          if (response.status == 'success') {\n            toast.info('Proyecto registrado exitosamente', {\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            props.onClose();\n            props.onRefreshProjects();\n          } else {\n            toast.error('Ocurrió un error al registrar el proyecto', {\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n          }\n\n        });\n\n      } else {\n\n        updateUser(data).then(response => {\n          console.log('response', response);\n          if (response.status == 'success') {\n            toast.info('Proyecto registrado exitosamente', {\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n          } else {\n            toast.error('Ocurrió un error al registrar el proyecto', {\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n          }\n\n        });\n      }\n    } else {\n      toast.error('🦄 Wow so easy!', {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  }\n\n\n  return (\n    <Fragment>\n      <ToastContainer />\n      <Container maxWidth=\"md\">\n\n        <Paper className={classes.paper}>\n          <form encType={'multipart/form-data'}\n            onSubmit={e => {\n              e.preventDefault()\n              onSubmitPerson()\n            }} >\n            <Grid container spacing={3}>\n\n              <Grid item xs={12} sm={4}>\n                <TextField\n                  fullWidth\n                  select\n                  className={clsx(classes.margin, classes.textField)}\n                  variant=\"outlined\"\n                  label=\"Tipo\"\n                  margin=\"dense\"\n                  value={type}\n                  onChange={onChangeType}\n                >\n                  <MenuItem key={\"tri\"} value={\"tri\"}>Trifásico</MenuItem>\n                  <MenuItem key={\"mono\"} value={\"mono\"}>Monofásico</MenuItem>\n                </TextField>\n              </Grid>\n\n              <Grid item xs={12} sm={8}>\n                <Autocomplete\n                  fullWidth\n                  size=\"small\"\n                  getOptionLabel={\n                    (option) => {\n                      return `${option.name.toString().toUpperCase()} `\n                    }\n                  }\n                  filterOptions={(x) => x}\n                  options={customers}\n                  autoComplete\n                  getOptionSelected={(option, value) => option === value}\n                  onChange={(_, value) => {\n                    setCustomer(value);\n                  }}\n                  onInputChange={(_, newInputValue) => {\n                    console.log('newInputValue', newInputValue)\n                    if (newInputValue.toString().trim().length > 0) {\n                      let data = {\n                        search: newInputValue.toString().trim()\n                      }\n                      listCustomers(data).then(response => {\n                        setCustomers(response.customers);\n                      })\n                    }\n                  }}\n                  renderInput={(params) => (\n                    <TextField {...params} label=\"Cliente\" variant=\"outlined\" margin=\"dense\" />\n                  )}\n                  renderTags={(tagValue, getTagProps) =>\n                    tagValue.map((option, index) => (\n                      <Chip\n                        label={option.name}\n                        {...getTagProps({ index })}\n                        disabled={customers.indexOf(option) !== -1}\n                      />\n                    ))\n                  }\n                  renderOption={(option) => {\n\n                    return (\n                      <Grid container alignItems=\"center\">\n                        <Grid item xs>\n                          <Typography >{`${option.name.toString().toUpperCase()}`}</Typography>\n                        </Grid>\n                      </Grid>\n                    );\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={12}>\n                <TextField\n                  fullWidth\n                  error={errorDescription}\n                  helperText={errorTextDescription}\n                  margin=\"dense\"\n                  autoComplete='off'\n                  id=\"outlined-simple-start-adornment\"\n                  className={clsx(classes.margin, classes.textField)}\n                  variant=\"outlined\"\n                  label=\"Descripción\"\n                  value={description}\n                  onChange={onChangeDescription} />\n              </Grid>\n\n\n\n\n              <Grid item xs={2} sm={3}>\n                <Button disabled={disabled} type=\"submit\" variant=\"contained\" color='primary'>\n                  {props.person ? \"Actualizar\" : \"Guardar\"}\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Paper>\n\n      </Container>\n    </Fragment>\n  )\n}\n\nexport default ProjectForm","import React, { useState, useEffect, Fragment } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\n\n\nimport ProjectDetail from './ProjectDetail';\nimport ProjectForm from './ProjectForm';\nimport { Button } from '@material-ui/core';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Slide from '@material-ui/core/Slide';\n\nimport TablePagination from '@material-ui/core/TablePagination';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { listProjects, deleteProject, onSaveObservations, onSendReportProject } from '../../api/api';\nimport Chip from '@material-ui/core/Chip';\nimport AddIcon from '@material-ui/icons/Add';\nimport { AiOutlineComment } from 'react-icons/ai';\nimport { FiSend, FiSearch } from 'react-icons/fi';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nimport Fab from '@material-ui/core/Fab';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './projects.css';\nimport Swal from 'sweetalert2'\nimport TableContainer from '@material-ui/core/TableContainer';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    iconWidth: {\n        width: 10\n    },\n    paper: {\n        padding: theme.spacing(2),\n        marginTop: 10,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    input: {\n        display: 'none',\n    },\n    fab: {\n        margin: theme.spacing(1),\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(1),\n    },\n    icon: {\n        marginRight: theme.spacing(1),\n        color: 'black'\n    },\n}))\n\nconst styles = (theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    }\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n})\n\nconst Projects = _ => {\n\n    useEffect(() => {\n        listProjects().then(response => {\n            console.log('*****************************');\n            console.log(response);\n            setProjects(response.projects);\n            setTotalProjects(response.count);\n        });\n    }, []);\n\n    const classes = useStyles()\n\n    const [projects, setProjects] = useState([])\n    const [project, setProject] = useState(null)\n    const [totalProjects, setTotalProjects] = useState(0)\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(3);\n\n\n    const [open, setOpen] = useState(false);\n    const [openDetailProject, setOpenDetailProject] = useState(false);\n    const [openProjectForm, setOpenProjectForm] = useState(false);\n\n    const [openObservations, setOpenObservations] = useState(false);\n    const [observations, setObservations] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [loadingReport, setLoadingReport] = useState(false);\n\n    const handleChangePage = (_, newPage) => {\n        setPage(newPage);\n        // getPersons({ variables: { start: newPage, end: rowsPerPage } })\n    }\n\n    const handleChangeRowsPerPage = event => {\n\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n        // getPersons({ variables: { start: 0, end: event.target.value } })\n    }\n\n    const onCloseDeleteProject = () => {\n        setOpen(false);\n    }\n\n    const onRefreshProjects = () => {\n        listProjects().then(response => {\n            setProjects(response.projects);\n            setTotalProjects(response.count);\n            setRowsPerPage(1)\n        });\n    }\n\n    const onDeleteProject = id => {\n        setOpen(false);\n\n        deleteProject(id).then(response => {\n            if (response.status === 'success') {\n                toast.success(response.message, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n                const newProjects = projects.map((currentProject) => {\n                    if (id !== currentProject._id)\n                        return currentProject\n\n                    currentProject.status = \"deleted\";\n                    return currentProject\n                })\n                setProjects(newProjects)\n            } else {\n                toast.error(response.message, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            }\n        }).catch(e => {\n\n            toast.error('Ocurrió un error al eliminar el proyecto', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n            });\n        })\n\n    }\n\n    const onDetailProject = project => () => {\n        setProject(project)\n        setOpenDetailProject(true)\n    }\n\n    const onOpenObservation = project => () => {\n        setOpenObservations(true);\n        setProject(project);\n    }\n\n    const closeDatailProject = () => {\n        setOpenDetailProject(false)\n    }\n\n    const onOpenProjectForm = () => {\n        setOpenProjectForm(true)\n    }\n\n    const onCloseProjectForm = () => {\n        setOpenProjectForm(false)\n    }\n\n    const onCloseObservations = () => {\n        setOpenObservations(false);\n    }\n\n    const saveObservations = () => {\n        console.log(observations);\n        console.log(project);\n        setLoading(true);\n        let data = {\n            observations,\n            id: project._id\n        }\n        onSaveObservations(data).then(response => {\n            setLoading(false);\n            setOpenObservations(false);\n\n            if (response.status === 'success') {\n                Swal.fire({\n                    icon: 'success',\n                    title: 'Mensaje',\n                    text: response.message,\n                    showConfirmButton: false,\n                    timer: 3000\n                })\n            } else {\n                Swal.fire({\n                    icon: 'error',\n                    title: 'Error',\n                    text: response.message,\n                    showConfirmButton: false,\n                    timer: 3000\n                })\n            }\n\n        }).catch(e => {\n            console.log(e);\n            setLoading(false);\n\n        })\n\n    }\n\n    const sendReportProject = id => () => {\n        console.log(id);\n\n        const newProjects = projects.map(currentProject => {\n            if (currentProject._id === id) {\n                currentProject.loading = true;\n            } else {\n                currentProject.loading = false;\n            }\n\n            return currentProject;\n        });\n\n        setProjects(newProjects);\n\n        onSendReportProject(id).then(response => {\n            const newProjects = projects.map(currentProject => {\n                currentProject.loading = false;\n                return currentProject;\n            });\n            setProjects(newProjects);\n\n            if (response.status === 'success') {\n                Swal.fire({\n                    icon: 'success',\n                    title: 'Mensaje',\n                    text: response.message,\n                    showConfirmButton: false,\n                    timer: 3000\n                })\n            } else {\n                Swal.fire({\n                    icon: 'error',\n                    title: 'Error',\n                    text: response.message,\n                    showConfirmButton: false,\n                    timer: 3000\n                })\n            }\n\n        }).catch(e => {\n            console.log(e);\n            setLoading(false);\n\n        })\n\n    }\n\n    const onChangeDescription = e => {\n        setObservations(e.target.value);\n\n    }\n\n\n\n    return (\n        <Fragment>\n            <ToastContainer />\n            <Paper className={classes.paper}>\n                <Fab onClick={onOpenProjectForm} variant=\"extended\" color=\"primary\" size=\"small\" className={classes.margin}>\n                    <AddIcon className={classes.extendedIcon} />\n                    Nuevo proyecto\n                </Fab>\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>DESCRIPCIÓN</TableCell>\n                                <TableCell>CLIENTE</TableCell>\n                                <TableCell>TABLEROS</TableCell>\n                                <TableCell>DETALLE</TableCell>\n                                <TableCell>ENVIAR INFORME</TableCell>\n                                <TableCell>OBSERVACIONES</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                projects.map(project => {\n                                    return (\n                                        <TableRow key={project._id}>\n                                            <TableCell>{project.name} </TableCell>\n                                            <TableCell>{project.customer.name}</TableCell>\n                                            <TableCell className={classes.iconWidth}>\n                                                <Chip size='small' label={project.boards.length} variant=\"outlined\" />\n                                            </TableCell>\n                                            <TableCell className={classes.iconWidth}>\n                                                <FiSearch className={'icon'} onClick={onDetailProject(project)} />\n                                            </TableCell>\n                                            <TableCell className={classes.iconWidth}>\n                                                {\n                                                    project.loading ?\n                                                        <div className='circularProgress'>\n                                                            <CircularProgress size={16} />\n                                                        </div> :\n                                                        <FiSend className={'icon'} onClick={sendReportProject(project._id)} />\n                                                }\n                                            </TableCell>\n                                            <TableCell className={classes.iconWidth}>\n                                                <AiOutlineComment className={'icon'} onClick={onOpenObservation(project)} />\n                                            </TableCell>\n                                        </TableRow>\n                                    )\n                                })\n                            }\n                        </TableBody>\n                    </Table>\n\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[1, 25, 100]}\n                    component=\"div\"\n                    count={totalProjects}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n\n            <Dialog\n                open={open}\n                onClose={onCloseDeleteProject}>\n                <DialogTitle >\n                    Alerta\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Esta seguro de eliminar esta atención?\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={onCloseDeleteProject} color=\"primary\">\n                        NO\n                    </Button>\n                    <Button onClick={onDeleteProject} color=\"primary\">\n                        SI\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog maxWidth=\"md\" open={openProjectForm} onClose={onCloseProjectForm} TransitionComponent={Transition}>\n                <DialogContent>\n                    <ProjectForm onRefreshProjects={onRefreshProjects} onClose={onCloseProjectForm} project={project} />\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={onCloseProjectForm} color=\"primary\">\n                        Cerrar\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                fullWidth\n                fullScreen={true}\n                open={openDetailProject}\n                onClose={closeDatailProject}\n                TransitionComponent={Transition}>\n                <DialogContent>\n                    <ProjectDetail project={project} />\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={closeDatailProject} color=\"primary\">\n                        Cerrar\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n\n\n            <Dialog\n                fullWidth={true}\n                maxWidth={'sm'}\n                open={openObservations}\n                onClose={onCloseObservations}>\n                <DialogTitle>\n                    Observaciones\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <TextField\n                            autoComplete='off'\n                            multiline\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"Observaciones\"\n                            onChange={onChangeDescription}\n                            fullWidth\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n\n                    {\n                        loading ?\n                            <div className='circularProgress'>\n                                <CircularProgress />\n                            </div> :\n\n                            <Fragment>\n                                <Button autoFocus onClick={onCloseObservations} color=\"primary\">\n                                    Cancelar\n                                </Button>\n                                <Button onClick={saveObservations} color=\"primary\">\n                                    Guardar\n                                </Button>\n                            </Fragment>\n                    }\n                </DialogActions>\n            </Dialog>\n\n        </Fragment>)\n}\n\nexport default Projects"],"sourceRoot":""}