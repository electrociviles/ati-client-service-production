{"version":3,"sources":["../node_modules/@material-ui/icons/Restore.js","views/Person/PersonDetail.js","views/Person/PersonToCustomer.js","views/Person/PersonForm.js","views/Person/Person.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","useStyles","makeStyles","theme","root","flexGrow","height","minWidth","input","display","padding","valueContainer","flexWrap","flex","alignItems","overflow","chip","margin","spacing","chipFocused","backgroundColor","emphasize","palette","type","grey","noOptionsMessage","singleValue","fontSize","placeholder","position","left","bottom","divider","paper","color","text","secondary","button","fab","marginTop","float","extendedIcon","marginRight","formControl","PersonDetail","props","classes","Card","CardHeader","title","Divider","CardContent","className","content","Table","TableBody","TableRow","TableCell","person","names","selected","last_name","documentType","documentNumber","checkDigit","email","address","phone","PersonToCustomer","useEffect","setPerson","listCustomers","then","response","setCustomers","customers","useState","customer","setCustomer","errorCustomer","setErrorCustomer","errorTextCustomer","setErrorTextCustomer","validateCustomer","undefined","toString","trim","onSubmit","_","errors","validateForm","data","_id","addPersonToCustomer","console","log","status","onClose","toast","info","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","error","Container","maxWidth","Paper","encType","e","preventDefault","Grid","container","item","xs","sm","Autocomplete","fullWidth","size","getOptionLabel","option","name","toUpperCase","filterOptions","x","options","autoComplete","getOptionSelected","onChange","onInputChange","newInputValue","length","search","renderInput","params","TextField","helperText","label","variant","renderTags","tagValue","getTagProps","map","index","Chip","disabled","indexOf","renderOption","Typography","Button","PersonForm","getRoles","setRoles","roles","setName","setDocumentNumber","document_number","setUsername","username","setRole","role","visibleCustomer","setVisibleCustomer","visibleCenterOfAttention","setVisibleCenterOfAttention","file","setFile","centerOfAttentions","setCenterOfAttentions","setEmail","setPhone","password","setPassword","centerOfAttention","setCenterOfAttention","repeatPassword","setRepeatPassword","errorName","setErrorName","errorTextName","setErrorTextName","errorEmail","setErrorEmail","errorTextEmail","setErrorTextEmail","errorDocument","setErrorDocument","errorTextDocument","setErrorTextDocument","errorCenterOfAttention","setErrorCenterOfAttention","errorTextCenterOfAttention","setErrorTextCenterOfAttention","validateName","validateEmail","regex","RegExp","test","validateDocument","onSubmitPerson","errores","validateCenterOfAttention","formData","FormData","append","updateUser","createUser","onCloseModal","message","tag","enableDisableFields","id","clsx","textField","target","listCenterOfAttention","centersOfAttention","open","filesLimit","dropzoneText","acceptedFiles","iconWidth","width","icon","DialogTitle","withStyles","closeButton","right","top","children","other","disableTypography","IconButton","aria-label","onClick","Transition","React","forwardRef","ref","Slide","direction","Person","start","end","rowsPerPage","paginate","listUsers","setPersons","users","setTotalPersons","count","persons","totalPersons","page","setPage","setRowsPerPage","setOpen","openRestorePerson","setOpenRestorePerson","openDetailPerson","setOpenDetailPerson","openEditPerson","setOpenEditPerson","openCreatePerson","setOpenCreatePerson","openPersonToCustomer","setOpenPersonToCustomer","setPersonSelected","onUpdateUsers","onOpenRestorePerson","user","onAddToCustomer","onCloseDeletePerson","onDetailPerson","closeDetailPerson","onEditPerson","onCloseEditPerson","onCloseRestorePerson","onClosePersonToCustomer","onCloseCreatePerson","Fab","TableHead","colSpan","key","Tooltip","placement","TablePagination","rowsPerPageOptions","component","onChangePage","event","newPage","onChangeRowsPerPage","Dialog","aria-labelledby","style","cursor","DialogContent","DialogContentText","DialogActions","autoFocus","deleteUser","success","newPersons","currentPerson","estado","catch","restoreUser","TransitionComponent","handleClose","modal"],"mappings":"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","file":"static/js/20.9dcc9ccc.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z\"\n}), 'Restore');\n\nexports.default = _default;","import React, { useState } from 'react'\r\nimport { emphasize, makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n    minWidth: 290\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    padding: 0,\r\n    height: \"auto\"\r\n  },\r\n  valueContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[300]\r\n        : theme.palette.grey[700],\r\n      0.08\r\n    )\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  singleValue: {\r\n    fontSize: 16\r\n  },\r\n  placeholder: {\r\n    position: \"absolute\",\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16\r\n  },\r\n\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    color: theme.palette.text.secondary,\r\n\r\n  },\r\n  button:\r\n  {\r\n    margin: theme.spacing(1),\r\n  },\r\n  fab:\r\n  {\r\n    marginTop: -2,\r\n    float: \"right\"\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst PersonDetail = props => {\r\n\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"Detalle Usuario\" />\r\n      <Divider />\r\n      <CardContent className={classes.content}>\r\n        <Table>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>Nombres</TableCell>\r\n              <TableCell>{props.person.names}</TableCell>\r\n            </TableRow>\r\n            <TableRow selected>\r\n              <TableCell>Apellidos</TableCell>\r\n              <TableCell>{props.person.last_name}</TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>Tipo de documento</TableCell>\r\n              <TableCell>{props.person.documentType ? props.person.documentType.documentType : ''}</TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow selected>\r\n              <TableCell>Número de documento</TableCell>\r\n              <TableCell>{props.person.documentNumber} {props.person.checkDigit >= 0 ? props.person.checkDigit : ''}</TableCell>\r\n            </TableRow>\r\n\r\n\r\n            <TableRow>\r\n              <TableCell>Correo electrónico</TableCell>\r\n              <TableCell>{props.person.email}</TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow selected>\r\n              <TableCell>Dirección</TableCell>\r\n              <TableCell>{props.person.address}</TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow >\r\n              <TableCell>Teléfono</TableCell>\r\n              <TableCell>{props.person.phone}</TableCell>\r\n            </TableRow>\r\n\r\n          </TableBody>\r\n        </Table>\r\n      </CardContent>\r\n\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default PersonDetail","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { emphasize, makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Container from '@material-ui/core/Container'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport clsx from 'clsx'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { Button } from '@material-ui/core'\r\nimport { DropzoneArea } from 'material-ui-dropzone'\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { listCustomers, addPersonToCustomer } from '../../api/api';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n    minWidth: 290\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    padding: 0,\r\n    height: \"auto\"\r\n  },\r\n  valueContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[300]\r\n        : theme.palette.grey[700],\r\n      0.08\r\n    )\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  singleValue: {\r\n    fontSize: 16\r\n  },\r\n  placeholder: {\r\n    position: \"absolute\",\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16\r\n  },\r\n\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    color: theme.palette.text.secondary,\r\n\r\n  },\r\n  button:\r\n  {\r\n    margin: theme.spacing(1),\r\n  },\r\n  fab:\r\n  {\r\n    marginTop: -2,\r\n    float: \"right\"\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.shape({\r\n      current: PropTypes.any.isRequired\r\n    })\r\n  ])\r\n}\r\nconst PersonToCustomer = props => {\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    setPerson(props.person);\r\n    listCustomers().then(response => {\r\n      setCustomers(response.customers);\r\n    })\r\n\r\n  }, [])\r\n\r\n  const classes = useStyles()\r\n\r\n  const [person, setPerson] = useState(null);\r\n  const [customers, setCustomers] = useState([]);\r\n  const [customer, setCustomer] = useState(\"\");\r\n  const [errorCustomer, setErrorCustomer] = useState(false);\r\n  const [errorTextCustomer, setErrorTextCustomer] = useState('');\r\n\r\n\r\n  const validateForm = () => {\r\n    let errors = 0\r\n    errors += validateCustomer()\r\n    return errors\r\n  }\r\n\r\n  const validateCustomer = (value) => {\r\n    let text = value !== undefined ? value : customer\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorCustomer(true)\r\n      setErrorTextCustomer('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorCustomer(false)\r\n      setErrorTextCustomer('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const onSubmit = _ => {\r\n\r\n    let errores = validateForm()\r\n\r\n    if (errores === 0) {\r\n      let data = {\r\n        customer: customer._id,\r\n        person: person._id\r\n      }\r\n\r\n      addPersonToCustomer(data).then(response => {\r\n        console.log('response', response);\r\n        if (response.status == 'success') {\r\n          props.onClose()\r\n          toast.info('Usuario agregado al cliente exitosamente', {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        } else {\r\n          toast.error('Ocurrió un error al agregar el usuario', {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        }\r\n\r\n      });\r\n\r\n    } else {\r\n      toast.error('Faltan campos obligatorios por llenar', {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <ToastContainer />\r\n      <Container maxWidth=\"md\">\r\n\r\n        <Paper className={classes.paper}>\r\n          <form encType={'multipart/form-data'}\r\n            onSubmit={e => {\r\n              e.preventDefault()\r\n              onSubmit()\r\n            }} >\r\n            <Grid container spacing={3}>\r\n\r\n              <Grid item xs={12} sm={12}>\r\n                <Autocomplete\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  getOptionLabel={\r\n                    (option) => {\r\n                      return `${option.name.toString().toUpperCase()} `\r\n                    }\r\n                  }\r\n                  filterOptions={(x) => x}\r\n                  options={customers}\r\n                  autoComplete\r\n                  getOptionSelected={(option, value) => option === value}\r\n                  onChange={(_, value) => {\r\n                    setCustomer(value);\r\n                  }}\r\n                  onInputChange={(_, newInputValue) => {\r\n                    if (newInputValue.toString().trim().length > 0) {\r\n                      let data = {\r\n                        search: newInputValue.toString().trim()\r\n                      }\r\n                      listCustomers(data).then(response => {\r\n                        setCustomers(response.customers);\r\n                      })\r\n                    }\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      error={errorCustomer}\r\n                      helperText={errorTextCustomer}\r\n                      {...params}\r\n                      label=\"Cliente\"\r\n                      variant=\"outlined\"\r\n                      margin=\"dense\" />\r\n                  )}\r\n                  renderTags={(tagValue, getTagProps) =>\r\n                    tagValue.map((option, index) => (\r\n                      <Chip\r\n                        label={option.name}\r\n                        disabled={customers.indexOf(option) !== -1}\r\n                      />\r\n                    ))\r\n                  }\r\n                  renderOption={(option) => {\r\n                    return (\r\n                      <Grid container alignItems=\"center\">\r\n                        <Grid item xs>\r\n                          <Typography >{`${option.name.toString().toUpperCase()}`}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                    );\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n\r\n\r\n              <Grid item xs={2} sm={3}>\r\n                <Button type=\"submit\" variant=\"contained\" color='primary'>Agregar</Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </Paper>\r\n\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PersonToCustomer;","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { emphasize, makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Container from '@material-ui/core/Container'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport clsx from 'clsx'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { Button } from '@material-ui/core'\r\nimport { DropzoneArea } from 'material-ui-dropzone'\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { createUser, updateUser, getRoles, listCenterOfAttention, listCustomers } from '../../api/api';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n    minWidth: 290\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    padding: 0,\r\n    height: \"auto\"\r\n  },\r\n  valueContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[300]\r\n        : theme.palette.grey[700],\r\n      0.08\r\n    )\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  singleValue: {\r\n    fontSize: 16\r\n  },\r\n  placeholder: {\r\n    position: \"absolute\",\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16\r\n  },\r\n\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    color: theme.palette.text.secondary,\r\n\r\n  },\r\n  button:\r\n  {\r\n    margin: theme.spacing(1),\r\n  },\r\n  fab:\r\n  {\r\n    marginTop: -2,\r\n    float: \"right\"\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.shape({\r\n      current: PropTypes.any.isRequired\r\n    })\r\n  ])\r\n}\r\nconst PersonForm = props => {\r\n\r\n  useEffect(() => {\r\n    console.log(props)\r\n\r\n    getRoles().then(response => {\r\n      setRoles(response.roles);\r\n    })\r\n    listCustomers().then(response => {\r\n      setCustomers(response.customers);\r\n    })\r\n\r\n    if (props.person) {\r\n\r\n      setName(props.person.name);\r\n      setDocumentNumber(props.person.document_number);\r\n      setUsername(props.person.username);\r\n      setRole(props.person.role);\r\n    }\r\n  }, [])\r\n\r\n  const [visibleCustomer, setVisibleCustomer] = useState(false)\r\n  const [visibleCenterOfAttention, setVisibleCenterOfAttention] = useState(false)\r\n\r\n  const [file, setFile] = useState({})\r\n  const classes = useStyles()\r\n\r\n  const [centerOfAttentions, setCenterOfAttentions] = useState([]);\r\n  const [customers, setCustomers] = useState([]);\r\n\r\n\r\n  const [roles, setRoles] = useState([]);\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [documentNumber, setDocumentNumber] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [customer, setCustomer] = useState('');\r\n  const [centerOfAttention, setCenterOfAttention] = useState('');\r\n  const [repeatPassword, setRepeatPassword] = useState('');\r\n  const [role, setRole] = useState(null);\r\n\r\n  const [errorName, setErrorName] = useState(false)\r\n  const [errorTextName, setErrorTextName] = useState('')\r\n\r\n  const [errorEmail, setErrorEmail] = useState(false)\r\n  const [errorTextEmail, setErrorTextEmail] = useState('')\r\n\r\n  const [errorDocument, setErrorDocument] = useState(false)\r\n  const [errorTextDocument, setErrorTextDocument] = useState('')\r\n\r\n  const [errorCustomer, setErrorCustomer] = useState(false)\r\n  const [errorTextCustomer, setErrorTextCustomer] = useState('')\r\n\r\n  const [errorCenterOfAttention, setErrorCenterOfAttention] = useState(false)\r\n  const [errorTextCenterOfAttention, setErrorTextCenterOfAttention] = useState('')\r\n\r\n  const handlePicture = file => {\r\n    setFile(file[0])\r\n  }\r\n  const onChangeName = e => {\r\n    setName(e.target.value);\r\n    validateName(e.target.value);\r\n  }\r\n  const onChangeEmail = e => {\r\n    setEmail(e.target.value);\r\n    validateEmail(e.target.value);\r\n  }\r\n  const onChangePhone = e => {\r\n    setPhone(e.target.value);\r\n  }\r\n  const onChangeDocumentNumber = e => {\r\n    setDocumentNumber(e.target.value);\r\n    validateDocument(e.target.value);\r\n  }\r\n  const onChangeUserame = e => {\r\n    setUsername(e.target.value)\r\n  }\r\n  const onChangePassword = e => {\r\n    setPassword(e.target.value)\r\n  }\r\n  const onChangeRepeatPassword = e => {\r\n    setRepeatPassword(e.target.value)\r\n  }\r\n  const validateForm = () => {\r\n    let errors = 0\r\n    errors += validateName()\r\n    // errors += validatePrice()\r\n    // errors += validateQuantity()\r\n    return errors\r\n  }\r\n  const validateName = (value) => {\r\n    let text = value !== undefined ? value : name\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorName(true)\r\n      setErrorTextName('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorName(false)\r\n      setErrorTextName('')\r\n      return 0\r\n    }\r\n  }\r\n  const validateEmail = (value) => {\r\n    let regex = new RegExp('[a-z0-9]+@[a-z]+\\.[a-z]{2,3}');\r\n\r\n    let text = value !== undefined ? value : email\r\n\r\n\r\n    if (text.toString().trim() !== '') {\r\n      if (!regex.test(text)) {\r\n        setErrorEmail(true)\r\n        setErrorTextEmail('El correo ingresado no es valido')\r\n        return 1\r\n      }\r\n      setErrorEmail(false)\r\n      setErrorTextEmail('')\r\n      return 0\r\n    }\r\n    else {\r\n      setErrorEmail(false)\r\n      setErrorTextEmail('')\r\n      return 0\r\n    }\r\n  }\r\n  const validateDocument = (value) => {\r\n    let text = value !== undefined ? value : documentNumber\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorDocument(true)\r\n      setErrorTextDocument('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorDocument(false)\r\n      setErrorTextDocument('')\r\n      return 0\r\n    }\r\n  }\r\n  const validateCustomer = (value) => {\r\n    let text = value !== undefined ? value : customer\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorCustomer(true)\r\n      setErrorTextCustomer('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorCustomer(false)\r\n      setErrorTextCustomer('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const validateCenterOfAttention = (value) => {\r\n    let text = value !== undefined ? value : centerOfAttention\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorCenterOfAttention(true)\r\n      setErrorTextCenterOfAttention('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorCenterOfAttention(false)\r\n      setErrorTextCenterOfAttention('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const enableDisableFields = role => {\r\n    switch (role.tag) {\r\n      case \"construction_manager\":\r\n      case \"maintenance_manager\":\r\n        setVisibleCustomer(true);\r\n        setVisibleCenterOfAttention(false);\r\n        break;\r\n\r\n      case \"oset\":\r\n      case \"permanent\":\r\n        setVisibleCustomer(true);\r\n        setVisibleCenterOfAttention(true);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onSubmitPerson = _ => {\r\n\r\n    let errores = validateForm()\r\n    errores += validateDocument();\r\n    if (visibleCustomer) {\r\n      errores += validateCustomer();\r\n    }\r\n    if (visibleCenterOfAttention) {\r\n      errores += validateCenterOfAttention();\r\n    }\r\n\r\n    if (password && repeatPassword) {\r\n      if (password !== repeatPassword) {\r\n        errores++;\r\n        toast.error('Las contraseñas no son iguales', {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n    if (errores === 0) {\r\n      const formData = new FormData();\r\n      if (props.person) {\r\n        formData.append(\"id\", props.person._id);\r\n      }\r\n      formData.append(\"photo\", file);\r\n      formData.append(\"name\", name);\r\n      formData.append(\"username\", username);\r\n      formData.append(\"documentNumber\", documentNumber);\r\n      formData.append(\"role\", role._id);\r\n      formData.append(\"phone\", phone);\r\n      formData.append(\"email\", email);\r\n      formData.append(\"password\", password);\r\n      formData.append(\"customer\", customer);\r\n      formData.append(\"centerOfAttention\", centerOfAttention);\r\n\r\n      if (!props.person) {\r\n        createUser(formData).then(response => {\r\n          console.log('response', response);\r\n          if (response.status == 'success') {\r\n            toast.info('Funcionario registrado exitosamente', {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n            props.onCloseModal(true);\r\n            // props.onUpdateUsers();\r\n          } else {\r\n            toast.error(response.message, {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n          }\r\n\r\n        });\r\n\r\n      } else {\r\n\r\n        updateUser(formData).then(response => {\r\n          console.log('response', response);\r\n          if (response.status == 'success') {\r\n            toast.info('Funcionario registrado exitosamente', {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n          } else {\r\n            toast.error('Ocurrió un error al registrar el funcionario', {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n          }\r\n\r\n        });\r\n      }\r\n    } else {\r\n      toast.error('Faltan campos obligatorios por llenar', {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <ToastContainer />\r\n      <Container maxWidth=\"md\">\r\n\r\n        <Paper className={classes.paper}>\r\n          <form encType={'multipart/form-data'}\r\n            onSubmit={e => {\r\n              e.preventDefault()\r\n              onSubmitPerson()\r\n            }} >\r\n            <Grid container spacing={3}>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n\r\n                <Autocomplete\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  getOptionLabel={\r\n                    (option) => {\r\n                      return `${option.name.toString().toUpperCase()} `\r\n                    }\r\n                  }\r\n                  filterOptions={(x) => x}\r\n                  options={roles}\r\n                  autoComplete\r\n                  getOptionSelected={(option, value) => option === value}\r\n                  onChange={(_, value) => {\r\n                    setRole(value);\r\n                    enableDisableFields(value);\r\n\r\n                  }}\r\n                  onInputChange={(_, newInputValue) => {\r\n                    if (newInputValue.toString().trim().length > 0) {\r\n                      let data = {\r\n                        search: newInputValue.toString().trim()\r\n                      }\r\n                      getRoles(data).then(response => {\r\n                        setRoles(response.roles);\r\n                      })\r\n                    }\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"Roles\" variant=\"outlined\" margin=\"dense\" />\r\n                  )}\r\n                  renderTags={(tagValue, getTagProps) =>\r\n                    tagValue.map((option, index) => (\r\n                      <Chip\r\n                        label={option.name}\r\n                        {...getTagProps({ index })}\r\n                        disabled={roles.indexOf(option) !== -1}\r\n                      />\r\n                    ))\r\n                  }\r\n                  renderOption={(option) => {\r\n\r\n                    return (\r\n                      <Grid container alignItems=\"center\">\r\n                        <Grid item xs>\r\n                          <Typography >{`${option.name.toString().toUpperCase()}`}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                    );\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  fullWidth\r\n                  error={errorName}\r\n                  helperText={errorTextName}\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  id=\"outlined-simple-start-adornment\"\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  label=\"Nombre\"\r\n                  value={name}\r\n                  onChange={onChangeName} />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  fullWidth\r\n                  error={errorDocument}\r\n                  helperText={errorTextDocument}\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  id=\"outlined-simple-start-adornment\"\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  value={documentNumber}\r\n                  onChange={onChangeDocumentNumber}\r\n                  label=\"Documento\" />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  fullWidth\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  id=\"outlined-simple-start-adornment\"\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  label=\"Nombre de usuario\"\r\n                  value={username}\r\n                  onChange={onChangeUserame} />\r\n              </Grid>\r\n\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  fullWidth\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  value={phone}\r\n                  onChange={onChangePhone}\r\n                  label=\"Teléfono\" />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  fullWidth\r\n                  error={errorEmail}\r\n                  helperText={errorTextEmail}\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  value={email}\r\n                  onChange={onChangeEmail}\r\n                  label=\"Correo electrónico\" />\r\n              </Grid>\r\n\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  fullWidth\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  id=\"outlined-simple-start-adornment\"\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  type='password'\r\n                  label=\"Contraseña\"\r\n                  onChange={onChangePassword} />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  fullWidth\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  type='password'\r\n                  id=\"outlined-simple-start-adornment\"\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  label=\"Repite la contraseña\"\r\n                  onChange={onChangeRepeatPassword} />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                {\r\n                  visibleCustomer ?\r\n                    <Autocomplete\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      getOptionLabel={\r\n                        (option) => {\r\n                          return `${option.name.toString().toUpperCase()} `\r\n                        }\r\n                      }\r\n                      filterOptions={(x) => x}\r\n                      options={customers}\r\n                      autoComplete\r\n                      getOptionSelected={(option, value) => option === value}\r\n                      onChange={(_, value) => {\r\n                        setCustomer(value._id)\r\n                        listCenterOfAttention({ customer: value._id }).then(response => {\r\n                          setCenterOfAttentions(response.centersOfAttention);\r\n                        })\r\n                      }}\r\n                      onInputChange={(_, newInputValue) => {\r\n                        if (newInputValue.toString().trim().length > 0) {\r\n                          let data = {\r\n                            search: newInputValue.toString().trim()\r\n                          }\r\n                          listCustomers(data).then(response => {\r\n                            setCustomers(response.customers);\r\n                          })\r\n                        }\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          error={errorCustomer}\r\n                          helperText={errorTextCustomer}\r\n                          {...params}\r\n                          label=\"Cliente\"\r\n                          variant=\"outlined\"\r\n                          margin=\"dense\" />\r\n                      )}\r\n                      renderTags={(tagValue, getTagProps) =>\r\n                        tagValue.map((option, index) => (\r\n                          <Chip\r\n                            label={option.name}\r\n                            {...getTagProps({ index })}\r\n                            disabled={roles.indexOf(option) !== -1}\r\n                          />\r\n                        ))\r\n                      }\r\n                      renderOption={(option) => {\r\n\r\n                        return (\r\n                          <Grid container alignItems=\"center\">\r\n                            <Grid item xs>\r\n                              <Typography >{`${option.name.toString().toUpperCase()}`}</Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n                        );\r\n                      }}\r\n                    /> : \"\"\r\n                }\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                {\r\n                  visibleCenterOfAttention ?\r\n                    <Autocomplete\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      getOptionLabel={\r\n                        (option) => {\r\n                          return `${option.title.toString().toUpperCase()} `\r\n                        }\r\n                      }\r\n                      filterOptions={(x) => x}\r\n                      options={centerOfAttentions}\r\n                      autoComplete\r\n                      getOptionSelected={(option, value) => option === value}\r\n                      onChange={(_, value) => {\r\n                        setCenterOfAttention(value._id);\r\n                      }}\r\n                      onInputChange={(_, newInputValue) => {\r\n                        if (newInputValue.toString().trim().length > 0) {\r\n                          let data = {\r\n                            search: newInputValue.toString().trim()\r\n                          }\r\n                          listCenterOfAttention(data).then(response => {\r\n                            setCenterOfAttentions(response.centersOfAttention);\r\n                          });\r\n                        }\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          error={errorCenterOfAttention}\r\n                          helperText={errorTextCenterOfAttention}\r\n                          label=\"Centro de atención\"\r\n                          variant=\"outlined\"\r\n                          margin=\"dense\" />\r\n                      )}\r\n                      renderTags={(tagValue, getTagProps) =>\r\n                        tagValue.map((option, index) => (\r\n                          <Chip\r\n                            label={option.title}\r\n                            {...getTagProps({ index })}\r\n                            disabled={roles.indexOf(option) !== -1}\r\n                          />\r\n                        ))\r\n                      }\r\n                      renderOption={(option) => {\r\n\r\n                        return (\r\n                          <Grid container alignItems=\"center\">\r\n                            <Grid item xs>\r\n                              <Typography >{`${option.title.toString().toUpperCase()}`}</Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n                        );\r\n                      }}\r\n                    />\r\n                    : \"\"\r\n                }\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={12}>\r\n                <DropzoneArea\r\n                  open={true}\r\n                  filesLimit={1}\r\n                  dropzoneText=\"Arrastre y suelte un archivo de imagen aquí o haga clic\"\r\n                  acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\r\n                  onChange={handlePicture} />\r\n\r\n              </Grid>\r\n\r\n\r\n              <Grid item xs={2} sm={3}>\r\n                <Button type=\"submit\" variant=\"contained\" color='primary'>\r\n                  {props.person ? \"Actualizar\" : \"Guardar\"}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </Paper>\r\n\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PersonForm","import React, { useState, useEffect, Fragment } from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport PersonDetail from './PersonDetail';\r\nimport PersonToCustomer from \"./PersonToCustomer\";\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport PersonForm from \"./../Person/PersonForm\";\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { deleteUser, restoreUser, listUsers } from '../../api/api';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { AiOutlineUsergroupAdd } from \"react-icons/ai\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    iconWidth: {\r\n        width: 10\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        marginTop: 10,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    },\r\n    fab: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    icon: {\r\n        marginRight: theme.spacing(1),\r\n        color: 'black'\r\n    },\r\n}))\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n})\r\n\r\n\r\n\r\nconst Person = _ => {\r\n\r\n    useEffect(() => {\r\n        let data = { start: 0, end: rowsPerPage, paginate: true }\r\n\r\n        listUsers(data).then(response => {\r\n            setPersons(response.users);\r\n            setTotalPersons(response.count);\r\n        });\r\n    }, []);\r\n\r\n    const classes = useStyles()\r\n\r\n    const [persons, setPersons] = useState([])\r\n    const [totalPersons, setTotalPersons] = useState(0)\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [open, setOpen] = useState(false);\r\n    const [openRestorePerson, setOpenRestorePerson] = useState(false);\r\n    const [openDetailPerson, setOpenDetailPerson] = useState(false);\r\n    const [openEditPerson, setOpenEditPerson] = useState(false);\r\n    const [openCreatePerson, setOpenCreatePerson] = useState(false);\r\n    const [openPersonToCustomer, setOpenPersonToCustomer] = useState(false);\r\n    const [person, setPersonSelected] = useState({})\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n        let data = { start: (newPage * rowsPerPage), end: rowsPerPage, paginate: true }\r\n        listUsers(data).then(response => {\r\n            setPersons(response.users);\r\n            setTotalPersons(response.count);\r\n        });\r\n    }\r\n    const handleChangeRowsPerPage = event => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n        let data = { start: 0, end: event.target.value, paginate: true }\r\n        listUsers(data).then(response => {\r\n            setPersons(response.users);\r\n            setTotalPersons(response.count);\r\n        });\r\n    }\r\n    const onUpdateUsers = () => {\r\n        listUsers().then(response => {\r\n            setPersons(response.users);\r\n            setTotalPersons(response.count);\r\n        });\r\n    }\r\n    const onOpenDeletePerson = user => () => {\r\n        setPersonSelected(user)\r\n        setOpen(true);\r\n    }\r\n    const onOpenRestorePerson = user => () => {\r\n        setPersonSelected(user)\r\n        setOpenRestorePerson(true);\r\n    }\r\n    const onAddToCustomer = user => () => {\r\n        setPersonSelected(user)\r\n        setOpenPersonToCustomer(true);\r\n\r\n    }\r\n    const onCloseDeletePerson = () => {\r\n        setOpen(false);\r\n    }\r\n    const onDeletePerson = () => {\r\n        setOpen(false);\r\n\r\n        deleteUser(person._id).then(response => {\r\n            if (response.status === 'success') {\r\n                toast.success(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                const newPersons = persons.map((currentPerson) => {\r\n                    if (person._id !== currentPerson._id)\r\n                        return currentPerson\r\n\r\n                    currentPerson.estado = \"inactivo\";\r\n                    return currentPerson\r\n                })\r\n                setPersons(newPersons)\r\n            } else {\r\n                toast.error(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        }).catch(e => {\r\n\r\n            toast.error('Ocurrió un error al desactivar el funcionario', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        })\r\n\r\n    }\r\n    const onRestorePerson = () => {\r\n        setOpenRestorePerson(false)\r\n\r\n        restoreUser(person).then(response => {\r\n            if (response.status === 'success') {\r\n                toast.success(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                const newPersons = persons.map((currentPerson) => {\r\n                    if (person !== currentPerson._id)\r\n                        return currentPerson\r\n\r\n                    currentPerson.estado = \"activo\";\r\n                    return currentPerson\r\n                })\r\n                setPersons(newPersons)\r\n            } else {\r\n                toast.error(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            toast.error('Ocurrió un error al activar el funcionario', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        })\r\n    }\r\n    const onDetailPerson = person => () => {\r\n        setPersonSelected(person)\r\n        setOpenDetailPerson(true)\r\n    }\r\n    const closeDetailPerson = () => {\r\n        setOpenDetailPerson(false)\r\n    }\r\n    const onEditPerson = person => () => {\r\n        setPersonSelected(person)\r\n        setOpenEditPerson(true)\r\n    }\r\n    const onCloseEditPerson = () => {\r\n        setOpenEditPerson(false)\r\n    }\r\n    const onCloseRestorePerson = () => {\r\n        setOpenRestorePerson(false)\r\n    }\r\n    const onClosePersonToCustomer = () => {\r\n        setOpenPersonToCustomer(false);\r\n    }\r\n    const onCreatePerson = () => {\r\n        setOpenCreatePerson(true)\r\n    }\r\n    const onCloseCreatePerson = () => {\r\n        setOpenCreatePerson(false)\r\n    }\r\n    const onCloseModal = () => {\r\n        setOpenCreatePerson(false)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer />\r\n            <Paper className={classes.paper}>\r\n                <Fab onClick={onCreatePerson} variant=\"extended\" color=\"primary\" size=\"small\" className={classes.margin}>\r\n                    <AddIcon className={classes.extendedIcon} />\r\n                    Crear usuario\r\n                </Fab>\r\n\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>FUNCIONARIO</TableCell>\r\n                            <TableCell>DOCUMENTO</TableCell>\r\n                            <TableCell>NOMBRE DE USUARIO</TableCell>\r\n                            <TableCell>ROL</TableCell>\r\n                            <TableCell>FOTO</TableCell>\r\n                            <TableCell colSpan={4}></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            persons.map(item => {\r\n\r\n                                return (\r\n                                    <TableRow key={item._id}>\r\n                                        <TableCell>{item.name} </TableCell>\r\n                                        <TableCell>{item.document_number}</TableCell>\r\n                                        <TableCell>{item.username}</TableCell>\r\n                                        <TableCell>{item.role ? item.role.name : \"\"}</TableCell>\r\n                                        <TableCell>{item.username}</TableCell>\r\n\r\n\r\n                                        <TableCell className={classes.iconWidth}>\r\n                                            <Tooltip title=\"Detalle\" placement=\"top\">\r\n                                                <div>\r\n                                                    <SearchIcon className={classes.icon} onClick={onDetailPerson(item)} />\r\n                                                </div>\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n\r\n                                        <TableCell className={classes.iconWidth}>\r\n                                            <Tooltip title=\"Editar\" placement=\"top\">\r\n                                                <div>\r\n                                                    <EditIcon className={classes.icon} onClick={onEditPerson(item)} />\r\n                                                </div>\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.iconWidth}>\r\n                                            <Tooltip title={item.status} placement=\"top\">\r\n                                                {\r\n                                                    item.status === 'activo' ?\r\n                                                        <DeleteIcon className={classes.icon} onClick={onOpenDeletePerson(item)} />\r\n                                                        :\r\n                                                        <RestoreIcon className={classes.icon} onClick={onOpenRestorePerson(item)} />\r\n                                                }\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                        <TableCell className={classes.iconWidth}>\r\n                                            <Tooltip title=\"Agregar a cliente\" placement=\"top\">\r\n                                                <div>\r\n                                                    <AiOutlineUsergroupAdd className={\"icon\"} onClick={onAddToCustomer(item)} />\r\n                                                </div>\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                    </TableRow>)\r\n                            }\r\n                            )}\r\n                    </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={totalPersons}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={onCloseDeletePerson}\r\n                aria-labelledby=\"draggable-dialog-title\">\r\n                <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n                    Alerta\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Esta seguro de eliminar este funcionario?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseDeletePerson} color=\"primary\">\r\n                        NO\r\n                    </Button>\r\n                    <Button onClick={onDeletePerson} color=\"primary\">\r\n                        SI\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={openRestorePerson}\r\n                onClose={onCloseRestorePerson}\r\n                aria-labelledby=\"draggable-dialog-title\">\r\n                <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n                    Alerta\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Esta seguro de Reactivar a esta persona?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseRestorePerson} color=\"primary\">\r\n                        NO\r\n                    </Button>\r\n                    <Button onClick={onRestorePerson} color=\"primary\">\r\n                        SI\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog open={openDetailPerson} onClose={closeDetailPerson} TransitionComponent={Transition}>\r\n                <DialogContent>\r\n                    <PersonDetail person={person} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={closeDetailPerson} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog maxWidth=\"md\" open={openEditPerson} onClose={onCloseEditPerson} TransitionComponent={Transition}>\r\n                <DialogContent>\r\n                    <PersonForm onCloseModal={onCloseModal} onUpdateUsers={onUpdateUsers} person={person} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseEditPerson} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n                open={openCreatePerson}>\r\n                <DialogTitle onClose={onCloseCreatePerson} >Crear usuario</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <PersonForm handleClose={onCloseCreatePerson} onCloseModal={onCloseModal} onUpdateUsers={onUpdateUsers} modal={true} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onCloseCreatePerson} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={openPersonToCustomer}\r\n                onClose={onClosePersonToCustomer} >\r\n                <DialogTitle>\r\n                    Agregar a cliente\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <PersonToCustomer onClose={onClosePersonToCustomer} person={person} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onClosePersonToCustomer} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>)\r\n}\r\n\r\nexport default Person"],"sourceRoot":""}