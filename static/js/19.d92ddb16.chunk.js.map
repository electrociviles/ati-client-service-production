{"version":3,"sources":["queries/reports.query.js","views/Reports/ReportServices.js"],"names":["gql","useStyles","makeStyles","theme","root","flexGrow","height","minWidth","input","display","padding","paper","spacing","color","palette","text","secondary","marginTop","margin","button","formControl","icon","width","ReportServices","props","moment","locale","useState","page","setPage","rowsPerPage","setRowsPerPage","totalFields","setTotalFields","classes","Date","startDate","setStartDate","endDate","setEndDate","pdf","setPdf","dataPdf","setDataPdf","informations","setInformations","total","setTotal","serviceType","setServiceType","serviceStatus","setServiceStatus","serviceTypes","setServiceTypes","customers","setCustomers","customer","setCustomer","centerOfAttentions","setCenterOfAttentions","centerOfAttention","setCenterOfAttention","openHistory","setOpenHistory","attention","setAttention","errorCustomer","setErrorCustomer","errorTextCustomer","setErrorTextCustomer","errorCenterOfAttention","setErrorCenterOfAttention","errorTextCenterOfAttention","setErrorTextCenterOfAttention","isPrinting","setIsPrinting","useEffect","user","jwtDecode","localStorage","getItem","getAttentionsTypes","then","response","type","value","array","newArray","slice","unshift","prepend","attentionsTypes","filters","role","id","encargado","listCustomers","console","log","validateCustomer","undefined","toString","trim","validateCenterOfAttention","onClosePdf","onSubmit","e","errors","validateForm","data","start","end","paginate","reportAttention","sumTotal","count","newServices","attentions","map","service","_","onOpenModalHistory","onCloseModalHistory","getStatus","item","statusSend","className","date","format","downloadAttention","newAttentions","currentAttention","_id","downloading","onDownloadAttention","status","toast","info","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","window","open","config","urlPdf","error","catch","Container","maxWidth","Paper","encType","preventDefault","Grid","container","xs","sm","Typography","utils","DateFnsUtils","disableFuture","label","onChange","KeyboardButtonProps","TextField","select","style","variant","helperText","event","target","listCenterOfAttention","centersOfAttention","option","MenuItem","key","name","title","Button","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","hover","attentionType","description","iconWidth","descriptions","length","Tooltip","placement","onClick","CircularProgress","size","displayType","thousandSeparator","prefix","TableFooter","printReportAttention","pdfData","colSpan","TablePagination","rowsPerPageOptions","component","onChangePage","newPage","onChangeRowsPerPage","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","src","DialogActions","DialogContentText","List","ListItem","alignItems","ListItemIcon","fontSize","getIcon","ListItemText","primary","autoFocus"],"mappings":"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","file":"static/js/19.d92ddb16.chunk.js","sourcesContent":["import gql from 'graphql-tag'\r\n\r\n\r\nexport const Reports_Services = gql`\r\n  query reportsServices($start: Int, $end: Int, $startDate: Date, $endDate: Date, $status: String, $type: Int) {\r\n    reportsServices(start: $start, end: $end, startDate: $startDate, endDate: $endDate, status: $status, type: $type) {\r\n        services {\r\n            id\r\n            latitude\r\n            longitude\r\n            date\r\n            typeService\r\n            packs_service {\r\n                quantity\r\n                pack {\r\n                price\r\n                }\r\n            }\r\n            customer {\r\n                names\r\n            }\r\n            technical {\r\n                names\r\n            }\r\n            engineer {\r\n                names\r\n            }\r\n        }\r\n        totalFields\r\n      }\r\n}`\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Reports_Services } from '../../queries/reports.query'\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport moment from 'moment';\r\nimport Moment from 'react-moment';\r\nimport NumberFormat from 'react-number-format';\r\nimport config from '../../config'\r\nimport axios from 'axios'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport clsx from 'clsx';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { getAttentionsTypes, listCustomers, listCenterOfAttention, reportAttention, onDownloadAttention, printReportAttention } from '../../api/api';\r\nimport jwtDecode from 'jwt-decode';\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { BsClockHistory } from 'react-icons/bs';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { FaPrint } from \"react-icons/fa\";\r\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from \"react-icons/ai\";\r\nimport { RiSendPlaneLine } from \"react-icons/ri\";\r\nimport { MdOutlineScheduleSend } from \"react-icons/md\";\r\nimport { AiOutlineCloudDownload } from \"react-icons/ai\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        height: 250,\r\n        minWidth: 290\r\n    },\r\n    input: {\r\n        display: \"flex\",\r\n        padding: 0,\r\n        height: \"auto\"\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        marginTop: 10,\r\n        margin: 5\r\n    },\r\n    button:\r\n    {\r\n        margin: theme.spacing(1),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    icon: {\r\n        width: 24,\r\n        height: 24\r\n    }\r\n}))\r\n\r\nconst ReportServices = props => {\r\n\r\n    moment().locale('es')\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [totalFields, setTotalFields] = useState(0)\r\n\r\n    const classes = useStyles()\r\n    const [startDate, setStartDate] = useState(new Date())\r\n    const [endDate, setEndDate] = useState(new Date())\r\n    const [pdf, setPdf] = useState(false)\r\n    const [dataPdf, setDataPdf] = useState('')\r\n\r\n    const [informations, setInformations] = useState([])\r\n    const [total, setTotal] = useState(0)\r\n    const [serviceType, setServiceType] = useState(1)\r\n    const [serviceStatus, setServiceStatus] = useState('')\r\n    const [serviceTypes, setServiceTypes] = useState([])\r\n    const [customers, setCustomers] = useState([])\r\n    const [customer, setCustomer] = useState(\"\")\r\n    const [centerOfAttentions, setCenterOfAttentions] = useState([])\r\n    const [centerOfAttention, setCenterOfAttention] = useState(\"\")\r\n    const [openHistory, setOpenHistory] = useState(false);\r\n    const [attention, setAttention] = useState(null);\r\n    const [errorCustomer, setErrorCustomer] = useState(false);\r\n    const [errorTextCustomer, setErrorTextCustomer] = useState('');\r\n    const [errorCenterOfAttention, setErrorCenterOfAttention] = useState(false);\r\n    const [errorTextCenterOfAttention, setErrorTextCenterOfAttention] = useState('');\r\n    const [isPrinting, setIsPrinting] = useState(false);\r\n\r\n    const serviceStatuses = [{\r\n        id: \"\",\r\n        text: \"Todas\"\r\n    }, {\r\n        id: \"accept\",\r\n        text: \"Aceptada\"\r\n    }, {\r\n        id: \"reject\",\r\n        text: \"Rechazada\"\r\n    }, {\r\n        id: \"resend\",\r\n        text: \"Reenviada\"\r\n    }]\r\n\r\n\r\n    function prepend(value, array) {\r\n        var newArray = array.slice();\r\n        newArray.unshift(value);\r\n        return newArray;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const user = jwtDecode(localStorage.getItem('token'))\r\n\r\n        getAttentionsTypes().then(response => {\r\n            let data = {\r\n                \"_id\": \"1\",\r\n                \"type\": \"Todas\",\r\n                \"status\": \"active\",\r\n                \"tag\": \"\"\r\n            }\r\n            let type = prepend(data, response.attentionsTypes)\r\n            setServiceTypes(type);\r\n        })\r\n        let filters = {}\r\n        if (user.role == \"5a046fe9627e3526802b3847\") {\r\n            filters.customer = \"\";\r\n        }\r\n        if (user.role == \"5a046fe9627e3526802b3848\") {\r\n            filters.customer = user.id;\r\n        }\r\n        if (user.role == \"627d968a96a6a6b76f30c7e9\") {\r\n            filters.encargado = true;\r\n            filters.user = user.id;\r\n        }\r\n\r\n        listCustomers(filters).then(response => {\r\n            console.log(\"response\", response);\r\n            setCustomers(response.customers);\r\n        })\r\n\r\n    }, []);\r\n\r\n    const onChangeServiceType = event => {\r\n        setServiceType(event.target.value)\r\n    }\r\n    const onChangeCenterOfAttention = event => {\r\n        setCenterOfAttention(event.target.value)\r\n    }\r\n    const onChangeCustomer = event => {\r\n        const user = jwtDecode(localStorage.getItem('token'))\r\n\r\n        let filters = {}\r\n        if (user.role == \"5a046fe9627e3526802b3847\") {\r\n            filters.customer = \"\";\r\n        }\r\n        if (user.role == \"5a046fe9627e3526802b3848\") {\r\n            filters.customer = event.target.value;\r\n        }\r\n        if (user.role == \"627d968a96a6a6b76f30c7e9\") {\r\n            filters.encargado = true;\r\n            filters.user = user.id;\r\n        }\r\n\r\n        console.log(\"filters\", filters);\r\n\r\n        setCustomer(event.target.value)\r\n        listCenterOfAttention(filters).then(response => {\r\n            setCenterOfAttentions(response.centersOfAttention);\r\n        })\r\n    }\r\n    const onChangeServiceStatus = event => {\r\n        setServiceStatus(event.target.value)\r\n    }\r\n    const onChangeStartDate = date => {\r\n        setStartDate(date)\r\n    }\r\n    const onChangeEndDate = value => {\r\n        setEndDate(value)\r\n    }\r\n    const handleChangePage = (_, newPage) => {\r\n\r\n        let data = {\r\n            start: (newPage * rowsPerPage),\r\n            end: rowsPerPage,\r\n            paginate: true,\r\n            startDate,\r\n            endDate,\r\n            customer,\r\n            centerOfAttention,\r\n            serviceType,\r\n            serviceStatus\r\n        }\r\n\r\n        setPage(newPage);\r\n        reportAttention(data).then(response => {\r\n            setInformations(response.attentions);\r\n            setTotalFields(response.count)\r\n        });\r\n    }\r\n    const handleChangeRowsPerPage = event => {\r\n\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n        let data = {\r\n            start: 0,\r\n            end: event.target.value,\r\n            paginate: true,\r\n            startDate,\r\n            endDate,\r\n            customer,\r\n            centerOfAttention,\r\n            serviceType,\r\n            serviceStatus\r\n        }\r\n        reportAttention(data).then(response => {\r\n            setInformations(response.attentions);\r\n            setTotalFields(response.count)\r\n        });\r\n    }\r\n    const validateForm = () => {\r\n\r\n        let errors = 0\r\n        const user = jwtDecode(localStorage.getItem('token'))\r\n\r\n\r\n        if (user.role !== \"5a046fe9627e3526802b3847\")\r\n            errors += validateCustomer()\r\n\r\n\r\n        if (user.role == \"627d968a96a6a6b76f30c7e9\") {\r\n            errors += validateCenterOfAttention()\r\n        }\r\n\r\n        return errors\r\n    }\r\n    const validateCustomer = (value) => {\r\n        let text = value !== undefined ? value : customer\r\n\r\n        if (text == null || text.toString().trim() === '') {\r\n            setErrorCustomer(true)\r\n            setErrorTextCustomer('Este campo es requerido')\r\n            return 1\r\n        }\r\n        else {\r\n            setErrorCustomer(false)\r\n            setErrorTextCustomer('')\r\n            return 0\r\n        }\r\n    }\r\n    const validateCenterOfAttention = (value) => {\r\n        let text = value !== undefined ? value : centerOfAttention\r\n\r\n        if (text == null || text.toString().trim() === '') {\r\n            setErrorCenterOfAttention(true)\r\n            setErrorTextCenterOfAttention('Este campo es requerido')\r\n            return 1\r\n        }\r\n        else {\r\n            setErrorCenterOfAttention(false)\r\n            setErrorTextCenterOfAttention('')\r\n            return 0\r\n        }\r\n    }\r\n    const onPrint = () => {\r\n\r\n        setIsPrinting(true);\r\n        let data = {\r\n            start: 0,\r\n            end: rowsPerPage,\r\n            paginate: true,\r\n            startDate,\r\n            endDate,\r\n            customer,\r\n            centerOfAttention,\r\n            serviceType,\r\n            serviceStatus\r\n        }\r\n        printReportAttention(data).then(response => {\r\n            setIsPrinting(false);\r\n            if (response.status === \"success\") {\r\n                // window.open(`${config.urlPdf}${response.fileName}.pdf`)\r\n                let pdfData = 'data:application/pdf;base64,' + response.data\r\n                setDataPdf(pdfData)\r\n                setPdf(true)\r\n            }\r\n        }).catch(e => {\r\n            console.log(e)\r\n            setIsPrinting(false);\r\n        })\r\n    }\r\n    const onClosePdf = () => {\r\n        setPdf(false)\r\n    }\r\n    const onSubmit = e => {\r\n\r\n        let errores = validateForm()\r\n        if (errores === 0) {\r\n\r\n\r\n            let data = {\r\n                start: 0,\r\n                end: rowsPerPage,\r\n                paginate: true,\r\n                startDate,\r\n                endDate,\r\n                customer,\r\n                centerOfAttention,\r\n                serviceType,\r\n                serviceStatus\r\n            }\r\n\r\n            reportAttention(data).then(response => {\r\n                let sumTotal = 0\r\n                setTotalFields(response.count)\r\n                const newServices = response.attentions.map((service, _) => {\r\n                    console.log(\"service \", service.total);\r\n                    if (service.total)\r\n                        sumTotal += service.total\r\n\r\n                    return service\r\n                })\r\n                setInformations(newServices)\r\n                setTotal(sumTotal)\r\n            })\r\n        }\r\n    }\r\n    const onOpenModalHistory = attention => () => {\r\n        setOpenHistory(true);\r\n        setAttention(attention);\r\n    }\r\n    const onCloseModalHistory = () => {\r\n        setOpenHistory(false);\r\n    }\r\n    const getStatus = item => {\r\n        switch (item.statusSend) {\r\n            case \"send\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Enviado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n\r\n            case \"resend\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Reenviado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n            case \"reject\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Rechazado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n            case \"accept\":\r\n                return <div className='wrapper__history'>\r\n                    <div className='statusHistory'>Aceptado</div>\r\n                    <div className='dateHistory'>{moment(item.date).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n                </div>\r\n\r\n\r\n\r\n        }\r\n    }\r\n    const getIcon = statusSend => {\r\n        switch (statusSend) {\r\n            case \"reject\":\r\n                return <AiOutlineCloseCircle style={{ fontSize: 32, color: \"red\" }} />\r\n\r\n            case \"send\":\r\n                return <RiSendPlaneLine style={{ fontSize: 32, color: \"red\" }} />\r\n\r\n            case \"accept\":\r\n                return <AiOutlineCheckCircle style={{ fontSize: 32, color: \"green\" }} />\r\n\r\n\r\n            case \"resend\":\r\n                return <MdOutlineScheduleSend style={{ fontSize: 32, color: \"silver\" }} />\r\n\r\n        }\r\n\r\n    }\r\n    const downloadAttention = attention => () => {\r\n        const newAttentions = informations.map(currentAttention => {\r\n            if (currentAttention._id === attention._id) {\r\n                currentAttention.downloading = true;\r\n            }\r\n            return currentAttention;\r\n        });\r\n        setInformations(newAttentions)\r\n\r\n        let data = { id: attention._id }\r\n        onDownloadAttention(data).then(response => {\r\n\r\n            const newAttentions = informations.map(currentAttention => {\r\n                if (currentAttention._id === attention._id) {\r\n                    currentAttention.downloading = false;\r\n                }\r\n                return currentAttention;\r\n            });\r\n            setInformations(newAttentions)\r\n\r\n            console.log(response)\r\n            if (response.status === 'success') {\r\n\r\n                toast.info(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                setInformations(newAttentions)\r\n                window.open(`${config.urlPdf}${attention._id}.pdf`)\r\n            } else {\r\n                toast.error(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            toast.error(\"Occurrió un error al descargar la atención\", {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        });\r\n\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer />\r\n\r\n            <Container maxWidth=\"lg\">\r\n                <Paper className={classes.paper}>\r\n                    <form encType={'multipart/form-data'}\r\n                        onSubmit={e => {\r\n                            e.preventDefault()\r\n                            onSubmit()\r\n                        }} >\r\n                        <Grid container >\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <Typography>Reporte de atenciones</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={3}>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        disableFuture\r\n                                        format=\"yyyy-MM-dd\"\r\n                                        margin=\"dense\"\r\n                                        id=\"date-picker-inline\"\r\n                                        label=\"Fecha inicial\"\r\n                                        value={startDate}\r\n                                        onChange={onChangeStartDate}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        format=\"yyyy-MM-dd\"\r\n                                        margin=\"dense\"\r\n                                        id=\"date-picker-inline\"\r\n                                        label=\"Fecha final\"\r\n                                        value={endDate}\r\n                                        onChange={onChangeEndDate}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Cliente\"\r\n                                    error={errorCustomer}\r\n                                    helperText={errorTextCustomer}\r\n                                    value={customer}\r\n                                    onChange={onChangeCustomer}>\r\n                                    {\r\n                                        customers.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.name}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Centro de atención\"\r\n                                    error={errorCenterOfAttention}\r\n                                    helperText={errorTextCenterOfAttention}\r\n                                    value={centerOfAttention}\r\n                                    onChange={onChangeCenterOfAttention}>\r\n                                    {\r\n                                        centerOfAttentions.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.title}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Tipo de atención\"\r\n                                    value={serviceType}\r\n                                    onChange={onChangeServiceType}>\r\n                                    {\r\n\r\n                                        serviceTypes.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.type}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n\r\n                            <Grid item xs={2} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Estado de la atención\"\r\n                                    value={serviceStatus}\r\n                                    onChange={onChangeServiceStatus}>\r\n                                    {\r\n                                        serviceStatuses.map(option => (\r\n                                            <MenuItem key={option.id} value={option.id} >\r\n                                                {option.text}\r\n                                            </MenuItem>))\r\n\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2} sm={12}>\r\n                                <Button type=\"submit\" variant=\"contained\" color='primary' style={{ marginTop: 20 }}>Consultar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Paper>\r\n\r\n            </Container>\r\n            <Paper className={classes.paper}>\r\n                <TableContainer className={classes.container} style={{ width: \"100%\" }}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Fecha</TableCell>\r\n                                <TableCell>Tipo</TableCell>\r\n                                <TableCell>Cliente</TableCell>\r\n                                <TableCell>Nombre</TableCell>\r\n                                <TableCell>Descripción</TableCell>\r\n                                <TableCell>Centro de atención</TableCell>\r\n                                <TableCell width={30}>Historial</TableCell>\r\n                                <TableCell width={30}>Descargar</TableCell>\r\n                                <TableCell width={30} align=\"right\">Total</TableCell>\r\n\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                informations.map(service => {\r\n                                    return (\r\n                                        <TableRow hover key={service._id}>\r\n                                            <TableCell><Moment format=\"ll\">{new Date(service.date)}</Moment></TableCell>\r\n                                            <TableCell>{service.attentionType.type}</TableCell>\r\n                                            <TableCell>{service.customer.name}</TableCell>\r\n                                            <TableCell>{service.title}</TableCell>\r\n                                            <TableCell>{service.description}</TableCell>\r\n                                            <TableCell>{service.centerOfAttention ? service.centerOfAttention.title : \"\"}</TableCell>\r\n                                            <TableCell className={classes.iconWidth}>\r\n                                                {\r\n                                                    service.descriptions.length > 0 ? <Tooltip title=\"Hisotoria\" placement=\"top\">\r\n                                                        <div>\r\n                                                            <BsClockHistory className={\"icon\"} onClick={onOpenModalHistory(service)} />\r\n                                                        </div>\r\n                                                    </Tooltip> : \"\"\r\n                                                }\r\n                                            </TableCell>\r\n                                            <TableCell className={classes.iconWidth}>\r\n                                                <Tooltip title=\"Descargar\" placement=\"top\">\r\n                                                    {\r\n                                                        service.downloading ?\r\n                                                            <div className='circularProgress'>\r\n                                                                <CircularProgress size={16} />\r\n                                                            </div> :\r\n                                                            <div>\r\n                                                                <AiOutlineCloudDownload className={\"icon\"} onClick={downloadAttention(service)} />\r\n                                                            </div>\r\n                                                    }\r\n\r\n\r\n                                                </Tooltip>\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\"><NumberFormat value={service.total} displayType={'text'} thousandSeparator={true} prefix={'$'} /></TableCell>\r\n\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                        </TableBody>\r\n                        {\r\n                            informations.length > 0\r\n                                ? <TableFooter>\r\n                                    <TableRow hover>\r\n                                        <TableCell>\r\n                                            {\r\n                                                !isPrinting ?\r\n                                                    <FaPrint className={classes.icon} onClick={onPrint} />\r\n                                                    : <CircularProgress size={16} />\r\n                                            }\r\n                                        </TableCell>\r\n                                        <TableCell colSpan={7} align=\"right\">\r\n                                            <Typography variant=\"h3\">\r\n                                                <NumberFormat value={total} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableFooter>\r\n                                : null\r\n                        }\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={totalFields}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n\r\n\r\n            <Dialog\r\n                maxWidth=\"lg\"\r\n                open={pdf}\r\n                onClose={onClosePdf}\r\n                aria-labelledby=\"draggable-dialog-title\">\r\n                <DialogTitle id=\"draggable-dialog-title\">Reporte de servicios</DialogTitle>\r\n                <DialogContent>\r\n                    <iframe src={dataPdf} title=\"Imprimir\" height=\"900px\" width=\"600px\" ></iframe>\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={onClosePdf} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={openHistory}\r\n                onClose={onCloseModalHistory}>\r\n                <DialogTitle >\r\n                    Historia\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <List className={classes.root}>\r\n                            {\r\n                                attention ?\r\n                                    attention.descriptions.map(item => {\r\n                                        return (\r\n                                            <ListItem alignItems=\"flex-start\">\r\n                                                <ListItemIcon>\r\n                                                    {getIcon(item.statusSend)}\r\n                                                </ListItemIcon>\r\n                                                <ListItemText\r\n                                                    primary={getStatus(item)}\r\n                                                    secondary={item.description}\r\n                                                />\r\n                                            </ListItem>\r\n\r\n                                        );\r\n                                    })\r\n                                    : \"\"\r\n                            }\r\n                        </List>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseModalHistory} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default ReportServices "],"sourceRoot":""}