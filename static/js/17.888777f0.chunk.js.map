{"version":3,"sources":["queries/reports.query.js","views/Reports/ReportServices.js"],"names":["Reports_Services","gql","useStyles","makeStyles","theme","root","flexGrow","height","minWidth","input","display","padding","paper","spacing","color","palette","text","secondary","marginTop","margin","button","formControl","icon","width","ReportServices","props","moment","locale","useState","page","setPage","rowsPerPage","setRowsPerPage","totalFields","setTotalFields","classes","Date","startDate","setStartDate","endDate","setEndDate","pdf","setPdf","dataPdf","setDataPdf","informations","setInformations","total","setTotal","serviceType","setServiceType","serviceStatus","setServiceStatus","serviceTypes","setServiceTypes","customers","setCustomers","customer","setCustomer","centerOfAttentions","setCenterOfAttentions","centerOfAttention","setCenterOfAttention","useEffect","getAttentionsTypes","then","response","console","log","attentionsTypes","listCustomers","useLazyQuery","fetchPolicy","onCompleted","sumTotal","data","reportsServices","newServices","services","map","service","_","totalServices","packs_service","pack_service","quantity","pack","price","subTotal","onClosePdf","Container","maxWidth","Paper","className","encType","onSubmit","e","preventDefault","start","end","paginate","reportAttention","Grid","container","item","xs","sm","Typography","utils","DateFnsUtils","disableFuture","format","id","label","value","onChange","date","KeyboardButtonProps","TextField","select","style","variant","event","target","listCenterOfAttention","centersOfAttention","option","MenuItem","key","_id","name","title","type","Button","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","hover","role","tabIndex","names","typeService","technical","engineer","displayType","thousandSeparator","prefix","length","TableFooter","onClick","locales","currency","fractionDigits","number","Intl","NumberFormat","minimumFractionDigits","config","hostReport1","axios","post","shortid","pdfData","catch","error","colSpan","TablePagination","rowsPerPageOptions","component","count","onChangePage","newPage","variables","status","onChangeRowsPerPage","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","src","DialogActions"],"mappings":"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","file":"static/js/17.888777f0.chunk.js","sourcesContent":["import gql from 'graphql-tag'\r\n\r\n\r\nexport const Reports_Services = gql`\r\n  query reportsServices($start: Int, $end: Int, $startDate: Date, $endDate: Date, $status: String, $type: Int) {\r\n    reportsServices(start: $start, end: $end, startDate: $startDate, endDate: $endDate, status: $status, type: $type) {\r\n        services {\r\n            id\r\n            latitude\r\n            longitude\r\n            date\r\n            typeService\r\n            packs_service {\r\n                quantity\r\n                pack {\r\n                price\r\n                }\r\n            }\r\n            customer {\r\n                names\r\n            }\r\n            technical {\r\n                names\r\n            }\r\n            engineer {\r\n                names\r\n            }\r\n        }\r\n        totalFields\r\n      }\r\n}`\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Reports_Services } from '../../queries/reports.query'\r\nimport { useLazyQuery } from '@apollo/react-hooks';\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport moment from 'moment';\r\nimport Moment from 'react-moment';\r\nimport NumberFormat from 'react-number-format';\r\nimport config from '../../config'\r\nimport axios from 'axios'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport clsx from 'clsx';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { getAttentionsTypes, listCustomers, listCenterOfAttention, reportAttention } from '../../api/api';\r\n\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { FaPrint } from \"react-icons/fa\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        height: 250,\r\n        minWidth: 290\r\n    },\r\n    input: {\r\n        display: \"flex\",\r\n        padding: 0,\r\n        height: \"auto\"\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        marginTop: 10,\r\n        margin: 5\r\n    },\r\n    button:\r\n    {\r\n        margin: theme.spacing(1),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    icon: {\r\n        width: 24,\r\n        height: 24\r\n    }\r\n}))\r\n\r\nconst ReportServices = props => {\r\n\r\n    moment().locale('es')\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [totalFields, setTotalFields] = useState(0)\r\n\r\n    const classes = useStyles()\r\n    const [startDate, setStartDate] = useState(new Date())\r\n    const [endDate, setEndDate] = useState(new Date())\r\n    const [pdf, setPdf] = useState(false)\r\n    const [dataPdf, setDataPdf] = useState('')\r\n\r\n    const [informations, setInformations] = useState([])\r\n    const [total, setTotal] = useState(0)\r\n    const [serviceType, setServiceType] = useState(1)\r\n    const [serviceStatus, setServiceStatus] = useState('')\r\n    const [serviceTypes, setServiceTypes] = useState([])\r\n    const [customers, setCustomers] = useState([])\r\n    const [customer, setCustomer] = useState(\"\")\r\n    const [centerOfAttentions, setCenterOfAttentions] = useState([])\r\n    const [centerOfAttention, setCenterOfAttention] = useState(\"\")\r\n\r\n    const serviceStatuses = [{\r\n        id: \"all\",\r\n        text: \"Todas\"\r\n    }, {\r\n        id: \"accept\",\r\n        text: \"Aceptada\"\r\n    }, {\r\n        id: \"reject\",\r\n        text: \"Rechazada\"\r\n    }, {\r\n        id: \"resend\",\r\n        text: \"Reenviada\"\r\n    }]\r\n\r\n    useEffect(() => {\r\n        getAttentionsTypes().then(response => {\r\n            console.log(\"response\", response);\r\n            setServiceTypes(response.attentionsTypes);\r\n        })\r\n        listCustomers().then(response => {\r\n            console.log(\"response\", response);\r\n            setCustomers(response.customers);\r\n        })\r\n\r\n    }, []);\r\n\r\n    const [reportsServices, { data }] = useLazyQuery(Reports_Services, {\r\n        fetchPolicy: 'no-cache',\r\n        onCompleted: () => {\r\n            let sumTotal = 0\r\n            setTotalFields(data.reportsServices.totalFields)\r\n            const newServices = data.reportsServices.services.map((service, _) => {\r\n                let totalServices = 0\r\n                // console.log('service', service)\r\n                service.packs_service.map((pack_service, _) => {\r\n                    totalServices += pack_service.quantity * pack_service.pack.price\r\n                })\r\n                sumTotal += totalServices\r\n                service.subTotal = totalServices\r\n\r\n                return service\r\n            })\r\n            setInformations(newServices)\r\n            setTotal(sumTotal)\r\n        }\r\n    })\r\n\r\n    const onChangeServiceType = event => {\r\n        setServiceType(event.target.value)\r\n    }\r\n\r\n    const onChangeCenterOfAttention = event => {\r\n        setCenterOfAttention(event.target.value)\r\n    }\r\n    const onChangeCustomer = event => {\r\n        setCustomer(event.target.value)\r\n        listCenterOfAttention({ customer: event.target.value }).then(response => {\r\n            setCenterOfAttentions(response.centersOfAttention);\r\n        })\r\n    }\r\n    const onChangeServiceStatus = event => {\r\n        setServiceStatus(event.target.value)\r\n    }\r\n    const onChangeStartDate = date => {\r\n        setStartDate(date)\r\n    }\r\n    const onChangeEndDate = value => {\r\n        setEndDate(value)\r\n    }\r\n\r\n    const onChangePage = (_, newPage) => {\r\n        setPage(newPage)\r\n        reportsServices({ variables: { start: newPage, end: rowsPerPage, startDate: startDate, endDate: endDate, status: serviceStatus, type: serviceType } })\r\n    }\r\n\r\n    const onChangeRowsPerPage = event => {\r\n\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    }\r\n\r\n    const validateForm = () => {\r\n\r\n        let errors = 0\r\n\r\n        return errors\r\n    }\r\n    const onPrint = () => {\r\n\r\n        let data = {\r\n            data: informations,\r\n            total: 0,\r\n            startDate,\r\n            endDate\r\n        }\r\n        // informations.forEach(element => {\r\n        //     //   data.data.push({\r\n        //     //     \"date\": moment(new Date(element.date)).format(\"YYYY-MM-DD\") ,\r\n        //     //     \"description\": element.description,\r\n        //     //     \"value\": formatCurrency(\"es-CO\", \"COP\", 0, element.value) \r\n        //     //   })\r\n        // })\r\n        data.total = formatCurrency(\"es-CO\", \"COP\", 0, total)\r\n\r\n        // console.log(data)  \r\n\r\n        function formatCurrency(locales, currency, fractionDigits, number) {\r\n            var formatted = new Intl.NumberFormat(locales, { style: 'currency', currency: currency, minimumFractionDigits: fractionDigits }).format(number);\r\n            return formatted;\r\n        }\r\n        console.log('url', `${config.hostReport1}`)\r\n\r\n        axios.post(`${config.hostReport1}`, {\r\n            shortid: 'WaIAVAU',\r\n            data\r\n        }).then(function (response) {\r\n            console.log(response);\r\n            let pdfData = 'data:application/pdf;base64,' + response.data\r\n            setDataPdf(pdfData)\r\n            setPdf(true)\r\n        }).catch(function (error) {\r\n            console.log(\"error\", error);\r\n        })\r\n    }\r\n    const onClosePdf = () => {\r\n        setPdf(false)\r\n    }\r\n    const onSubmit = e => {\r\n\r\n        console.log('startDate', startDate)\r\n        console.log('endDate', endDate)\r\n        console.log('customer', customer)\r\n        console.log('centerOfAttention', centerOfAttention)\r\n        console.log('serviceType', serviceType)\r\n        console.log('serviceStatus', serviceStatus)\r\n        let errores = validateForm()\r\n        if (errores === 0) {\r\n            let data = {\r\n                start: 0,\r\n                end: rowsPerPage,\r\n                paginate: true,\r\n                startDate,\r\n                endDate,\r\n                customer,\r\n                centerOfAttention,\r\n                serviceType,\r\n                serviceStatus\r\n            }\r\n\r\n            reportAttention(data).then(response => {\r\n                console.log(response)\r\n            })\r\n            // console.log('start', startDate)\r\n            // console.log('end', endDate)\r\n            // reportsServices({ variables: { start: page, end: rowsPerPage, startDate: startDate, endDate: endDate, status: serviceStatus, type: serviceType } })\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n            <Container maxWidth=\"lg\">\r\n                <Paper className={classes.paper}>\r\n                    <form encType={'multipart/form-data'}\r\n                        onSubmit={e => {\r\n                            e.preventDefault()\r\n                            onSubmit()\r\n                        }} >\r\n                        <Grid container >\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <Typography>Reporte de atenciones</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={3}>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        disableFuture\r\n                                        format=\"yyyy-MM-dd\"\r\n                                        margin=\"dense\"\r\n                                        id=\"date-picker-inline\"\r\n                                        label=\"Fecha inicial\"\r\n                                        value={startDate}\r\n                                        onChange={onChangeStartDate}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        format=\"yyyy-MM-dd\"\r\n                                        margin=\"dense\"\r\n                                        id=\"date-picker-inline\"\r\n                                        label=\"Fecha final\"\r\n                                        value={endDate}\r\n                                        onChange={onChangeEndDate}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Cliente\"\r\n                                    value={customer}\r\n                                    onChange={onChangeCustomer}>\r\n                                    {\r\n                                        customers.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.name}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Centro de atención\"\r\n                                    value={centerOfAttention}\r\n                                    onChange={onChangeCenterOfAttention}>\r\n                                    {\r\n                                        centerOfAttentions.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.title}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Tipo de atención\"\r\n                                    value={serviceType}\r\n                                    onChange={onChangeServiceType}>\r\n                                    {\r\n                                        serviceTypes.map(option => (\r\n                                            <MenuItem key={option._id} value={option._id} >\r\n                                                {option.type}\r\n                                            </MenuItem>))\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n\r\n                            <Grid item xs={2} sm={3}>\r\n                                <TextField\r\n                                    select\r\n                                    style={{ width: 200 }}\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    label=\"Estado de la atención\"\r\n                                    value={serviceStatus}\r\n                                    onChange={onChangeServiceStatus}>\r\n                                    {\r\n                                        serviceStatuses.map(option => (\r\n                                            <MenuItem key={option.id} value={option.id} >\r\n                                                {option.text}\r\n                                            </MenuItem>))\r\n\r\n                                    }\r\n                                </TextField>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2} sm={12}>\r\n                                <Button type=\"submit\" variant=\"contained\" color='primary' style={{ marginTop: 20 }}>Consultar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Paper>\r\n\r\n            </Container>\r\n            <Paper className={classes.paper}>\r\n                <TableContainer className={classes.container} style={{ width: \"100%\" }}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Fecha</TableCell>\r\n                                <TableCell>Cliente</TableCell>\r\n                                <TableCell>Tipo de servicio</TableCell>\r\n                                <TableCell>Técnico</TableCell>\r\n                                <TableCell>Ingeniero</TableCell>\r\n                                <TableCell align=\"right\">Total</TableCell>\r\n\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                informations.map(service => {\r\n                                    return (\r\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={service.id}>\r\n                                            <TableCell><Moment format=\"ll\">{new Date(service.date)}</Moment></TableCell>\r\n                                            <TableCell>{service.customer.names}</TableCell>\r\n                                            <TableCell>{service.typeService === 1 ? \"Residencial\" : \"Crédito\"}</TableCell>\r\n                                            <TableCell>{service.technical ? service.technical.names : \"\"}</TableCell>\r\n                                            <TableCell>{service.engineer ? service.engineer.names : \"\"}</TableCell>\r\n                                            <TableCell align=\"right\"><NumberFormat value={service.subTotal} displayType={'text'} thousandSeparator={true} prefix={'$'} /></TableCell>\r\n\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                        </TableBody>\r\n                        {\r\n                            informations.length > 0\r\n                                ? <TableFooter>\r\n                                    <TableRow hover>\r\n                                        <TableCell>\r\n                                            <FaPrint className={classes.icon} onClick={onPrint} />\r\n                                        </TableCell>\r\n                                        <TableCell colSpan={7} align=\"right\">\r\n                                            <Typography variant=\"h3\">\r\n                                                <NumberFormat value={total} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableFooter>\r\n                                : null\r\n                        }\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={totalFields}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={onChangePage}\r\n                    onChangeRowsPerPage={onChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n\r\n\r\n            <Dialog\r\n                maxWidth=\"lg\"\r\n                open={pdf}\r\n                onClose={onClosePdf}\r\n                aria-labelledby=\"draggable-dialog-title\">\r\n                <DialogTitle id=\"draggable-dialog-title\">Reporte de servicios</DialogTitle>\r\n                <DialogContent>\r\n                    <iframe src={dataPdf} title=\"Imprimir\" height=\"900px\" width=\"600px\" ></iframe>\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={onClosePdf} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default ReportServices "],"sourceRoot":""}