{"version":3,"sources":["views/Maintenances/MaintenanceExpiration.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","height","minWidth","input","display","padding","valueContainer","flexWrap","flex","alignItems","overflow","chip","margin","spacing","chipFocused","backgroundColor","emphasize","palette","type","grey","noOptionsMessage","singleValue","fontSize","placeholder","position","left","bottom","divider","paper","color","text","secondary","button","fab","marginTop","float","extendedIcon","marginRight","formControl","MaintenanceExpiration","props","useEffect","listCustomers","then","response","setCustomers","customers","centerOfAttention","setCustomer","customer","classes","useState","centersOfAttention","setCentersOfAttention","setCenterOfAttention","value","setValue","time","setTime","setType","errorValue","setErrorValue","errorTextValue","setErrorTextValue","validateValue","val","undefined","toString","trim","onSubmit","_","errors","validateForm","data","Number","console","log","updateTimeExpiration","status","toast","info","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","error","message","maxWidth","className","encType","e","preventDefault","container","width","fullWidth","select","clsx","textField","variant","label","onChange","target","listCenterOfAttention","map","key","_id","name","title","helperText","autoComplete","id","item","xs","sm"],"mappings":"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","file":"static/js/19.43185116.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport { emphasize, makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport clsx from 'clsx';\r\nimport { Button } from '@material-ui/core';\r\nimport PropTypes from \"prop-types\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { listCustomers, listCenterOfAttention, updateTimeExpiration } from '../../api/api';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n    minWidth: 290\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    padding: 0,\r\n    height: \"auto\"\r\n  },\r\n  valueContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[300]\r\n        : theme.palette.grey[700],\r\n      0.08\r\n    )\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  singleValue: {\r\n    fontSize: 16\r\n  },\r\n  placeholder: {\r\n    position: \"absolute\",\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16\r\n  },\r\n\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    color: theme.palette.text.secondary,\r\n\r\n  },\r\n  button:\r\n  {\r\n    margin: theme.spacing(1),\r\n  },\r\n  fab:\r\n  {\r\n    marginTop: -2,\r\n    float: \"right\"\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.shape({\r\n      current: PropTypes.any.isRequired\r\n    })\r\n  ])\r\n}\r\nconst MaintenanceExpiration = props => {\r\n\r\n  useEffect(() => {\r\n\r\n    listCustomers().then(response => {\r\n      setCustomers(response.customers);\r\n      // if (props.centerOfAttention) {\r\n      //   setCustomer(props.centerOfAttention.customer);\r\n      // }\r\n    });\r\n    if (props.centerOfAttention) {\r\n      // setName(props.centerOfAttention.title);\r\n      // setDescription(props.centerOfAttention.description);\r\n      setCustomer(props.centerOfAttention.customer);\r\n\r\n    }\r\n\r\n  }, [])\r\n\r\n\r\n  const classes = useStyles()\r\n\r\n  const [customers, setCustomers] = useState([]);\r\n  const [customer, setCustomer] = useState();\r\n  const [centersOfAttention, setCentersOfAttention] = useState([]);\r\n  const [centerOfAttention, setCenterOfAttention] = useState(\"\");\r\n  const [value, setValue] = useState('');\r\n  const [time, setTime] = useState('semiannual');\r\n  const [type, setType] = useState('');\r\n  const [errorValue, setErrorValue] = useState(false)\r\n  const [errorTextValue, setErrorTextValue] = useState('')\r\n\r\n  const onChangeValue = e => {\r\n    setValue(e.target.value);\r\n    validateValue(e.target.value);\r\n  }\r\n  const onChangeTime = e => {\r\n    setTime(e.target.value);\r\n  }\r\n  const onChangeType = e => {\r\n    setType(e.target.value);\r\n  }\r\n\r\n  const onChangeCustomer = e => {\r\n    setCustomer(e.target.value);\r\n    listCenterOfAttention({ customer: e.target.value }).then(response => {\r\n      setCentersOfAttention(response.centersOfAttention);\r\n    })\r\n  }\r\n  const onChangeCenterOfAttention = e => {\r\n    setCenterOfAttention(e.target.value);\r\n\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let errors = 0\r\n    errors += validateValue()\r\n    return errors\r\n  }\r\n\r\n  const validateValue = (val) => {\r\n    let text = val !== undefined ? val : value\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorValue(true)\r\n      setErrorTextValue('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorValue(false)\r\n      setErrorTextValue('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const onSubmit = _ => {\r\n\r\n    let errores = validateForm()\r\n\r\n    if (errores === 0) {\r\n\r\n      let data = {\r\n        value: Number(value),\r\n        time,\r\n        type,\r\n        centerOfAttention,\r\n      }\r\n      console.log(data)\r\n\r\n\r\n      updateTimeExpiration(data).then(response => {\r\n        console.log('response', response);\r\n        if (response.status == 'success') {\r\n          toast.info('Proyecto registrado exitosamente', {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        } else {\r\n          toast.error(response.message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        }\r\n\r\n      });\r\n    } else {\r\n      toast.error('Faltan datos por llenar', {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <ToastContainer />\r\n      <Container maxWidth=\"md\">\r\n\r\n        <Paper className={classes.paper}>\r\n          <form encType={'multipart/form-data'}\r\n            onSubmit={e => {\r\n              e.preventDefault()\r\n              onSubmit()\r\n            }} >\r\n            <Grid container spacing={3}>\r\n\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell width={400}>\r\n                      Cliente\r\n                    </TableCell>\r\n                    <TableCell width={400}>\r\n                      Centro de atención\r\n                    </TableCell>\r\n                    <TableCell width={300}>\r\n                      Tipo\r\n                    </TableCell>\r\n                    <TableCell width={300}>\r\n                      Tiempo\r\n                    </TableCell>\r\n                    <TableCell width={300}>\r\n                      Medida\r\n                    </TableCell>\r\n\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell>\r\n                      <TextField\r\n                        fullWidth\r\n                        select\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant=\"outlined\"\r\n                        label=\"Cliente\"\r\n                        margin=\"dense\"\r\n                        value={customer}\r\n                        onChange={onChangeCustomer}\r\n                      >\r\n                        {\r\n                          customers.map(customer => {\r\n                            return (\r\n                              <MenuItem key={customer._id} value={customer._id}>{customer.name}</MenuItem>\r\n                            )\r\n                          })\r\n                        }\r\n                      </TextField>\r\n                    </TableCell>\r\n                    <TableCell >\r\n                      <TextField\r\n                        fullWidth\r\n                        select\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant=\"outlined\"\r\n                        label=\"Centro de atención\"\r\n                        margin=\"dense\"\r\n                        value={centerOfAttention}\r\n                        onChange={onChangeCenterOfAttention}\r\n                      >\r\n                        {\r\n                          centersOfAttention.map(centerOfAttention => {\r\n                            return (\r\n                              <MenuItem\r\n                                key={centerOfAttention._id}\r\n                                value={centerOfAttention._id}>\r\n                                {centerOfAttention.title}\r\n                              </MenuItem>\r\n                            )\r\n                          })\r\n                        }\r\n                      </TextField>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        fullWidth\r\n                        select\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant=\"outlined\"\r\n                        label=\"Medida\"\r\n                        margin=\"dense\"\r\n                        value={type}\r\n                        onChange={onChangeType}\r\n                      >\r\n                        <MenuItem key={\"semiannual\"} value={\"semiannual\"}>Vencimiento semestral</MenuItem>\r\n                        <MenuItem key={\"provisioning\"} value={\"provisioning\"}>Vencimiento aprovisionamiento</MenuItem>\r\n                      </TextField>\r\n\r\n                    </TableCell>\r\n                    <TableCell width={200}>\r\n                      <TextField\r\n                        fullWidth\r\n                        error={errorValue}\r\n                        helperText={errorTextValue}\r\n                        margin=\"dense\"\r\n                        autoComplete='off'\r\n                        id=\"outlined-simple-start-adornment\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant=\"outlined\"\r\n                        label=\"Tiempo\"\r\n                        value={value}\r\n                        onChange={onChangeValue} />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        fullWidth\r\n                        select\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant=\"outlined\"\r\n                        label=\"Medida\"\r\n                        margin=\"dense\"\r\n                        value={time}\r\n                        onChange={onChangeTime}\r\n                      >\r\n                        <MenuItem key={\"year\"} value={\"year\"}>Año</MenuItem>\r\n                        <MenuItem key={\"month\"} value={\"month\"}>Mes</MenuItem>\r\n                        <MenuItem key={\"week\"} value={\"week\"}>Semana</MenuItem>\r\n                        <MenuItem key={\"day\"} value={\"day\"}>Dia</MenuItem>\r\n                        <MenuItem key={\"hour\"} value={\"hour\"}>Hora</MenuItem>\r\n                        <MenuItem key={\"minute\"} value={\"minute\"}>Minuto</MenuItem>\r\n                      </TextField>\r\n                    </TableCell>\r\n\r\n                  </TableRow>\r\n\r\n                </TableBody>\r\n              </Table>\r\n\r\n              <Grid item xs={2} sm={3}>\r\n                <Button type=\"submit\" variant=\"contained\" color='primary'>\r\n                  Guardar\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </Paper>\r\n\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default MaintenanceExpiration"],"sourceRoot":""}