{"version":3,"sources":["views/Maintenances/pages/MaintenanceInfo.js","views/Maintenances/ImageDetail.js","views/Maintenances/pages/BoardsInfo.js","views/Maintenances/pages/AroundInfo.js","views/Maintenances/pages/OutletSamplingInfo.js","views/Maintenances/MaintenanceDetail.js","views/Maintenances/MaintenanceForm.js","views/Maintenances/Maintenances.js"],"names":["MaintenanceInfo","props","useState","maintenance","setMaintenance","observations","setObservations","loading","setLoading","useEffect","observation","className","name","type","TextField","autoComplete","multiline","margin","label","value","onChange","e","target","fullWidth","CircularProgress","Button","onClick","data","id","_id","onUpdateObservationMaintenance","then","response","status","toast","success","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","error","color","ImageDetail","url","setUrl","src","zoomSrc","Transition","React","forwardRef","ref","Slide","direction","openDetailImage","setOpenDetailImage","setBoards","board","setBoard","cellsBefore","setCellsBefore","cellsVoltaje","setCellsVoltaje","cellsCorriente","setCellsCorriente","cellsAfter","setCellsAfter","cellsFinding","setCellsFinding","boards","onSelectBoard","_","console","log","newItemsBoard","itemsBoards","map","item","photos","length","newCellBefore","filter","itemBoard","mode","cell","newPhotos","photo","data-value","config","urlImages","showImages","newCellVoltaje","newCellCorriente","newCellsAfter","newCellsFinding","onOpenItemBoard","currentCell","openItemBoard","tmpCellsBefore","tmpCellsAfter","tmpCellsVoltaje","tmpCellsCorriente","closeDatailImage","Card","CardHeader","title","Divider","CardContent","Table","TableBody","TableRow","TableCell","i","key","Chip","size","variant","onUpdateObservationBoard","itemFinding","letterOne","style","backgroundColor","colorOne","autoPlay","infinite","mouseTracking","items","disableButtonsControls","controlsStrategy","animationDuration","autoPlayInterval","Math","random","itemBefore","itemVoltaje","textColorOne","colorTwo","textColorTwo","letterTwo","Dialog","maxWidth","open","onClose","TransitionComponent","DialogContent","DialogActions","autoFocus","AroundInfo","cellsOutletSampling","setCellOutletSampling","newCellsOutletSampling","aroundItems","outletSampling","OutletSampling","TabPanel","children","index","other","role","hidden","aria-labelledby","Box","p","a11yProps","useStyles","makeStyles","theme","root","flexGrow","height","minWidth","input","display","padding","valueContainer","flexWrap","flex","alignItems","overflow","chip","spacing","chipFocused","emphasize","palette","grey","noOptionsMessage","singleValue","fontSize","placeholder","left","bottom","divider","paper","text","secondary","button","fab","marginTop","float","extendedIcon","marginRight","formControl","MaintenanceDetail","classes","setValue","AppBar","Tabs","newValue","scrollButtons","indicatorColor","textColor","aria-label","Tab","icon","BoardsInfo","OutletSamplingInfo","MaintenanceForm","listCustomers","setCustomers","customers","person","setType","disabled","customer","setCustomer","description","setDescription","errorDescription","setErrorDescription","errorTextDescription","setErrorTextDescription","validateDescription","toString","trim","onSubmitPerson","errors","validateForm","updateUser","info","createMaintenance","onRefreshMaintenances","Container","Paper","encType","onSubmit","preventDefault","Grid","container","xs","sm","select","clsx","textField","MenuItem","Autocomplete","getOptionLabel","option","toUpperCase","filterOptions","x","options","getOptionSelected","onInputChange","newInputValue","search","renderInput","params","renderTags","tagValue","getTagProps","indexOf","renderOption","Typography","helperText","iconWidth","width","DialogTitle","withStyles","closeButton","right","top","disableTypography","IconButton","Maintenances","downloaded","location","pathname","setDownloaded","start","end","rowsPerPage","paginate","listMaintenances","setMaintenances","maintenances","setTotalMaintenances","count","totalMaintenances","page","setPage","setRowsPerPage","setOpen","openDetailMaintenance","setOpenDetailMaintenance","openMaintenanceForm","setOpenMaintenanceForm","openObservations","setOpenObservations","pdf","setPdf","dataPdf","onCloseDeleteMaintenance","onDetailMaintenance","onOpenObservation","closeDatailMaintenance","onCloseMaintenanceForm","onCloseObservations","onClosePdf","sendReportMaintenance","newMaintenances","currentMaintenance","downloading","onSendReportMaintenance","Swal","fire","showConfirmButton","timer","window","urlPdf","catch","Fab","TableContainer","component","TableHead","Tooltip","placement","TablePagination","rowsPerPageOptions","onChangePage","newPage","onChangeRowsPerPage","event","DialogContentText","deleteMaintenance","fullScreen","onSaveObservations"],"mappings":"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","file":"static/js/10.a8ef3b61.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react'\r\nimport config from '../../../config';\r\n\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { onUpdateObservationMaintenance } from '../../../api/api';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst MaintenanceInfo = props => {\r\n\r\n    const [maintenance, setMaintenance] = useState(null);\r\n    const [observations, setObservations] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (props.maintenance) {\r\n            setMaintenance(props.maintenance);\r\n            setObservations(props.maintenance.observation)\r\n        }\r\n    }, [maintenance, props.maintenance]);\r\n\r\n    const updateObservation = () => {\r\n        setLoading(true);\r\n        let data = {\r\n            id: maintenance._id,\r\n            observations\r\n        }\r\n        onUpdateObservationMaintenance(data).then(response => {\r\n            setLoading(false);\r\n            if (response.status == 'success') {\r\n                toast.success(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            } else {\r\n                toast.error(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        })\r\n    }\r\n    const onChangeDescription = e => {\r\n        setObservations(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer />\r\n            <div className='maintenance__info'>\r\n                {\r\n                    maintenance ?\r\n                        <Fragment>\r\n                            <div className='maintenance_name'>{maintenance.name}</div>\r\n                            <div className='maintenance_type'>{maintenance.type === 'tri' ? 'Trifásico' : 'Monofásico'}</div>\r\n                            <div className='board_observation'>\r\n                                <Fragment>\r\n                                    <TextField\r\n                                        autoComplete='off'\r\n                                        multiline\r\n                                        margin=\"dense\"\r\n                                        label=\"Observaciones\"\r\n                                        value={observations}\r\n                                        onChange={onChangeDescription}\r\n                                        fullWidth\r\n                                    />\r\n                                    {\r\n                                        loading ?\r\n                                            <Fragment>\r\n                                                <CircularProgress />\r\n                                            </Fragment> :\r\n                                            <Button onClick={updateObservation} color=\"primary\">\r\n                                                Actualizar Observaciones\r\n                                            </Button>\r\n                                    }\r\n                                </Fragment>\r\n                            </div>\r\n                        </Fragment>\r\n                        : ''\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default MaintenanceInfo","import React, { useState, useEffect, Fragment } from 'react'\r\n\r\nimport InnerImageZoom from 'react-inner-image-zoom';\r\nimport 'react-inner-image-zoom/lib/InnerImageZoom/styles.min.css';\r\n\r\n\r\n\r\nconst ImageDetail = props => {\r\n\r\n    const [url, setUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n\r\n        setUrl(props.url);\r\n    }, [props.url]);\r\n\r\n    return (\r\n        <div >\r\n            {\r\n                url ?\r\n                    <InnerImageZoom src={url} zoomSrc={url} />\r\n                    : ''\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageDetail","import React, { useState, useEffect, Fragment } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport config from '../../../config';\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Divider,\r\n    Table,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport ImageDetail from '../ImageDetail';\r\nimport { BiShowAlt } from 'react-icons/bi';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { openItemBoard, onUpdateObservationBoard } from '../../../api/api';\r\nimport AliceCarousel from 'react-alice-carousel';\r\nimport 'react-alice-carousel/lib/alice-carousel.css';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n})\r\n\r\n\r\nconst MaintenanceInfo = props => {\r\n\r\n    const [maintenance, setMaintenance] = useState(null);\r\n    const [openDetailImage, setOpenDetailImage] = useState(false);\r\n    const [url, setUrl] = useState('');\r\n    const [observations, setObservations] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [boards, setBoards] = useState([]);\r\n    const [type, setType] = useState(\"\");\r\n    const [board, setBoard] = useState(null);\r\n    const [cellsBefore, setCellsBefore] = useState([]);\r\n    const [cellsVoltaje, setCellsVoltaje] = useState([]);\r\n    const [cellsCorriente, setCellsCorriente] = useState([]);\r\n    const [cellsAfter, setCellsAfter] = useState([]);\r\n    const [cellsFinding, setCellsFinding] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setMaintenance(props.maintenance);\r\n        if (props.maintenance) {\r\n            setBoards(props.maintenance.boards);\r\n\r\n        }\r\n    }, [type, maintenance, props.maintenance]);\r\n\r\n    const updateObservation = () => {\r\n        console.log(observations);\r\n        setLoading(true);\r\n        let data = {\r\n            id: board._id,\r\n            observations\r\n        }\r\n        onUpdateObservationBoard(data).then(response => {\r\n            setLoading(false);\r\n            if (response.status == 'success') {\r\n                toast.success(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            } else {\r\n                toast.error(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    const onSelectBoard = board => _ => {\r\n        console.log(board);\r\n        setObservations(board.observations);\r\n        let newItemsBoard = board.itemsBoards.map(item => {\r\n            if (item.photos.length === 0) {\r\n                item.photos = [{\r\n                    url: 'default.png',\r\n                    type: 'remote'\r\n                }];\r\n            }\r\n\r\n            return item\r\n        });\r\n        board.itemsBoards = newItemsBoard;\r\n        setBoard(board);\r\n        setObservations(board.observation)\r\n        console.log(board.observation);\r\n\r\n        let tmpCellsBefore = board.itemsBoards.filter(itemBoard => itemBoard.item.mode == 'before')\r\n        const newCellBefore = tmpCellsBefore.map(cell => {\r\n            const newPhotos = cell.photos.map(photo => {\r\n                console.log(photo)\r\n                if (!photo.props) {\r\n                    return <div className=\"item\" data-value=\"1\">\r\n                        <img\r\n                            src={`${config.urlImages}${photo.url}`}\r\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\r\n                        />\r\n                    </div>\r\n                } else {\r\n                    return photo;\r\n                }\r\n            });\r\n            cell.photos = newPhotos;\r\n\r\n            return cell;\r\n        });\r\n        setCellsBefore(newCellBefore);\r\n\r\n\r\n        let tmpCellsVoltaje = board.itemsBoards.filter(itemBoard => itemBoard.item.type == 'voltaje')\r\n        const newCellVoltaje = tmpCellsVoltaje.map(cell => {\r\n            const newPhotos = cell.photos.map(photo => {\r\n                console.log(photo)\r\n                if (!photo.props) {\r\n                    return <div className=\"item\" data-value=\"1\">\r\n                        <img\r\n                            src={`${config.urlImages}${photo.url}`}\r\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\r\n                        />\r\n                    </div>\r\n                } else {\r\n                    return photo;\r\n                }\r\n            });\r\n            cell.photos = newPhotos;\r\n\r\n            return cell;\r\n        });\r\n        setCellsVoltaje(newCellVoltaje)\r\n\r\n        let tmpCellsCorriente = board.itemsBoards.filter(itemBoard => itemBoard.item.type == 'corriente')\r\n        const newCellCorriente = tmpCellsCorriente.map(cell => {\r\n            const newPhotos = cell.photos.map(photo => {\r\n                console.log(photo)\r\n                if (!photo.props) {\r\n                    return <div className=\"item\" data-value=\"1\">\r\n                        <img\r\n                            src={`${config.urlImages}${photo.url}`}\r\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\r\n                        />\r\n                    </div>\r\n                } else {\r\n                    return photo;\r\n                }\r\n            });\r\n            cell.photos = newPhotos;\r\n\r\n            return cell;\r\n        });\r\n        setCellsCorriente(newCellCorriente)\r\n\r\n        let tmpCellsAfter = board.itemsBoards.filter(itemBoard => itemBoard.item.mode == 'after')\r\n        const newCellsAfter = tmpCellsAfter.map(cell => {\r\n            const newPhotos = cell.photos.map(photo => {\r\n                console.log(photo)\r\n                if (!photo.props) {\r\n                    return <div className=\"item\" data-value=\"1\">\r\n                        <img\r\n                            src={`${config.urlImages}${photo.url}`}\r\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\r\n                        />\r\n                    </div>\r\n                } else {\r\n                    return photo;\r\n                }\r\n            });\r\n            cell.photos = newPhotos;\r\n\r\n            return cell;\r\n        });\r\n\r\n        setCellsAfter(newCellsAfter)\r\n\r\n        let tmpCellsFinding = board.itemsBoards.filter(itemBoard => itemBoard.item.mode == 'finding')\r\n        const newCellsFinding = tmpCellsFinding.map(cell => {\r\n            const newPhotos = cell.photos.map(photo => {\r\n                if (!photo.props) {\r\n                    return <div className=\"item\" data-value=\"1\">\r\n                        <img\r\n                            src={`${config.urlImages}${photo.url}`}\r\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\r\n                        />\r\n                    </div>\r\n                } else {\r\n                    return photo;\r\n                }\r\n            });\r\n            cell.photos = newPhotos;\r\n\r\n            return cell;\r\n        });\r\n        setCellsFinding(newCellsFinding)\r\n    }\r\n\r\n    const showImages = url => _ => {\r\n        setUrl(url);\r\n        setOpenDetailImage(true);\r\n    }\r\n\r\n    const onOpenItemBoard = currentCell => _ => {\r\n        openItemBoard(currentCell._id).then(response => {\r\n\r\n            if (response.status === 'success') {\r\n                switch (currentCell.item.mode) {\r\n                    case 'before':\r\n                        let tmpCellsBefore = cellsBefore.map(cell => {\r\n                            console.log('cell ', cell)\r\n                            if (cell._id === currentCell._id) {\r\n                                cell.status = 'activo';\r\n                            }\r\n                            return cell;\r\n                        })\r\n                        setCellsBefore(tmpCellsBefore);\r\n                        break;\r\n                    case 'after':\r\n                        let tmpCellsAfter = cellsAfter.map(cell => {\r\n                            if (cell._id === currentCell._id) {\r\n                                cell.status = 'activo';\r\n                            }\r\n                            return cell;\r\n                        })\r\n                        setCellsAfter(tmpCellsAfter)\r\n                        break;\r\n                }\r\n                switch (currentCell.item.type) {\r\n                    case 'voltaje':\r\n                        let tmpCellsVoltaje = cellsBefore.map(cell => {\r\n                            if (cell._id === currentCell._id) {\r\n                                cell.status = 'activo';\r\n                            }\r\n                            return cell;\r\n                        })\r\n                        setCellsVoltaje(tmpCellsVoltaje);\r\n                        break;\r\n                    case 'corriente':\r\n                        let tmpCellsCorriente = cellsCorriente.map(cell => {\r\n                            if (cell._id === currentCell._id) {\r\n                                cell.status = 'activo';\r\n                            }\r\n                            return cell;\r\n                        })\r\n                        setCellsCorriente(tmpCellsCorriente);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    const closeDatailImage = () => {\r\n        setOpenDetailImage(false)\r\n    }\r\n\r\n    const onChangeDescription = e => {\r\n        setObservations(e.target.value);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer />\r\n            <Card>\r\n                <CardHeader title=\"TABLEROS\" />\r\n                <Divider />\r\n                <CardContent >\r\n                    <Table>\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <div className='board__item__wrapper'>\r\n                                        {\r\n                                            maintenance ?\r\n                                                maintenance.boards.map((board, i) => {\r\n                                                    return (<div key={i} className='board_item'>\r\n                                                        <Chip\r\n                                                            size='small'\r\n                                                            color='primary'\r\n                                                            label={board.name}\r\n                                                            variant=\"outlined\"\r\n                                                            onClick={onSelectBoard(board)} />\r\n                                                    </div>)\r\n                                                })\r\n                                                : ''\r\n                                        }\r\n                                    </div>\r\n\r\n                                    <div className='board_observations'>\r\n                                        <Fragment>\r\n                                            <TextField\r\n                                                autoComplete='off'\r\n                                                multiline\r\n                                                margin=\"dense\"\r\n                                                label=\"Observaciones\"\r\n                                                value={observations}\r\n                                                onChange={onChangeDescription}\r\n                                                fullWidth\r\n                                            />\r\n                                            {\r\n                                                loading ?\r\n                                                    <Fragment>\r\n                                                        <CircularProgress />\r\n                                                    </Fragment> :\r\n                                                    <Button onClick={updateObservation} color=\"primary\">\r\n                                                        Actualizar Observaciones\r\n                                                    </Button>\r\n                                            }\r\n                                        </Fragment>\r\n                                    </div>\r\n\r\n                                </TableCell>\r\n                            </TableRow>\r\n\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <div className='maintenance__wrapper'>\r\n\r\n                                        <div className='maintenance__board__wrapper'>\r\n                                            <Fragment>\r\n                                                {\r\n                                                    cellsFinding.length > 0 ?\r\n                                                        <Fragment>\r\n                                                            <div className='title_action'>HALLAZGOS</div>\r\n                                                            <div className='aux_title'><span className='bold'> Titulo:</span> {cellsFinding[0].title}</div>\r\n                                                            <div className='aux_observations'><span className='bold'>Observaciones:</span> {cellsFinding[0].observations}</div>\r\n                                                            <div className='board__item__wrapper'>\r\n                                                                {\r\n                                                                    cellsFinding.map((itemFinding, i) => {\r\n                                                                        return (\r\n                                                                            <div className=\"card\" key={i}>\r\n                                                                                <div className='card_title'>{itemFinding.item.title}</div>\r\n                                                                                {\r\n                                                                                    itemFinding.item.letterOne !== '' ?\r\n                                                                                        <div className='card_colors'>\r\n                                                                                            <div className='card_color_left' style={{ backgroundColor: `#FCF338` }}>{itemFinding.item.colorOne}</div>\r\n                                                                                            <div className='card_color_right'></div>\r\n                                                                                        </div>\r\n                                                                                        : ''\r\n                                                                                }\r\n                                                                                <div className='card_header'>\r\n                                                                                    {\r\n                                                                                        itemFinding.status === 'inactivo'\r\n                                                                                            ?\r\n                                                                                            <div className='show__wrapper'>\r\n                                                                                                <BiShowAlt className='icon' onClick={onOpenItemBoard(itemFinding)} />\r\n                                                                                                <div className='show_text'>Esta marcación se encuentra oculta pulse en el icono para mostrar</div>\r\n                                                                                            </div>\r\n                                                                                            : ''\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='card_body'>\r\n                                                                                    <div className=\"slide-container\">\r\n                                                                                        <AliceCarousel\r\n                                                                                            autoPlay\r\n                                                                                            infinite={true}\r\n                                                                                            mouseTracking\r\n                                                                                            items={itemFinding.photos}\r\n                                                                                            disableButtonsControls={true}\r\n                                                                                            controlsStrategy=\"alternate\"\r\n                                                                                            animationDuration={1000}\r\n                                                                                            autoPlayInterval={Math.random() * (3000 - 500) + 500}\r\n                                                                                        />\r\n\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n\r\n                                                            </div>\r\n                                                        </Fragment> : ''\r\n                                                }\r\n                                                {\r\n                                                    cellsBefore.length > 0 ?\r\n                                                        <Fragment>\r\n                                                            <div className='title_action'>ANTES DE MANTENIMIENTO</div>\r\n                                                            <div className='board__item__wrapper'>\r\n                                                                {\r\n                                                                    cellsBefore.map((itemBefore, i) => {\r\n                                                                        return (\r\n                                                                            <div className=\"card\" key={i}>\r\n                                                                                <div className='card_title'>{itemBefore.item.title}</div>\r\n                                                                                {\r\n                                                                                    itemBefore.item.letterOne !== '' ?\r\n                                                                                        <div className='card_colors'>\r\n                                                                                            <div className='card_color_left' style={{ backgroundColor: `#FCF338` }}>{itemBefore.item.colorOne}</div>\r\n                                                                                            <div className='card_color_right'></div>\r\n                                                                                        </div>\r\n                                                                                        : ''\r\n                                                                                }\r\n                                                                                <div className='card_header'>\r\n                                                                                    {\r\n                                                                                        itemBefore.status === 'inactivo'\r\n                                                                                            ?\r\n                                                                                            <div className='show__wrapper'>\r\n                                                                                                <BiShowAlt className='icon' onClick={onOpenItemBoard(itemBefore)} />\r\n                                                                                                <div className='show_text'>Esta marcación se encuentra oculta pulse en el icono para mostrar</div>\r\n                                                                                            </div>\r\n                                                                                            : ''\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='card_body'>\r\n                                                                                    <div className=\"slide-container\">\r\n                                                                                        <AliceCarousel\r\n                                                                                            autoPlay\r\n                                                                                            infinite={true}\r\n                                                                                            mouseTracking\r\n                                                                                            items={itemBefore.photos}\r\n                                                                                            disableButtonsControls={true}\r\n                                                                                            controlsStrategy=\"alternate\"\r\n                                                                                            animationDuration={1000}\r\n                                                                                            autoPlayInterval={Math.random() * (3000 - 500) + 500}\r\n                                                                                        />\r\n\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n\r\n                                                            </div>\r\n                                                        </Fragment> : ''\r\n                                                }\r\n                                                {\r\n                                                    cellsVoltaje.length > 0 ?\r\n                                                        <Fragment>\r\n                                                            <div className='title_action'>VOLTAJES</div>\r\n                                                            <div className='board__item__wrapper'>\r\n\r\n                                                                {\r\n                                                                    cellsVoltaje.map((itemVoltaje, i) => {\r\n                                                                        return (\r\n                                                                            <div className=\"card\" key={i}>\r\n                                                                                <div className='card_title'>{itemVoltaje.item.title}</div>\r\n                                                                                {\r\n                                                                                    itemVoltaje.item.letterOne !== '' ?\r\n                                                                                        <div className='card_colors'>\r\n                                                                                            <div\r\n                                                                                                className='card_color_left'\r\n                                                                                                style={{\r\n                                                                                                    backgroundColor: `#${itemVoltaje.item.colorOne}`,\r\n                                                                                                    color: `#${itemVoltaje.item.textColorOne}`\r\n                                                                                                }}\r\n                                                                                            >\r\n                                                                                                {itemVoltaje.item.letterOne}\r\n                                                                                            </div>\r\n                                                                                            <div\r\n                                                                                                className='card_color_right'\r\n                                                                                                style={{\r\n                                                                                                    backgroundColor: `#${itemVoltaje.item.colorTwo}`,\r\n                                                                                                    color: `#${itemVoltaje.item.textColorTwo}`\r\n                                                                                                }}\r\n                                                                                            >\r\n                                                                                                {itemVoltaje.item.letterTwo}\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                        : ''\r\n                                                                                }\r\n                                                                                <div className='card_header'>\r\n                                                                                    {\r\n                                                                                        itemVoltaje.status === 'inactivo'\r\n                                                                                            ?\r\n                                                                                            <div className='show__wrapper'>\r\n                                                                                                <BiShowAlt className='icon' onClick={onOpenItemBoard(itemVoltaje)} />\r\n                                                                                                <div className='show_text'>Esta marcación se encuentra oculta pulse en el icono para mostrar</div>\r\n                                                                                            </div>\r\n                                                                                            : ''\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='card_body'>\r\n                                                                                    <AliceCarousel\r\n                                                                                        autoPlay\r\n                                                                                        infinite={true}\r\n                                                                                        mouseTracking\r\n                                                                                        items={itemVoltaje.photos}\r\n                                                                                        disableButtonsControls={true}\r\n                                                                                        controlsStrategy=\"alternate\"\r\n                                                                                        animationDuration={1000}\r\n                                                                                        autoPlayInterval={Math.random() * (3000 - 500) + 500}\r\n                                                                                    />\r\n\r\n                                                                                </div>\r\n                                                                                {\r\n                                                                                    <div className='card_footer'>\r\n                                                                                        <span className='text_value'>Valor:</span>\r\n                                                                                        {itemVoltaje.item.value}\r\n                                                                                    </div>\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n\r\n                                                            </div>\r\n                                                        </Fragment> : ''\r\n                                                }\r\n                                                {\r\n                                                    cellsCorriente.length > 0 ?\r\n                                                        <Fragment>\r\n                                                            <div className='title_action'>CORRIENTES</div>\r\n                                                            <div className='board__item__wrapper'>\r\n\r\n                                                                {\r\n                                                                    cellsCorriente.map((item, i) => {\r\n                                                                        return (\r\n                                                                            <div className=\"card\" key={i}>\r\n                                                                                <div className='card_title'>{item.item.title}</div>\r\n                                                                                {\r\n                                                                                    <div className='card_colors'>\r\n                                                                                        <div\r\n                                                                                            className='card_color'\r\n                                                                                            style={{\r\n                                                                                                backgroundColor: `#${item.item.colorOne}`,\r\n                                                                                                color: `#${item.item.textColorOne}`\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            {item.item.letterOne}\r\n                                                                                        </div>\r\n\r\n                                                                                    </div>\r\n                                                                                }\r\n                                                                                <div className='card_header'>\r\n                                                                                    {\r\n                                                                                        item.status === 'inactivo'\r\n                                                                                            ?\r\n                                                                                            <div className='show__wrapper'>\r\n                                                                                                <BiShowAlt className='icon' onClick={onOpenItemBoard(item)} />\r\n                                                                                                <div className='show_text'>Esta marcación se encuentra oculta pulse en el icono para mostrar</div>\r\n                                                                                            </div>\r\n                                                                                            : ''\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='card_body'>\r\n                                                                                    <AliceCarousel\r\n                                                                                        autoPlay\r\n                                                                                        infinite={true}\r\n                                                                                        mouseTracking\r\n                                                                                        items={item.photos}\r\n                                                                                        disableButtonsControls={true}\r\n                                                                                        controlsStrategy=\"alternate\"\r\n                                                                                        animationDuration={1000}\r\n                                                                                        autoPlayInterval={Math.random() * (3000 - 500) + 500}\r\n                                                                                    />\r\n\r\n                                                                                </div>\r\n                                                                                {\r\n                                                                                    <div className='card_footer'>\r\n                                                                                        <span className='text_value'>Valor:</span>\r\n                                                                                        {item.item.value}\r\n                                                                                    </div>\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n\r\n                                                            </div>\r\n                                                        </Fragment> : ''\r\n                                                }\r\n                                                {\r\n                                                    cellsAfter.length > 0 ?\r\n                                                        <Fragment>\r\n                                                            <div className='title_action'>DESPUES DE MANTENIMIENTO</div>\r\n                                                            <div className='board__item__wrapper'>\r\n                                                                {\r\n                                                                    cellsAfter.map((item, i) => {\r\n                                                                        return (\r\n                                                                            <div className=\"card\" key={i}>\r\n                                                                                <div className='card_title'>{item.item.title}</div>\r\n                                                                                {\r\n                                                                                    item.item.letterOne !== '' ?\r\n                                                                                        <div className='card_colors'>\r\n                                                                                            <div className='card_color_left' style={{ backgroundColor: `#FCF338` }}>{item.item.colorOne}</div>\r\n                                                                                            <div className='card_color_right'></div>\r\n                                                                                        </div>\r\n                                                                                        : ''\r\n                                                                                }\r\n                                                                                <div className='card_header'>\r\n                                                                                    {\r\n                                                                                        item.status === 'inactivo'\r\n                                                                                            ?\r\n                                                                                            <div className='show__wrapper'>\r\n                                                                                                <BiShowAlt className='icon' onClick={onOpenItemBoard(item)} />\r\n                                                                                                <div className='show_text'>Esta marcación se encuentra oculta pulse en el icono para mostrar</div>\r\n                                                                                            </div>\r\n                                                                                            : ''\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='card_body'>\r\n                                                                                    <div className=\"slide-container\">\r\n                                                                                        <AliceCarousel\r\n                                                                                            autoPlay\r\n                                                                                            infinite={true}\r\n                                                                                            mouseTracking\r\n                                                                                            items={item.photos}\r\n                                                                                            disableButtonsControls={true}\r\n                                                                                            controlsStrategy=\"alternate\"\r\n                                                                                            animationDuration={1000}\r\n                                                                                            autoPlayInterval={Math.random() * (3000 - 500) + 500}\r\n                                                                                        />\r\n\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n\r\n                                                            </div>\r\n                                                        </Fragment> : ''\r\n                                                }\r\n                                            </Fragment>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table >\r\n                </CardContent >\r\n                <Dialog\r\n                    fullWidth maxWidth=\"sm\"\r\n                    open={openDetailImage}\r\n                    onClose={closeDatailImage}\r\n                    TransitionComponent={Transition}>\r\n                    <DialogContent>\r\n                        <ImageDetail url={url} />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button autoFocus onClick={closeDatailImage} color=\"primary\">\r\n                            Cerrar\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n            </Card >\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default MaintenanceInfo","import React, { useState, useEffect, Fragment } from 'react'\r\nimport config from '../../../config';\r\n\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button\r\n} from '@material-ui/core';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport AliceCarousel from 'react-alice-carousel';\r\nimport 'react-alice-carousel/lib/alice-carousel.css';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ImageDetail from '../ImageDetail';\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n})\r\nconst AroundInfo = props => {\r\n\r\n    const [cellsOutletSampling, setCellOutletSampling] = useState([]);\r\n    const [url, setUrl] = useState('');\r\n    const [openDetailImage, setOpenDetailImage] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const newCellsOutletSampling = props.maintenance.aroundItems.map(outletSampling => {\r\n            const newPhotos = outletSampling.photos.map(photo => {\r\n                console.log(photo)\r\n                if (!photo.props) {\r\n                    return <div className=\"item\" data-value=\"1\">\r\n                        <img\r\n                            src={`${config.urlImages}${photo.url}`}\r\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\r\n                        />\r\n                    </div>\r\n                } else {\r\n                    return photo;\r\n                }\r\n            });\r\n            outletSampling.photos = newPhotos;\r\n\r\n            return outletSampling;\r\n        });\r\n        setCellOutletSampling(newCellsOutletSampling);\r\n\r\n    }, []);\r\n\r\n    const showImages = url => _ => {\r\n        setUrl(url);\r\n        console.log('Url', url)\r\n        setOpenDetailImage(true);\r\n    }\r\n    const closeDatailImage = () => {\r\n        setOpenDetailImage(false)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Table>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <div className='title_action'>IMAGENES DEL ENTORNO</div>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n\r\n                        <TableCell>\r\n                            <div className='board__item__wrapper'>\r\n\r\n                                {\r\n                                    cellsOutletSampling.map((item, i) => {\r\n                                        return (\r\n                                            <div className=\"card\" key={i}>\r\n                                                <div className='card_title'>{item.item.title}</div>\r\n                                                {\r\n                                                    item.item.letterOne !== '' ?\r\n                                                        <div className='card_colors'>\r\n                                                            <div className='card_color_left' style={{ backgroundColor: `#FCF338` }}>{item.item.colorOne}</div>\r\n                                                            <div className='card_color_right'></div>\r\n                                                        </div>\r\n                                                        : ''\r\n                                                }\r\n\r\n                                                <div className='card_body'>\r\n                                                    <div className=\"slide-container\">\r\n\r\n                                                        <AliceCarousel\r\n                                                            autoPlay\r\n                                                            infinite={true}\r\n                                                            mouseTracking\r\n                                                            items={item.photos}\r\n                                                            disableButtonsControls={true}\r\n                                                            controlsStrategy=\"alternate\"\r\n                                                            animationDuration={1000}\r\n                                                            autoPlayInterval={Math.random() * (3000 - 500) + 500}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                            </div>\r\n\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table >\r\n            <Dialog\r\n                fullWidth maxWidth=\"sm\"\r\n                open={openDetailImage}\r\n                onClose={closeDatailImage}\r\n                TransitionComponent={Transition}>\r\n                <DialogContent>\r\n                    <ImageDetail url={url} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={closeDatailImage} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default AroundInfo","import React, { useState, useEffect, Fragment } from 'react'\r\nimport config from '../../../config';\r\n\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button\r\n} from '@material-ui/core';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport AliceCarousel from 'react-alice-carousel';\r\nimport 'react-alice-carousel/lib/alice-carousel.css';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ImageDetail from '../ImageDetail';\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n})\r\nvar init = false;\r\nconst OutletSampling = props => {\r\n\r\n    console.log(props.maintenance);\r\n    const [cellsOutletSampling, setCellOutletSampling] = useState([]);\r\n    const [url, setUrl] = useState('');\r\n    const [didMount, setDidMount] = useState(false);\r\n    const [openDetailImage, setOpenDetailImage] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const newCellsOutletSampling = props.maintenance.outletSampling.map(outletSampling => {\r\n            const newPhotos = outletSampling.photos.map(photo => {\r\n                console.log(photo)\r\n                if (!photo.props) {\r\n                    return <div className=\"item\" data-value=\"1\">\r\n                        <img\r\n                            src={`${config.urlImages}${photo.url}`}\r\n                            onClick={showImages(`${config.urlImages}${photo.url}`)}\r\n                        />\r\n                    </div>\r\n                } else {\r\n                    return photo;\r\n                }\r\n            });\r\n            outletSampling.photos = newPhotos;\r\n\r\n            return outletSampling;\r\n        });\r\n        setCellOutletSampling(newCellsOutletSampling);\r\n\r\n    }, []);\r\n\r\n    const showImages = url => _ => {\r\n        setUrl(url);\r\n        console.log('Url', url)\r\n        setOpenDetailImage(true);\r\n    }\r\n    const closeDatailImage = () => {\r\n        setOpenDetailImage(false)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='maintenance__info'>\r\n                <div className='maintenance__wrapper'>\r\n\r\n                    <div className='maintenance__board__wrapper'>\r\n                        <Table>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        <div className='title_action'>MUESTREO DE TOMAS</div>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n\r\n                                    <TableCell>\r\n                                        <div className='board__item__wrapper'>\r\n\r\n                                            {\r\n                                                cellsOutletSampling.map((item, i) => {\r\n                                                    return (\r\n                                                        <div className=\"card\" key={i}>\r\n                                                            <div className='card_title'>{item.item.title}</div>\r\n                                                            {\r\n                                                                item.item.letterOne !== '' ?\r\n                                                                    <div className='card_colors'>\r\n                                                                        <div className='card_color_left' style={{ backgroundColor: `#FCF338` }}>{item.item.colorOne}</div>\r\n                                                                        <div className='card_color_right'></div>\r\n                                                                    </div>\r\n                                                                    : ''\r\n                                                            }\r\n\r\n                                                            <div className='card_body'>\r\n                                                                <div className=\"slide-container\">\r\n\r\n                                                                    <AliceCarousel\r\n                                                                        autoPlay\r\n                                                                        infinite={true}\r\n                                                                        mouseTracking\r\n                                                                        items={item.photos}\r\n                                                                        disableButtonsControls={true}\r\n                                                                        controlsStrategy=\"alternate\"\r\n                                                                        animationDuration={1000}\r\n                                                                        autoPlayInterval={Math.random() * (3000 - 500) + 500}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n\r\n                                        </div>\r\n\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table >\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Dialog\r\n                fullWidth maxWidth=\"sm\"\r\n                open={openDetailImage}\r\n                onClose={closeDatailImage}\r\n                TransitionComponent={Transition}>\r\n                <DialogContent>\r\n                    <ImageDetail url={url} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={closeDatailImage} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default OutletSampling","import React, { useState, useEffect, Fragment } from 'react'\r\nimport { emphasize, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport 'react-slideshow-image/dist/styles.css';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport MaintenanceInfo from './pages/MaintenanceInfo'\r\nimport BoardsInfo from './pages/BoardsInfo'\r\nimport AroundInfo from './pages/AroundInfo'\r\nimport OutletSamplingInfo from './pages/OutletSamplingInfo'\r\nimport { BsClipboard } from 'react-icons/bs'\r\nimport { AiOutlinePicture } from 'react-icons/ai'\r\nimport { FiImage } from 'react-icons/fi'\r\nimport { BsInfoCircle } from 'react-icons/bs'\r\n\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-force-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-force-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <div>{children}</div>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `scrollable-force-tab-${index}`,\r\n    'aria-controls': `scrollable-force-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n    minWidth: 290\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    padding: 0,\r\n    height: \"auto\"\r\n  },\r\n  valueContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[300]\r\n        : theme.palette.grey[700],\r\n      0.08\r\n    )\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  singleValue: {\r\n    fontSize: 16\r\n  },\r\n  placeholder: {\r\n    position: \"absolute\",\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16\r\n  },\r\n\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    color: theme.palette.text.secondary,\r\n\r\n  },\r\n  button:\r\n  {\r\n    margin: theme.spacing(1),\r\n  },\r\n  fab:\r\n  {\r\n    marginTop: -2,\r\n    float: \"right\"\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\n\r\n\r\nconst MaintenanceDetail = props => {\r\n\r\n  const [maintenance, setMaintenance] = useState(null);\r\n\r\n\r\n\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (_, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setMaintenance(props.maintenance);\r\n  }, [maintenance, props.maintenance]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"on\"\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          aria-label=\"scrollable force tabs example\"\r\n        >\r\n          <Tab label=\"Información del proyecto\" icon={<BsInfoCircle className='icon' />} {...a11yProps(0)} />\r\n          <Tab label=\"Tableros\" icon={<BsClipboard className='icon' />} {...a11yProps(1)} />\r\n          <Tab label=\"Fotos del entorno\" icon={<AiOutlinePicture className='icon' />} {...a11yProps(2)} />\r\n          <Tab label=\"Muestreo de tomas\" icon={<FiImage className='icon' />} {...a11yProps(3)} />\r\n\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <MaintenanceInfo maintenance={maintenance} />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <BoardsInfo maintenance={maintenance} />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <AroundInfo maintenance={maintenance} />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        <OutletSamplingInfo maintenance={maintenance} />\r\n      </TabPanel>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MaintenanceDetail","import React, { Fragment, useState, useEffect } from 'react';\r\nimport { emphasize, makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport clsx from 'clsx';\r\nimport { Button } from '@material-ui/core';\r\nimport PropTypes from \"prop-types\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { updateUser, listCustomers, createMaintenance } from '../../api/api';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n    minWidth: 290\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    padding: 0,\r\n    height: \"auto\"\r\n  },\r\n  valueContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[300]\r\n        : theme.palette.grey[700],\r\n      0.08\r\n    )\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  singleValue: {\r\n    fontSize: 16\r\n  },\r\n  placeholder: {\r\n    position: \"absolute\",\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16\r\n  },\r\n\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    color: theme.palette.text.secondary,\r\n\r\n  },\r\n  button:\r\n  {\r\n    margin: theme.spacing(1),\r\n  },\r\n  fab:\r\n  {\r\n    marginTop: -2,\r\n    float: \"right\"\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.shape({\r\n      current: PropTypes.any.isRequired\r\n    })\r\n  ])\r\n}\r\nconst MaintenanceForm = props => {\r\n\r\n  useEffect(() => {\r\n    console.log(props)\r\n\r\n    listCustomers().then(response => {\r\n      setCustomers(response.customers);\r\n    });\r\n    if (props.person) {\r\n\r\n      // setName(props.person.name);\r\n      // setDocumentNumber(props.person.document_number);\r\n      // setUsername(props.person.username);\r\n      // setRole(props.person.role);\r\n    }\r\n  }, [])\r\n\r\n  const [type, setType] = useState('')\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n  const [file, setFile] = useState({})\r\n  const classes = useStyles()\r\n\r\n  const [customers, setCustomers] = useState([]);\r\n  const [customer, setCustomer] = useState();\r\n  const [description, setDescription] = useState('');\r\n  const [documentNumber, setDocumentNumber] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [repeatPassword, setRepeatPassword] = useState('');\r\n  const [role, setRole] = useState(null);\r\n\r\n  const [errorDescription, setErrorDescription] = useState(false)\r\n  const [errorTextDescription, setErrorTextDescription] = useState('')\r\n\r\n  const [errorDocument, setErrorDocument] = useState(false)\r\n  const [errorTextDocument, setErrorTextDocument] = useState('')\r\n\r\n  const onChangeDescription = e => {\r\n    setDescription(e.target.value);\r\n    validateDescription(e.target.value);\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let errors = 0\r\n    errors += validateDescription()\r\n    // errors += validatePrice()\r\n    // errors += validateQuantity()\r\n    return errors\r\n  }\r\n\r\n  const validateDescription = (value) => {\r\n    let text = value !== undefined ? value : description\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorDescription(true)\r\n      setErrorTextDescription('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorDescription(false)\r\n      setErrorTextDescription('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const validateDocument = (value) => {\r\n    let text = value !== undefined ? value : documentNumber\r\n\r\n    if (text == null || text.toString().trim() === '') {\r\n      setErrorDocument(true)\r\n      setErrorTextDocument('Este campo es requerido')\r\n      return 1\r\n    }\r\n    else {\r\n      setErrorDocument(false)\r\n      setErrorTextDocument('')\r\n      return 0\r\n    }\r\n  }\r\n\r\n  const onChangeType = e => {\r\n    setType(e.target.value)\r\n  }\r\n\r\n  const onSubmitPerson = _ => {\r\n\r\n    let errores = validateForm()\r\n    // errores += validateType();\r\n\r\n\r\n    if (errores === 0) {\r\n\r\n      let data = {\r\n        'name': description,\r\n        'type': type,\r\n        'customer': customer._id,\r\n        'observation': ''\r\n      }\r\n\r\n\r\n      if (!props.person) {\r\n        createMaintenance(data).then(response => {\r\n          console.log('response', response);\r\n          if (response.status == 'success') {\r\n            toast.info('Proyecto registrado exitosamente', {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n            props.onClose();\r\n            props.onRefreshMaintenances();\r\n          } else {\r\n            toast.error('Ocurrió un error al registrar el proyecto', {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n          }\r\n\r\n        });\r\n\r\n      } else {\r\n\r\n        updateUser(data).then(response => {\r\n          console.log('response', response);\r\n          if (response.status == 'success') {\r\n            toast.info('Proyecto registrado exitosamente', {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n          } else {\r\n            toast.error('Ocurrió un error al registrar el proyecto', {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n          }\r\n\r\n        });\r\n      }\r\n    } else {\r\n      toast.error('Faltan datos por llenar', {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <ToastContainer />\r\n      <Container maxWidth=\"md\">\r\n\r\n        <Paper className={classes.paper}>\r\n          <form encType={'multipart/form-data'}\r\n            onSubmit={e => {\r\n              e.preventDefault()\r\n              onSubmitPerson()\r\n            }} >\r\n            <Grid container spacing={3}>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  fullWidth\r\n                  select\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  label=\"Tipo\"\r\n                  margin=\"dense\"\r\n                  value={type}\r\n                  onChange={onChangeType}\r\n                >\r\n                  <MenuItem key={\"tri\"} value={\"tri\"}>Trifásico</MenuItem>\r\n                  <MenuItem key={\"mono\"} value={\"mono\"}>Monofásico</MenuItem>\r\n                </TextField>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={8}>\r\n                <Autocomplete\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  getOptionLabel={\r\n                    (option) => {\r\n                      return `${option.name.toString().toUpperCase()} `\r\n                    }\r\n                  }\r\n                  filterOptions={(x) => x}\r\n                  options={customers}\r\n                  autoComplete\r\n                  getOptionSelected={(option, value) => option === value}\r\n                  onChange={(_, value) => {\r\n                    setCustomer(value);\r\n                  }}\r\n                  onInputChange={(_, newInputValue) => {\r\n                    console.log('newInputValue', newInputValue)\r\n                    if (newInputValue.toString().trim().length > 0) {\r\n                      let data = {\r\n                        search: newInputValue.toString().trim()\r\n                      }\r\n                      listCustomers(data).then(response => {\r\n                        setCustomers(response.customers);\r\n                      })\r\n                    }\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField {...params} label=\"Cliente\" variant=\"outlined\" margin=\"dense\" />\r\n                  )}\r\n                  renderTags={(tagValue, getTagProps) =>\r\n                    tagValue.map((option, index) => (\r\n                      <Chip\r\n                        label={option.name}\r\n                        {...getTagProps({ index })}\r\n                        disabled={customers.indexOf(option) !== -1}\r\n                      />\r\n                    ))\r\n                  }\r\n                  renderOption={(option) => {\r\n\r\n                    return (\r\n                      <Grid container alignItems=\"center\">\r\n                        <Grid item xs>\r\n                          <Typography >{`${option.name.toString().toUpperCase()}`}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                    );\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  error={errorDescription}\r\n                  helperText={errorTextDescription}\r\n                  margin=\"dense\"\r\n                  autoComplete='off'\r\n                  id=\"outlined-simple-start-adornment\"\r\n                  className={clsx(classes.margin, classes.textField)}\r\n                  variant=\"outlined\"\r\n                  label=\"Descripción\"\r\n                  value={description}\r\n                  onChange={onChangeDescription} />\r\n              </Grid>\r\n\r\n\r\n\r\n\r\n              <Grid item xs={2} sm={3}>\r\n                <Button disabled={disabled} type=\"submit\" variant=\"contained\" color='primary'>\r\n                  {props.person ? \"Actualizar\" : \"Guardar\"}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </Paper>\r\n\r\n      </Container>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default MaintenanceForm","import React, { useState, useEffect, Fragment } from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\nimport MaintenanceDetail from './MaintenanceDetail';\r\nimport MaintenanceForm from './MaintenanceForm';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { listMaintenances, deleteMaintenance, onSaveObservations, onSendReportMaintenance, onDownloadAttention } from '../../api/api';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { AiOutlineComment } from 'react-icons/ai';\r\nimport { FiSend, FiSearch } from 'react-icons/fi';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Swal from 'sweetalert2'\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport { AiOutlineCloudDownload } from \"react-icons/ai\";\r\nimport config from '../../config';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    iconWidth: {\r\n        width: 10\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        marginTop: 10,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    },\r\n    fab: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    icon: {\r\n        marginRight: theme.spacing(1),\r\n        color: 'black'\r\n    },\r\n}))\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    }\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n})\r\n\r\nconst Maintenances = props => {\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n        let downloaded = false\r\n        if (props.location.pathname === \"/maintenances-downloaded\") {\r\n            downloaded = true\r\n            setDownloaded(true)\r\n        }\r\n        let data = { start: 0, end: rowsPerPage, paginate: true, \"source\": \"web\", downloaded }\r\n\r\n        listMaintenances(data).then(response => {\r\n            setMaintenances(response.maintenances);\r\n            setTotalMaintenances(response.count);\r\n        });\r\n    }, []);\r\n\r\n    const classes = useStyles()\r\n\r\n    const [downloaded, setDownloaded] = useState(false)\r\n    const [maintenances, setMaintenances] = useState([])\r\n    const [maintenance, setMaintenance] = useState(null)\r\n    const [totalMaintenances, setTotalMaintenances] = useState(0)\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [openDetailMaintenance, setOpenDetailMaintenance] = useState(false);\r\n    const [openMaintenanceForm, setOpenMaintenanceForm] = useState(false);\r\n\r\n    const [openObservations, setOpenObservations] = useState(false);\r\n    const [observations, setObservations] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [loadingReport, setLoadingReport] = useState(false);\r\n\r\n    const [pdf, setPdf] = useState(false)\r\n    const [dataPdf, setDataPdf] = useState('')\r\n\r\n\r\n    const handleChangePage = (_, newPage) => {\r\n        setPage(newPage);\r\n        let data = { start: (newPage * rowsPerPage), end: rowsPerPage, paginate: true, downloaded }\r\n        listMaintenances(data).then(response => {\r\n            setMaintenances(response.maintenances);\r\n            setTotalMaintenances(response.count);\r\n        });\r\n    }\r\n\r\n    const handleChangeRowsPerPage = event => {\r\n\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n        let data = { start: 0, end: event.target.value, downloaded }\r\n        listMaintenances(data).then(response => {\r\n            setMaintenances(response.maintenances);\r\n            setTotalMaintenances(response.count);\r\n        });\r\n    }\r\n\r\n    const onCloseDeleteMaintenance = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const onRefreshMaintenances = () => {\r\n        listMaintenances().then(response => {\r\n            setMaintenances(response.maintenances);\r\n            setTotalMaintenances(response.count);\r\n            setRowsPerPage(1)\r\n        });\r\n    }\r\n\r\n    const onDeleteMaintenance = id => {\r\n        setOpen(false);\r\n\r\n        deleteMaintenance(id).then(response => {\r\n            if (response.status === 'success') {\r\n                toast.success(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                const newMaintenances = maintenances.map((currentMaintenance) => {\r\n                    if (id !== currentMaintenance._id)\r\n                        return currentMaintenance\r\n\r\n                    currentMaintenance.status = \"deleted\";\r\n                    return currentMaintenance\r\n                })\r\n                setMaintenances(newMaintenances)\r\n            } else {\r\n                toast.error(response.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        }).catch(e => {\r\n\r\n            toast.error('Ocurrió un error al eliminar el proyecto', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        })\r\n\r\n    }\r\n\r\n    const onDetailMaintenance = maintenance => () => {\r\n        setMaintenance(maintenance)\r\n        setOpenDetailMaintenance(true)\r\n    }\r\n\r\n    const onOpenObservation = maintenance => () => {\r\n        setOpenObservations(true);\r\n        setMaintenance(maintenance);\r\n    }\r\n\r\n    const closeDatailMaintenance = () => {\r\n        setOpenDetailMaintenance(false)\r\n    }\r\n\r\n    const onOpenMaintenanceForm = () => {\r\n        setOpenMaintenanceForm(true)\r\n    }\r\n\r\n    const onCloseMaintenanceForm = () => {\r\n        setOpenMaintenanceForm(false)\r\n    }\r\n\r\n    const onCloseObservations = () => {\r\n        setOpenObservations(false);\r\n    }\r\n\r\n    const saveObservations = () => {\r\n        console.log(observations);\r\n        console.log(maintenance);\r\n        setLoading(true);\r\n        let data = {\r\n            observations,\r\n            id: maintenance._id\r\n        }\r\n        onSaveObservations(data).then(response => {\r\n            setLoading(false);\r\n            setOpenObservations(false);\r\n\r\n            if (response.status === 'success') {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Mensaje',\r\n                    text: response.message,\r\n                    showConfirmButton: false,\r\n                    timer: 3000\r\n                })\r\n            } else {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: response.message,\r\n                    showConfirmButton: false,\r\n                    timer: 3000\r\n                })\r\n            }\r\n\r\n        }).catch(e => {\r\n            console.log(e);\r\n            setLoading(false);\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const onClosePdf = () => {\r\n        setPdf(false)\r\n    }\r\n\r\n    const sendReportMaintenance = (id, type) => () => {\r\n\r\n        const newMaintenances = maintenances.map(currentMaintenance => {\r\n            if (currentMaintenance._id === id) {\r\n                if (type == \"download\")\r\n                    currentMaintenance.downloading = true;\r\n                else\r\n                    currentMaintenance.loading = true;\r\n            }\r\n            return currentMaintenance;\r\n        });\r\n\r\n        setMaintenances(newMaintenances);\r\n\r\n        onSendReportMaintenance({ id, type }).then(response => {\r\n            const newMaintenances = maintenances.map(currentMaintenance => {\r\n                if (currentMaintenance._id === id) {\r\n                    if (type == \"download\")\r\n                        currentMaintenance.downloading = false;\r\n                    else\r\n                        currentMaintenance.loading = false;\r\n                }\r\n                return currentMaintenance;\r\n            });\r\n\r\n\r\n            setMaintenances(newMaintenances);\r\n\r\n            if (response.status === 'success') {\r\n                if (type != \"download\") {\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Mensaje',\r\n                        text: response.message,\r\n                        showConfirmButton: false,\r\n                        timer: 3000\r\n                    })\r\n                } else {\r\n                    const newMaintenances = maintenances.filter(currentMaintenance => currentMaintenance._id != id)\r\n                    setMaintenances(newMaintenances);\r\n\r\n                    window.open(`${config.urlPdf}${id}.pdf`)\r\n                }\r\n\r\n            } else {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: response.message,\r\n                    showConfirmButton: false,\r\n                    timer: 3000\r\n                })\r\n            }\r\n\r\n        }).catch(e => {\r\n            console.log(e);\r\n            setLoading(false);\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const onChangeDescription = e => {\r\n        setObservations(e.target.value);\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer />\r\n            <Paper className={classes.paper}>\r\n                <Fab onClick={onOpenMaintenanceForm} variant=\"extended\" color=\"primary\" size=\"small\" className={classes.margin}>\r\n                    <AddIcon className={classes.extendedIcon} />\r\n                    Nuevo mantenimiento\r\n                </Fab>\r\n\r\n                <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>DESCRIPCIÓN</TableCell>\r\n                                <TableCell>CLIENTE</TableCell>\r\n                                <TableCell>TABLEROS</TableCell>\r\n                                <TableCell>DETALLE</TableCell>\r\n                                <TableCell>ENVIAR INFORME</TableCell>\r\n                                <TableCell>DESCARGAR INFORME</TableCell>\r\n                                <TableCell>OBSERVACIONES</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                maintenances.map(maintenance => {\r\n                                    return (\r\n                                        <TableRow key={maintenance._id}>\r\n                                            <TableCell>{maintenance.name} </TableCell>\r\n                                            <TableCell>{maintenance.customer.name}</TableCell>\r\n                                            <TableCell className={classes.iconWidth}>\r\n                                                <Chip size='small' label={maintenance.boards.length} variant=\"outlined\" />\r\n                                            </TableCell>\r\n                                            <TableCell className={classes.iconWidth}>\r\n                                                <FiSearch className={'icon'} onClick={onDetailMaintenance(maintenance)} />\r\n                                            </TableCell>\r\n                                            <TableCell className={classes.iconWidth}>\r\n                                                {\r\n                                                    maintenance.loading ?\r\n                                                        <div className='circularProgress'>\r\n                                                            <CircularProgress size={16} />\r\n                                                        </div> :\r\n                                                        <FiSend className={'icon'} onClick={sendReportMaintenance(maintenance._id, \"email\")} />\r\n                                                }\r\n                                            </TableCell>\r\n                                            <TableCell className={classes.iconWidth}>\r\n                                                <Tooltip title=\"Descargar\" placement=\"top\">\r\n                                                    {\r\n                                                        maintenance.downloading ?\r\n                                                            <div className='circularProgress'>\r\n                                                                <CircularProgress size={16} />\r\n                                                            </div> :\r\n                                                            <div>\r\n                                                                <AiOutlineCloudDownload className={\"icon\"} onClick={sendReportMaintenance(maintenance._id, \"download\")} />\r\n                                                            </div>\r\n                                                    }\r\n\r\n\r\n                                                </Tooltip>\r\n                                            </TableCell>\r\n\r\n                                            <TableCell className={classes.iconWidth}>\r\n                                                <AiOutlineComment className={'icon'} onClick={onOpenObservation(maintenance)} />\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 20, 100]}\r\n                    component=\"div\"\r\n                    count={totalMaintenances}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n\r\n            <Dialog\r\n                maxWidth=\"lg\"\r\n                open={pdf}\r\n                onClose={onClosePdf}\r\n                aria-labelledby=\"draggable-dialog-title\">\r\n                <DialogTitle id=\"draggable-dialog-title\">Reporte de servicios</DialogTitle>\r\n                <DialogContent>\r\n                    <iframe src={dataPdf} title=\"Imprimir\" height=\"900px\" width=\"600px\" ></iframe>\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={onClosePdf} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={onCloseDeleteMaintenance}>\r\n                <DialogTitle >\r\n                    Alerta\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Esta seguro de eliminar esta atención?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseDeleteMaintenance} color=\"primary\">\r\n                        NO\r\n                    </Button>\r\n                    <Button onClick={onDeleteMaintenance} color=\"primary\">\r\n                        SI\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog maxWidth=\"md\" open={openMaintenanceForm} onClose={onCloseMaintenanceForm} TransitionComponent={Transition}>\r\n                <DialogContent>\r\n                    <MaintenanceForm onRefreshMaintenances={onRefreshMaintenances} onClose={onCloseMaintenanceForm} maintenance={maintenance} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onCloseMaintenanceForm} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth\r\n                fullScreen={true}\r\n                open={openDetailMaintenance}\r\n                onClose={closeDatailMaintenance}\r\n                TransitionComponent={Transition}>\r\n                <DialogContent>\r\n                    <MaintenanceDetail maintenance={maintenance} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={closeDatailMaintenance} color=\"primary\">\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                maxWidth={'sm'}\r\n                open={openObservations}\r\n                onClose={onCloseObservations}>\r\n                <DialogTitle>\r\n                    Observaciones\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <TextField\r\n                            autoComplete='off'\r\n                            multiline\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Observaciones\"\r\n                            onChange={onChangeDescription}\r\n                            fullWidth\r\n                        />\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    {\r\n                        loading ?\r\n                            <div className='circularProgress'>\r\n                                <CircularProgress />\r\n                            </div> :\r\n\r\n                            <Fragment>\r\n                                <Button autoFocus onClick={onCloseObservations} color=\"primary\">\r\n                                    Cancelar\r\n                                </Button>\r\n                                <Button onClick={saveObservations} color=\"primary\">\r\n                                    Guardar\r\n                                </Button>\r\n                            </Fragment>\r\n                    }\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment>)\r\n}\r\n\r\nexport default Maintenances"],"sourceRoot":""}